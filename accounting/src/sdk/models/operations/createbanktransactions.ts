/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type CreateBankTransactionsRequest = {
    createBankTransactions?: shared.CreateBankTransactions | undefined;
    /**
     * Unique identifier for an account.
     */
    accountId: string;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
};

export type CreateBankTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Success
     */
    createBankTransactionsResponse?: shared.CreateBankTransactionsResponse | undefined;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateBankTransactionsRequest$ {
    export type Inbound = {
        CreateBankTransactions?: shared.CreateBankTransactions$.Inbound | undefined;
        accountId: string;
        allowSyncOnPushComplete?: boolean | undefined;
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBankTransactionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateBankTransactions: shared.CreateBankTransactions$.inboundSchema.optional(),
            accountId: z.string(),
            allowSyncOnPushComplete: z.boolean().default(true),
            companyId: z.string(),
            connectionId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.CreateBankTransactions === undefined
                    ? null
                    : { createBankTransactions: v.CreateBankTransactions }),
                accountId: v.accountId,
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
            };
        });

    export type Outbound = {
        CreateBankTransactions?: shared.CreateBankTransactions$.Outbound | undefined;
        accountId: string;
        allowSyncOnPushComplete: boolean;
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankTransactionsRequest> =
        z
            .object({
                createBankTransactions: shared.CreateBankTransactions$.outboundSchema.optional(),
                accountId: z.string(),
                allowSyncOnPushComplete: z.boolean().default(true),
                companyId: z.string(),
                connectionId: z.string(),
                timeoutInMinutes: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.createBankTransactions === undefined
                        ? null
                        : { CreateBankTransactions: v.createBankTransactions }),
                    accountId: v.accountId,
                    allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                    ...(v.timeoutInMinutes === undefined
                        ? null
                        : { timeoutInMinutes: v.timeoutInMinutes }),
                };
            });
}

/** @internal */
export namespace CreateBankTransactionsResponse$ {
    export type Inbound = {
        ContentType: string;
        CreateBankTransactionsResponse?: shared.CreateBankTransactionsResponse$.Inbound | undefined;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateBankTransactionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            CreateBankTransactionsResponse:
                shared.CreateBankTransactionsResponse$.inboundSchema.optional(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateBankTransactionsResponse === undefined
                    ? null
                    : { createBankTransactionsResponse: v.CreateBankTransactionsResponse }),
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateBankTransactionsResponse?:
            | shared.CreateBankTransactionsResponse$.Outbound
            | undefined;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankTransactionsResponse> =
        z
            .object({
                contentType: z.string(),
                createBankTransactionsResponse:
                    shared.CreateBankTransactionsResponse$.outboundSchema.optional(),
                errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    ...(v.createBankTransactionsResponse === undefined
                        ? null
                        : { CreateBankTransactionsResponse: v.createBankTransactionsResponse }),
                    ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}
