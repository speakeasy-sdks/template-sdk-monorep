/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type DownloadBillAttachmentRequest = {
    /**
     * Unique identifier for an attachment.
     */
    attachmentId: string;
    /**
     * Unique identifier for a bill.
     */
    billId: string;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
};

export type DownloadBillAttachmentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Success
     */
    data?: ReadableStream<Uint8Array> | undefined;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DownloadBillAttachmentRequest$ {
    export type Inbound = {
        attachmentId: string;
        billId: string;
        companyId: string;
        connectionId: string;
    };

    export const inboundSchema: z.ZodType<DownloadBillAttachmentRequest, z.ZodTypeDef, Inbound> = z
        .object({
            attachmentId: z.string(),
            billId: z.string(),
            companyId: z.string(),
            connectionId: z.string(),
        })
        .transform((v) => {
            return {
                attachmentId: v.attachmentId,
                billId: v.billId,
                companyId: v.companyId,
                connectionId: v.connectionId,
            };
        });

    export type Outbound = {
        attachmentId: string;
        billId: string;
        companyId: string;
        connectionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DownloadBillAttachmentRequest> =
        z
            .object({
                attachmentId: z.string(),
                billId: z.string(),
                companyId: z.string(),
                connectionId: z.string(),
            })
            .transform((v) => {
                return {
                    attachmentId: v.attachmentId,
                    billId: v.billId,
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                };
            });
}

/** @internal */
export namespace DownloadBillAttachmentResponse$ {
    export type Inbound = {
        ContentType: string;
        Data?: ReadableStream<Uint8Array> | undefined;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<DownloadBillAttachmentResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Data: z.instanceof(ReadableStream<Uint8Array>).optional(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Data === undefined ? null : { data: v.Data }),
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Data?: ReadableStream<Uint8Array> | undefined;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DownloadBillAttachmentResponse> =
        z
            .object({
                contentType: z.string(),
                data: z.instanceof(ReadableStream<Uint8Array>).optional(),
                errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    ...(v.data === undefined ? null : { Data: v.data }),
                    ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                };
            });
}
