/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetAccountRequest = {
    /**
     * Unique identifier for an account.
     */
    accountId: string;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type GetAccountResponse = {
    /**
     * Success
     */
    account?: shared.Account | null | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetAccountRequest$ {
    export const inboundSchema: z.ZodType<GetAccountRequest, z.ZodTypeDef, unknown> = z.object({
        accountId: z.string(),
        companyId: z.string(),
    });

    export type Outbound = {
        accountId: string;
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountRequest> = z.object({
        accountId: z.string(),
        companyId: z.string(),
    });
}

/** @internal */
export namespace GetAccountResponse$ {
    export const inboundSchema: z.ZodType<GetAccountResponse, z.ZodTypeDef, unknown> = z
        .object({
            Account: z.nullable(shared.Account$.inboundSchema).optional(),
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                Account: "account",
                ContentType: "contentType",
                ErrorMessage: "errorMessage",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        Account?: shared.Account$.Outbound | null | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountResponse> = z
        .object({
            account: z.nullable(shared.Account$.outboundSchema).optional(),
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                account: "Account",
                contentType: "ContentType",
                errorMessage: "ErrorMessage",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
