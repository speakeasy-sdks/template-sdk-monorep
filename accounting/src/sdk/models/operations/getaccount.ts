/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";

export type GetAccountRequest = {
  /**
   * Unique identifier for an account.
   */
  accountId: string;
  /**
   * Unique identifier for a company.
   */
  companyId: string;
};

export type GetAccountResponse = {
  /**
   * Success
   */
  account?: shared.Account | null | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Your API request was not properly authorized.
   */
  errorMessage?: shared.ErrorMessage | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetAccountRequest$inboundSchema: z.ZodType<
  GetAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  companyId: z.string(),
});

/** @internal */
export type GetAccountRequest$Outbound = {
  accountId: string;
  companyId: string;
};

/** @internal */
export const GetAccountRequest$outboundSchema: z.ZodType<
  GetAccountRequest$Outbound,
  z.ZodTypeDef,
  GetAccountRequest
> = z.object({
  accountId: z.string(),
  companyId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountRequest$ {
  /** @deprecated use `GetAccountRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountRequest$inboundSchema;
  /** @deprecated use `GetAccountRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountRequest$outboundSchema;
  /** @deprecated use `GetAccountRequest$Outbound` instead. */
  export type Outbound = GetAccountRequest$Outbound;
}

/** @internal */
export const GetAccountResponse$inboundSchema: z.ZodType<
  GetAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Account: z.nullable(shared.Account$inboundSchema).optional(),
  ContentType: z.string(),
  ErrorMessage: shared.ErrorMessage$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "Account": "account",
    "ContentType": "contentType",
    "ErrorMessage": "errorMessage",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAccountResponse$Outbound = {
  Account?: shared.Account$Outbound | null | undefined;
  ContentType: string;
  ErrorMessage?: shared.ErrorMessage$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAccountResponse$outboundSchema: z.ZodType<
  GetAccountResponse$Outbound,
  z.ZodTypeDef,
  GetAccountResponse
> = z.object({
  account: z.nullable(shared.Account$outboundSchema).optional(),
  contentType: z.string(),
  errorMessage: shared.ErrorMessage$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    account: "Account",
    contentType: "ContentType",
    errorMessage: "ErrorMessage",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountResponse$ {
  /** @deprecated use `GetAccountResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountResponse$inboundSchema;
  /** @deprecated use `GetAccountResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountResponse$outboundSchema;
  /** @deprecated use `GetAccountResponse$Outbound` instead. */
  export type Outbound = GetAccountResponse$Outbound;
}
