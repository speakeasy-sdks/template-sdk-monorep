/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type GetAccountTransactionRequest = {
    /**
     * Unique identifier for an account transaction.
     */
    accountTransactionId: string;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
};

export type GetAccountTransactionResponse = {
    /**
     * Success
     */
    accountTransaction?: shared.AccountTransaction | null | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetAccountTransactionRequest$ {
    export const inboundSchema: z.ZodType<GetAccountTransactionRequest, z.ZodTypeDef, unknown> =
        z.object({
            accountTransactionId: z.string(),
            companyId: z.string(),
            connectionId: z.string(),
        });

    export type Outbound = {
        accountTransactionId: string;
        companyId: string;
        connectionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountTransactionRequest> =
        z.object({
            accountTransactionId: z.string(),
            companyId: z.string(),
            connectionId: z.string(),
        });
}

/** @internal */
export namespace GetAccountTransactionResponse$ {
    export const inboundSchema: z.ZodType<GetAccountTransactionResponse, z.ZodTypeDef, unknown> = z
        .object({
            AccountTransaction: z.nullable(shared.AccountTransaction$.inboundSchema).optional(),
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                AccountTransaction: "accountTransaction",
                ContentType: "contentType",
                ErrorMessage: "errorMessage",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        AccountTransaction?: shared.AccountTransaction$.Outbound | null | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountTransactionResponse> =
        z
            .object({
                accountTransaction: z
                    .nullable(shared.AccountTransaction$.outboundSchema)
                    .optional(),
                contentType: z.string(),
                errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
            })
            .transform((v) => {
                return remap$(v, {
                    accountTransaction: "AccountTransaction",
                    contentType: "ContentType",
                    errorMessage: "ErrorMessage",
                    statusCode: "StatusCode",
                    rawResponse: "RawResponse",
                });
            });
}
