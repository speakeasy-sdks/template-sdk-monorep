/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetProfitAndLossRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Number of months defining the period of interest.
     */
    periodLength: number;
    /**
     * Number of periods with `periodLength` to compare.
     */
    periodsToCompare: number;
    /**
     * The month the report starts from.
     */
    startMonth?: string | undefined;
};

export type GetProfitAndLossResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * Success
     */
    profitAndLossReport?: shared.ProfitAndLossReportInput | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetProfitAndLossRequest$ {
    export type Inbound = {
        companyId: string;
        periodLength: number;
        periodsToCompare: number;
        startMonth?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetProfitAndLossRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            periodLength: z.number().int(),
            periodsToCompare: z.number().int(),
            startMonth: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                periodLength: v.periodLength,
                periodsToCompare: v.periodsToCompare,
                ...(v.startMonth === undefined ? null : { startMonth: v.startMonth }),
            };
        });

    export type Outbound = {
        companyId: string;
        periodLength: number;
        periodsToCompare: number;
        startMonth?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProfitAndLossRequest> = z
        .object({
            companyId: z.string(),
            periodLength: z.number().int(),
            periodsToCompare: z.number().int(),
            startMonth: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                periodLength: v.periodLength,
                periodsToCompare: v.periodsToCompare,
                ...(v.startMonth === undefined ? null : { startMonth: v.startMonth }),
            };
        });
}

/** @internal */
export namespace GetProfitAndLossResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        ProfitAndLossReport?: shared.ProfitAndLossReportInput$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetProfitAndLossResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            ProfitAndLossReport: shared.ProfitAndLossReportInput$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                ...(v.ProfitAndLossReport === undefined
                    ? null
                    : { profitAndLossReport: v.ProfitAndLossReport }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        ProfitAndLossReport?: shared.ProfitAndLossReportInput$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProfitAndLossResponse> = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            profitAndLossReport: shared.ProfitAndLossReportInput$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                ...(v.profitAndLossReport === undefined
                    ? null
                    : { ProfitAndLossReport: v.profitAndLossReport }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
