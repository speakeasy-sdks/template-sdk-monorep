/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type GetSalesOrderRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a sales order.
     */
    salesOrderId: string;
};

export type GetSalesOrderResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your API request was not properly authorized.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * Success
     */
    salesOrder?: shared.SalesOrder | null | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetSalesOrderRequest$ {
    export type Inbound = {
        companyId: string;
        salesOrderId: string;
    };

    export const inboundSchema: z.ZodType<GetSalesOrderRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            salesOrderId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                salesOrderId: v.salesOrderId,
            };
        });

    export type Outbound = {
        companyId: string;
        salesOrderId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSalesOrderRequest> = z
        .object({
            companyId: z.string(),
            salesOrderId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                salesOrderId: v.salesOrderId,
            };
        });
}

/** @internal */
export namespace GetSalesOrderResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        SalesOrder?: shared.SalesOrder$.Inbound | null | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetSalesOrderResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            SalesOrder: z.nullable(shared.SalesOrder$.inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                ...(v.SalesOrder === undefined ? null : { salesOrder: v.SalesOrder }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        SalesOrder?: shared.SalesOrder$.Outbound | null | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSalesOrderResponse> = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            salesOrder: z.nullable(shared.SalesOrder$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                ...(v.salesOrder === undefined ? null : { SalesOrder: v.salesOrder }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
