/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type ListAccountTransactionsRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
     */
    orderBy?: string | undefined;
    /**
     * Page number. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    page?: number | undefined;
    /**
     * Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
     */
    pageSize?: number | undefined;
    /**
     * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
     */
    query?: string | undefined;
};

export type ListAccountTransactionsResponse = {
    /**
     * Success
     */
    accountTransactions?: shared.AccountTransactions | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Your `query` parameter was not correctly formed
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ListAccountTransactionsRequest$ {
    export const inboundSchema: z.ZodType<ListAccountTransactionsRequest, z.ZodTypeDef, unknown> =
        z.object({
            companyId: z.string(),
            connectionId: z.string(),
            orderBy: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(100),
            query: z.string().optional(),
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        orderBy?: string | undefined;
        page: number;
        pageSize: number;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAccountTransactionsRequest> =
        z.object({
            companyId: z.string(),
            connectionId: z.string(),
            orderBy: z.string().optional(),
            page: z.number().int().default(1),
            pageSize: z.number().int().default(100),
            query: z.string().optional(),
        });
}

/** @internal */
export namespace ListAccountTransactionsResponse$ {
    export const inboundSchema: z.ZodType<ListAccountTransactionsResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                AccountTransactions: shared.AccountTransactions$.inboundSchema.optional(),
                ContentType: z.string(),
                ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return remap$(v, {
                    AccountTransactions: "accountTransactions",
                    ContentType: "contentType",
                    ErrorMessage: "errorMessage",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                });
            });

    export type Outbound = {
        AccountTransactions?: shared.AccountTransactions$.Outbound | undefined;
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListAccountTransactionsResponse
    > = z
        .object({
            accountTransactions: shared.AccountTransactions$.outboundSchema.optional(),
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                accountTransactions: "AccountTransactions",
                contentType: "ContentType",
                errorMessage: "ErrorMessage",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
