/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export type UpdatePurchaseOrderRequest = {
    purchaseOrder?: shared.PurchaseOrder | null | undefined;
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    forceUpdate?: boolean | undefined;
    /**
     * Unique identifier for a purchase order.
     */
    purchaseOrderId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
};

export type UpdatePurchaseOrderResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The request made is not valid.
     */
    errorMessage?: shared.ErrorMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    updatePurchaseOrderResponse?: shared.UpdatePurchaseOrderResponse | undefined;
};

/** @internal */
export namespace UpdatePurchaseOrderRequest$ {
    export type Inbound = {
        PurchaseOrder?: shared.PurchaseOrder$.Inbound | null | undefined;
        companyId: string;
        connectionId: string;
        forceUpdate?: boolean | undefined;
        purchaseOrderId: string;
        timeoutInMinutes?: number | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePurchaseOrderRequest, z.ZodTypeDef, Inbound> = z
        .object({
            PurchaseOrder: z.nullable(shared.PurchaseOrder$.inboundSchema).optional(),
            companyId: z.string(),
            connectionId: z.string(),
            forceUpdate: z.boolean().default(false),
            purchaseOrderId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.PurchaseOrder === undefined ? null : { purchaseOrder: v.PurchaseOrder }),
                companyId: v.companyId,
                connectionId: v.connectionId,
                forceUpdate: v.forceUpdate,
                purchaseOrderId: v.purchaseOrderId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
            };
        });

    export type Outbound = {
        PurchaseOrder?: shared.PurchaseOrder$.Outbound | null | undefined;
        companyId: string;
        connectionId: string;
        forceUpdate: boolean;
        purchaseOrderId: string;
        timeoutInMinutes?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePurchaseOrderRequest> = z
        .object({
            purchaseOrder: z.nullable(shared.PurchaseOrder$.outboundSchema).optional(),
            companyId: z.string(),
            connectionId: z.string(),
            forceUpdate: z.boolean().default(false),
            purchaseOrderId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.purchaseOrder === undefined ? null : { PurchaseOrder: v.purchaseOrder }),
                companyId: v.companyId,
                connectionId: v.connectionId,
                forceUpdate: v.forceUpdate,
                purchaseOrderId: v.purchaseOrderId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
            };
        });
}

/** @internal */
export namespace UpdatePurchaseOrderResponse$ {
    export type Inbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        UpdatePurchaseOrderResponse?: shared.UpdatePurchaseOrderResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePurchaseOrderResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ErrorMessage: shared.ErrorMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            UpdatePurchaseOrderResponse:
                shared.UpdatePurchaseOrderResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ErrorMessage === undefined ? null : { errorMessage: v.ErrorMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.UpdatePurchaseOrderResponse === undefined
                    ? null
                    : { updatePurchaseOrderResponse: v.UpdatePurchaseOrderResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        ErrorMessage?: shared.ErrorMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        UpdatePurchaseOrderResponse?: shared.UpdatePurchaseOrderResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePurchaseOrderResponse> = z
        .object({
            contentType: z.string(),
            errorMessage: shared.ErrorMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            updatePurchaseOrderResponse:
                shared.UpdatePurchaseOrderResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.errorMessage === undefined ? null : { ErrorMessage: v.errorMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.updatePurchaseOrderResponse === undefined
                    ? null
                    : { UpdatePurchaseOrderResponse: v.updatePurchaseOrderResponse }),
            };
        });
}
