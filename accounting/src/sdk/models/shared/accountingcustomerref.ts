/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AccountingCustomerRef = {
    /**
     * `customerName` from the Customer data type
     */
    companyName?: string | null | undefined;
    /**
     * `id` from the Customers data type
     */
    id: string;
};

/** @internal */
export namespace AccountingCustomerRef$ {
    export type Inbound = {
        companyName?: string | null | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<AccountingCustomerRef, z.ZodTypeDef, Inbound> = z
        .object({
            companyName: z.nullable(z.string()).optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                id: v.id,
            };
        });

    export type Outbound = {
        companyName?: string | null | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingCustomerRef> = z
        .object({
            companyName: z.nullable(z.string()).optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                id: v.id,
            };
        });
}
