/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AgedOutstandingAmount, AgedOutstandingAmount$ } from "./agedoutstandingamount";
import * as z from "zod";

export type AccountingAgedCurrencyOutstanding = {
    /**
     * Array of outstanding amounts by period.
     */
    agedOutstandingAmounts?: Array<AgedOutstandingAmount> | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
};

export type AgedCreditor = {
    /**
     * Array of aged creditors by currency.
     */
    agedCurrencyOutstanding?: Array<AccountingAgedCurrencyOutstanding> | undefined;
    /**
     * Supplier ID of the aged creditor.
     */
    supplierId?: string | undefined;
    /**
     * Supplier name of the aged creditor.
     */
    supplierName?: string | undefined;
};

/** @internal */
export namespace AccountingAgedCurrencyOutstanding$ {
    export type Inbound = {
        agedOutstandingAmounts?: Array<AgedOutstandingAmount$.Inbound> | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        AccountingAgedCurrencyOutstanding,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            agedOutstandingAmounts: z.array(AgedOutstandingAmount$.inboundSchema).optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agedOutstandingAmounts === undefined
                    ? null
                    : { agedOutstandingAmounts: v.agedOutstandingAmounts }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        agedOutstandingAmounts?: Array<AgedOutstandingAmount$.Outbound> | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingAgedCurrencyOutstanding
    > = z
        .object({
            agedOutstandingAmounts: z.array(AgedOutstandingAmount$.outboundSchema).optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agedOutstandingAmounts === undefined
                    ? null
                    : { agedOutstandingAmounts: v.agedOutstandingAmounts }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}

/** @internal */
export namespace AgedCreditor$ {
    export type Inbound = {
        agedCurrencyOutstanding?: Array<AccountingAgedCurrencyOutstanding$.Inbound> | undefined;
        supplierId?: string | undefined;
        supplierName?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AgedCreditor, z.ZodTypeDef, Inbound> = z
        .object({
            agedCurrencyOutstanding: z
                .array(z.lazy(() => AccountingAgedCurrencyOutstanding$.inboundSchema))
                .optional(),
            supplierId: z.string().optional(),
            supplierName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agedCurrencyOutstanding === undefined
                    ? null
                    : { agedCurrencyOutstanding: v.agedCurrencyOutstanding }),
                ...(v.supplierId === undefined ? null : { supplierId: v.supplierId }),
                ...(v.supplierName === undefined ? null : { supplierName: v.supplierName }),
            };
        });

    export type Outbound = {
        agedCurrencyOutstanding?: Array<AccountingAgedCurrencyOutstanding$.Outbound> | undefined;
        supplierId?: string | undefined;
        supplierName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AgedCreditor> = z
        .object({
            agedCurrencyOutstanding: z
                .array(z.lazy(() => AccountingAgedCurrencyOutstanding$.outboundSchema))
                .optional(),
            supplierId: z.string().optional(),
            supplierName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agedCurrencyOutstanding === undefined
                    ? null
                    : { agedCurrencyOutstanding: v.agedCurrencyOutstanding }),
                ...(v.supplierId === undefined ? null : { supplierId: v.supplierId }),
                ...(v.supplierName === undefined ? null : { supplierName: v.supplierName }),
            };
        });
}
