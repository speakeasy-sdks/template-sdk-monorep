/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type AgedOutstandingAmountDetail = {
    /**
     * The amount outstanding.
     */
    amount?: Decimal$ | number | undefined;
    /**
     * Name of data type with outstanding amount for given period.
     */
    name?: string | undefined;
};

/** @internal */
export namespace AgedOutstandingAmountDetail$ {
    export type Inbound = {
        amount?: number | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AgedOutstandingAmountDetail, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        amount?: number | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AgedOutstandingAmountDetail> = z
        .object({
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
