/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { blobLikeSchema } from "../../types";
import { CodatFile, CodatFile$ } from "./codatfile";
import * as z from "zod";

export type AttachmentUpload = {
    /**
     * The file to be uploaded as an attachment.
     */
    file: CodatFile | Blob;
};

/** @internal */
export namespace AttachmentUpload$ {
    export type Inbound = {
        file: CodatFile$.Inbound;
    };

    export const inboundSchema: z.ZodType<AttachmentUpload, z.ZodTypeDef, Inbound> = z
        .object({
            file: CodatFile$.inboundSchema,
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });

    export type Outbound = {
        file: CodatFile$.Outbound | Blob;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttachmentUpload> = z
        .object({
            file: CodatFile$.outboundSchema.or(blobLikeSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });
}
