/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { BankTransactionType, BankTransactionType$ } from "./banktransactiontype";
import { Links, Links$ } from "./links";
import * as z from "zod";

/**
 * > **Accessing Bank Accounts through Banking API**
 *
 * @remarks
 * >
 * > This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators.
 * >
 * > To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/banking-api#/operations/list-all-banking-transactions)
 *
 * > View the coverage for bank transactions in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bankTransactions" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * Transactional banking data for a specific company and account.
 *
 * Bank transactions include the:
 * * Amount of the transaction.
 * * Current account balance.
 * * Transaction type, for example, credit, debit, or transfer.
 */
export type AccountingBankAccountTransaction = {
    /**
     * Unique identifier to the `accountId` the bank transactions originates from.
     */
    accountId?: string | null | undefined;
    /**
     * The amount transacted in the bank transaction.
     */
    amount?: Decimal$ | number | undefined;
    /**
     * The remaining balance in the account with ID `accountId`.
     */
    balance?: Decimal$ | number | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    clearedOnDate?: string | undefined;
    /**
     * Description of the bank transaction.
     */
    description?: string | null | undefined;
    /**
     * Identifier for the bank transaction, unique to the company in the accounting platform.
     */
    id?: string | undefined;
    modifiedDate?: string | undefined;
    /**
     * `True` if the bank transaction has been [reconciled](https://www.xero.com/uk/guides/what-is-bank-reconciliation/) in the accounting platform.
     */
    reconciled?: boolean | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Type of transaction for the bank statement line.
     */
    transactionType?: BankTransactionType | undefined;
};

export type BankTransactions = {
    links: Links;
    /**
     * Current page number.
     */
    pageNumber: number;
    /**
     * Number of items to return in results array.
     */
    pageSize: number;
    results?: Array<AccountingBankAccountTransaction> | undefined;
    /**
     * Total number of items.
     */
    totalResults: number;
};

/** @internal */
export namespace AccountingBankAccountTransaction$ {
    export type Inbound = {
        accountId?: string | null | undefined;
        amount?: number | undefined;
        balance?: number | undefined;
        clearedOnDate?: string | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        modifiedDate?: string | undefined;
        reconciled?: boolean | undefined;
        sourceModifiedDate?: string | undefined;
        transactionType?: BankTransactionType | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingBankAccountTransaction, z.ZodTypeDef, Inbound> =
        z
            .object({
                accountId: z.nullable(z.string()).optional(),
                amount: z
                    .number()
                    .transform((v) => new Decimal$(v))
                    .optional(),
                balance: z
                    .number()
                    .transform((v) => new Decimal$(v))
                    .optional(),
                clearedOnDate: z.string().optional(),
                description: z.nullable(z.string()).optional(),
                id: z.string().optional(),
                modifiedDate: z.string().optional(),
                reconciled: z.boolean().optional(),
                sourceModifiedDate: z.string().optional(),
                transactionType: BankTransactionType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.amount === undefined ? null : { amount: v.amount }),
                    ...(v.balance === undefined ? null : { balance: v.balance }),
                    ...(v.clearedOnDate === undefined ? null : { clearedOnDate: v.clearedOnDate }),
                    ...(v.description === undefined ? null : { description: v.description }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                    ...(v.reconciled === undefined ? null : { reconciled: v.reconciled }),
                    ...(v.sourceModifiedDate === undefined
                        ? null
                        : { sourceModifiedDate: v.sourceModifiedDate }),
                    ...(v.transactionType === undefined
                        ? null
                        : { transactionType: v.transactionType }),
                };
            });

    export type Outbound = {
        accountId?: string | null | undefined;
        amount?: number | undefined;
        balance?: number | undefined;
        clearedOnDate?: string | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        modifiedDate?: string | undefined;
        reconciled?: boolean | undefined;
        sourceModifiedDate?: string | undefined;
        transactionType?: BankTransactionType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingBankAccountTransaction
    > = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            balance: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            clearedOnDate: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            modifiedDate: z.string().optional(),
            reconciled: z.boolean().optional(),
            sourceModifiedDate: z.string().optional(),
            transactionType: BankTransactionType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.clearedOnDate === undefined ? null : { clearedOnDate: v.clearedOnDate }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.reconciled === undefined ? null : { reconciled: v.reconciled }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.transactionType === undefined
                    ? null
                    : { transactionType: v.transactionType }),
            };
        });
}

/** @internal */
export namespace BankTransactions$ {
    export type Inbound = {
        _links: Links$.Inbound;
        pageNumber: number;
        pageSize: number;
        results?: Array<AccountingBankAccountTransaction$.Inbound> | undefined;
        totalResults: number;
    };

    export const inboundSchema: z.ZodType<BankTransactions, z.ZodTypeDef, Inbound> = z
        .object({
            _links: Links$.inboundSchema,
            pageNumber: z.number().int(),
            pageSize: z.number().int(),
            results: z
                .array(z.lazy(() => AccountingBankAccountTransaction$.inboundSchema))
                .optional(),
            totalResults: z.number().int(),
        })
        .transform((v) => {
            return {
                links: v._links,
                pageNumber: v.pageNumber,
                pageSize: v.pageSize,
                ...(v.results === undefined ? null : { results: v.results }),
                totalResults: v.totalResults,
            };
        });

    export type Outbound = {
        _links: Links$.Outbound;
        pageNumber: number;
        pageSize: number;
        results?: Array<AccountingBankAccountTransaction$.Outbound> | undefined;
        totalResults: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankTransactions> = z
        .object({
            links: Links$.outboundSchema,
            pageNumber: z.number().int(),
            pageSize: z.number().int(),
            results: z
                .array(z.lazy(() => AccountingBankAccountTransaction$.outboundSchema))
                .optional(),
            totalResults: z.number().int(),
        })
        .transform((v) => {
            return {
                _links: v.links,
                pageNumber: v.pageNumber,
                pageSize: v.pageSize,
                ...(v.results === undefined ? null : { results: v.results }),
                totalResults: v.totalResults,
            };
        });
}
