/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountRef, AccountRef$ } from "./accountref";
import { TaxRateRef, TaxRateRef$ } from "./taxrateref";
import * as z from "zod";

/**
 * Item details that are only for bills.
 */
export type BillItem = {
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    accountRef?: AccountRef | undefined;
    /**
     * Short description of the product or service that has been bought by the customer.
     */
    description?: string | null | undefined;
    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     *
     * @remarks
     *
     * Found on:
     *
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    taxRateRef?: TaxRateRef | undefined;
    /**
     * Unit price of the product or service.
     */
    unitPrice?: Decimal$ | number | null | undefined;
};

/** @internal */
export namespace BillItem$ {
    export type Inbound = {
        accountRef?: AccountRef$.Inbound | undefined;
        description?: string | null | undefined;
        taxRateRef?: TaxRateRef$.Inbound | undefined;
        unitPrice?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<BillItem, z.ZodTypeDef, Inbound> = z
        .object({
            accountRef: AccountRef$.inboundSchema.optional(),
            description: z.nullable(z.string()).optional(),
            taxRateRef: TaxRateRef$.inboundSchema.optional(),
            unitPrice: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxRateRef === undefined ? null : { taxRateRef: v.taxRateRef }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
            };
        });

    export type Outbound = {
        accountRef?: AccountRef$.Outbound | undefined;
        description?: string | null | undefined;
        taxRateRef?: TaxRateRef$.Outbound | undefined;
        unitPrice?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BillItem> = z
        .object({
            accountRef: AccountRef$.outboundSchema.optional(),
            description: z.nullable(z.string()).optional(),
            taxRateRef: TaxRateRef$.outboundSchema.optional(),
            unitPrice: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.taxRateRef === undefined ? null : { taxRateRef: v.taxRateRef }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
            };
        });
}
