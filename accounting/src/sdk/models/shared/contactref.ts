/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Allowed name of the 'dataType'.
 */
export enum ContactRefDataType {
    Customers = "customers",
    Suppliers = "suppliers",
}

/**
 * A customer or supplier associated with the direct cost.
 */
export type ContactRef = {
    /**
     * Allowed name of the 'dataType'.
     */
    dataType?: ContactRefDataType | null | undefined;
    /**
     * Unique identifier for a customer or supplier.
     */
    id: string;
};

/** @internal */
export const ContactRefDataType$ = z.nativeEnum(ContactRefDataType);

/** @internal */
export namespace ContactRef$ {
    export type Inbound = {
        dataType?: ContactRefDataType | null | undefined;
        id: string;
    };

    export const inboundSchema: z.ZodType<ContactRef, z.ZodTypeDef, Inbound> = z
        .object({
            dataType: z.nullable(ContactRefDataType$).optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                id: v.id,
            };
        });

    export type Outbound = {
        dataType?: ContactRefDataType | null | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContactRef> = z
        .object({
            dataType: z.nullable(ContactRefDataType$).optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                id: v.id,
            };
        });
}
