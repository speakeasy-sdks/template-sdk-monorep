/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountingCustomerRef, AccountingCustomerRef$ } from "./accountingcustomerref";
import { DataType, DataType$ } from "./datatype";
import { InvoiceLineItem, InvoiceLineItem$ } from "./invoicelineitem";
import { InvoiceStatus, InvoiceStatus$ } from "./invoicestatus";
import { Metadata, Metadata$ } from "./metadata";
import { PaymentAllocationItems, PaymentAllocationItems$ } from "./paymentallocationitems";
import { PushOperationChange, PushOperationChange$ } from "./pushoperationchange";
import { PushOperationStatus, PushOperationStatus$ } from "./pushoperationstatus";
import { SalesOrderRef, SalesOrderRef$ } from "./salesorderref";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { Validation, Validation$ } from "./validation";
import { WithholdingTaxItems, WithholdingTaxItems$ } from "./withholdingtaxitems";
import * as z from "zod";

/**
 * > **Invoices or bills?**
 *
 * @remarks
 * >
 * > We distinguish between invoices where the company *owes money* vs. *is owed money*. If the company issued an invoice, and is owed money (accounts receivable) we call this an Invoice.
 * >
 * > See [Bills](https://docs.codat.io/accounting-api#/schemas/Bill) for the accounts payable equivalent of bills.
 *
 * View the coverage for invoices in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=invoices" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * An invoice is an itemized record of goods sold or services provided to a [customer](https://docs.codat.io/accounting-api#/schemas/Customer).
 *
 * In Codat, an invoice contains details of:
 *
 * - The timeline of the invoice—when it was raised, marked as paid, last edited, and so on.
 * - How much the invoice is for, what portion of the invoice is tax or discounts, and what currency the amounts are represented in.
 * - Who the invoice has been raised to; the _customer_.
 * - The breakdown of what the invoice is for; the _line items_.
 * - Any [payments](https://docs.codat.io/accounting-api#/schemas/Payment) assigned to the invoice; the _payment allocations_.
 *
 * > **Invoice PDF downloads**
 * >
 * > You can <a className="external" href="https://docs.codat.io/accounting-api#/operations/get-invoice-pdf" target="_blank">download a PDF version</a> of an invoice for supported integrations.
 * >
 * > The filename will be invoice-{number}.pdf.
 *
 * > **Referencing an invoice in Sage 50 and ClearBooks**
 * >
 * > In Sage 50 and ClearBooks, you may prefer to use the **invoiceNumber** to identify an invoice rather than the invoice **id**. Each time a draft invoice is submitted or printed, the draft **id** becomes void and a submitted invoice with a new **id** exists in its place. In both platforms, the **invoiceNumber** should remain the same.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingInvoice = {
    /**
     * Additional tax amount applied to invoice.
     */
    additionalTaxAmount?: Decimal$ | number | undefined;
    /**
     * Percentage rate of any additional tax applied to the invoice.
     */
    additionalTaxPercentage?: Decimal$ | number | undefined;
    /**
     * Amount outstanding on the invoice.
     */
    amountDue: Decimal$ | number;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    customerRef?: AccountingCustomerRef | undefined;
    /**
     * Percentage rate (from 0 to 100) of discounts applied to the invoice. For example: A 5% discount will return a value of `5`, not `0.05`.
     */
    discountPercentage?: Decimal$ | number | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    dueDate?: string | undefined;
    /**
     * Identifier for the invoice, unique to the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Friendly reference for the invoice. If available, this appears in the file name of invoice attachments.
     */
    invoiceNumber?: string | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    issueDate: string;
    /**
     * An array of line items.
     */
    lineItems?: Array<InvoiceLineItem> | null | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * Any additional information about the invoice. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when an invoice is emailed from the accounting platform to the customer.
     */
    note?: string | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    paidOnDate?: string | undefined;
    /**
     * An array of payment allocations.
     */
    paymentAllocations?: Array<PaymentAllocationItems> | null | undefined;
    /**
     * List of references to related Sales orders.
     */
    salesOrderRefs?: Array<SalesOrderRef> | null | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Current state of the invoice:
     *
     * @remarks
     *
     * - `Draft` - Invoice hasn't been submitted to the supplier. It may be in a pending state or is scheduled for future submission, for example by email.
     * - `Submitted` - Invoice is no longer a draft. It has been processed and, or, sent to the customer. In this state, it will impact the ledger. It also has no payments made against it (amountDue == totalAmount).
     * - `PartiallyPaid` - The balance paid against the invoice is positive, but less than the total invoice amount (0 < amountDue < totalAmount).
     * - `Paid` - Invoice is paid in full. This includes if the invoice has been credited or overpaid (amountDue == 0).
     * - `Void` - An invoice can become Void when it's deleted, refunded, written off, or cancelled. A voided invoice may still be PartiallyPaid, and so all outstanding amounts on voided invoices are removed from the accounts receivable account.
     */
    status: InvoiceStatus;
    /**
     * Total amount of the invoice excluding any taxes.
     */
    subTotal?: Decimal$ | number | null | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
    /**
     * Amount of the invoice, inclusive of tax.
     */
    totalAmount: Decimal$ | number;
    /**
     * Numerical value of discounts applied to the invoice.
     */
    totalDiscount?: Decimal$ | number | null | undefined;
    /**
     * Amount of tax on the invoice.
     */
    totalTaxAmount: Decimal$ | number;
    withholdingTax?: Array<WithholdingTaxItems> | null | undefined;
};

export type CreateInvoiceResponse = {
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    data?: AccountingInvoice | null | undefined;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * Push status code.
     */
    statusCode: number;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
};

/** @internal */
export namespace AccountingInvoice$ {
    export type Inbound = {
        additionalTaxAmount?: number | undefined;
        additionalTaxPercentage?: number | undefined;
        amountDue: number;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        customerRef?: AccountingCustomerRef$.Inbound | undefined;
        discountPercentage?: number | null | undefined;
        dueDate?: string | undefined;
        id?: string | undefined;
        invoiceNumber?: string | null | undefined;
        issueDate: string;
        lineItems?: Array<InvoiceLineItem$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        paidOnDate?: string | undefined;
        paymentAllocations?: Array<PaymentAllocationItems$.Inbound> | null | undefined;
        salesOrderRefs?: Array<SalesOrderRef$.Inbound> | null | undefined;
        sourceModifiedDate?: string | undefined;
        status: InvoiceStatus;
        subTotal?: number | null | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
        totalAmount: number;
        totalDiscount?: number | null | undefined;
        totalTaxAmount: number;
        withholdingTax?: Array<WithholdingTaxItems$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingInvoice, z.ZodTypeDef, Inbound> = z
        .object({
            additionalTaxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            additionalTaxPercentage: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            amountDue: z.number().transform((v) => new Decimal$(v)),
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            customerRef: AccountingCustomerRef$.inboundSchema.optional(),
            discountPercentage: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            dueDate: z.string().optional(),
            id: z.string().optional(),
            invoiceNumber: z.nullable(z.string()).optional(),
            issueDate: z.string(),
            lineItems: z.nullable(z.array(InvoiceLineItem$.inboundSchema)).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            paidOnDate: z.string().optional(),
            paymentAllocations: z
                .nullable(z.array(PaymentAllocationItems$.inboundSchema))
                .optional(),
            salesOrderRefs: z.nullable(z.array(SalesOrderRef$.inboundSchema)).optional(),
            sourceModifiedDate: z.string().optional(),
            status: InvoiceStatus$,
            subTotal: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
            totalAmount: z.number().transform((v) => new Decimal$(v)),
            totalDiscount: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            totalTaxAmount: z.number().transform((v) => new Decimal$(v)),
            withholdingTax: z.nullable(z.array(WithholdingTaxItems$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.additionalTaxAmount === undefined
                    ? null
                    : { additionalTaxAmount: v.additionalTaxAmount }),
                ...(v.additionalTaxPercentage === undefined
                    ? null
                    : { additionalTaxPercentage: v.additionalTaxPercentage }),
                amountDue: v.amountDue,
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.discountPercentage === undefined
                    ? null
                    : { discountPercentage: v.discountPercentage }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceNumber === undefined ? null : { invoiceNumber: v.invoiceNumber }),
                issueDate: v.issueDate,
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paidOnDate === undefined ? null : { paidOnDate: v.paidOnDate }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.salesOrderRefs === undefined ? null : { salesOrderRefs: v.salesOrderRefs }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                status: v.status,
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                totalAmount: v.totalAmount,
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                totalTaxAmount: v.totalTaxAmount,
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
            };
        });

    export type Outbound = {
        additionalTaxAmount?: number | undefined;
        additionalTaxPercentage?: number | undefined;
        amountDue: number;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        customerRef?: AccountingCustomerRef$.Outbound | undefined;
        discountPercentage?: number | null | undefined;
        dueDate?: string | undefined;
        id?: string | undefined;
        invoiceNumber?: string | null | undefined;
        issueDate: string;
        lineItems?: Array<InvoiceLineItem$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        paidOnDate?: string | undefined;
        paymentAllocations?: Array<PaymentAllocationItems$.Outbound> | null | undefined;
        salesOrderRefs?: Array<SalesOrderRef$.Outbound> | null | undefined;
        sourceModifiedDate?: string | undefined;
        status: InvoiceStatus;
        subTotal?: number | null | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
        totalAmount: number;
        totalDiscount?: number | null | undefined;
        totalTaxAmount: number;
        withholdingTax?: Array<WithholdingTaxItems$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingInvoice> = z
        .object({
            additionalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            additionalTaxPercentage: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            amountDue: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            customerRef: AccountingCustomerRef$.outboundSchema.optional(),
            discountPercentage: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            dueDate: z.string().optional(),
            id: z.string().optional(),
            invoiceNumber: z.nullable(z.string()).optional(),
            issueDate: z.string(),
            lineItems: z.nullable(z.array(InvoiceLineItem$.outboundSchema)).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            paidOnDate: z.string().optional(),
            paymentAllocations: z
                .nullable(z.array(PaymentAllocationItems$.outboundSchema))
                .optional(),
            salesOrderRefs: z.nullable(z.array(SalesOrderRef$.outboundSchema)).optional(),
            sourceModifiedDate: z.string().optional(),
            status: InvoiceStatus$,
            subTotal: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            totalDiscount: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            totalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            withholdingTax: z.nullable(z.array(WithholdingTaxItems$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.additionalTaxAmount === undefined
                    ? null
                    : { additionalTaxAmount: v.additionalTaxAmount }),
                ...(v.additionalTaxPercentage === undefined
                    ? null
                    : { additionalTaxPercentage: v.additionalTaxPercentage }),
                amountDue: v.amountDue,
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.discountPercentage === undefined
                    ? null
                    : { discountPercentage: v.discountPercentage }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceNumber === undefined ? null : { invoiceNumber: v.invoiceNumber }),
                issueDate: v.issueDate,
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paidOnDate === undefined ? null : { paidOnDate: v.paidOnDate }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.salesOrderRefs === undefined ? null : { salesOrderRefs: v.salesOrderRefs }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                status: v.status,
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                totalAmount: v.totalAmount,
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                totalTaxAmount: v.totalTaxAmount,
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
            };
        });
}

/** @internal */
export namespace CreateInvoiceResponse$ {
    export type Inbound = {
        changes?: Array<PushOperationChange$.Inbound> | null | undefined;
        companyId: string;
        completedOnUtc?: string | undefined;
        data?: AccountingInvoice$.Inbound | null | undefined;
        dataConnectionKey: string;
        dataType?: DataType | undefined;
        errorMessage?: string | null | undefined;
        pushOperationKey: string;
        requestedOnUtc: string;
        status: PushOperationStatus;
        statusCode: number;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        validation?: Validation$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateInvoiceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            changes: z.nullable(z.array(PushOperationChange$.inboundSchema)).optional(),
            companyId: z.string(),
            completedOnUtc: z.string().optional(),
            data: z.nullable(z.lazy(() => AccountingInvoice$.inboundSchema)).optional(),
            dataConnectionKey: z.string(),
            dataType: DataType$.optional(),
            errorMessage: z.nullable(z.string()).optional(),
            pushOperationKey: z.string(),
            requestedOnUtc: z.string(),
            status: PushOperationStatus$,
            statusCode: z.number().int(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            validation: Validation$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
                companyId: v.companyId,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.data === undefined ? null : { data: v.data }),
                dataConnectionKey: v.dataConnectionKey,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                pushOperationKey: v.pushOperationKey,
                requestedOnUtc: v.requestedOnUtc,
                status: v.status,
                statusCode: v.statusCode,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });

    export type Outbound = {
        changes?: Array<PushOperationChange$.Outbound> | null | undefined;
        companyId: string;
        completedOnUtc?: string | undefined;
        data?: AccountingInvoice$.Outbound | null | undefined;
        dataConnectionKey: string;
        dataType?: DataType | undefined;
        errorMessage?: string | null | undefined;
        pushOperationKey: string;
        requestedOnUtc: string;
        status: PushOperationStatus;
        statusCode: number;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        validation?: Validation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateInvoiceResponse> = z
        .object({
            changes: z.nullable(z.array(PushOperationChange$.outboundSchema)).optional(),
            companyId: z.string(),
            completedOnUtc: z.string().optional(),
            data: z.nullable(z.lazy(() => AccountingInvoice$.outboundSchema)).optional(),
            dataConnectionKey: z.string(),
            dataType: DataType$.optional(),
            errorMessage: z.nullable(z.string()).optional(),
            pushOperationKey: z.string(),
            requestedOnUtc: z.string(),
            status: PushOperationStatus$,
            statusCode: z.number().int(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            validation: Validation$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
                companyId: v.companyId,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.data === undefined ? null : { data: v.data }),
                dataConnectionKey: v.dataConnectionKey,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                pushOperationKey: v.pushOperationKey,
                requestedOnUtc: v.requestedOnUtc,
                status: v.status,
                statusCode: v.statusCode,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });
}
