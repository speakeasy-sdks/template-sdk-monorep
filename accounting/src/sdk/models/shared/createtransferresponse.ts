/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContactRef, ContactRef$ } from "./contactref";
import { DataType, DataType$ } from "./datatype";
import { InvoiceTo, InvoiceTo$ } from "./invoiceto";
import { Metadata, Metadata$ } from "./metadata";
import { PushOperationChange, PushOperationChange$ } from "./pushoperationchange";
import { PushOperationStatus, PushOperationStatus$ } from "./pushoperationstatus";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { TrackingCategoryRef, TrackingCategoryRef$ } from "./trackingcategoryref";
import { TransferAccount, TransferAccount$ } from "./transferaccount";
import { Validation, Validation$ } from "./validation";
import * as z from "zod";

/**
 * > View the coverage for transfers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=transfers" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * A transfer records the movement of money between two bank accounts, or between a bank account and a nominal account. It is a child data type of [account transactions](https://docs.codat.io/accounting-api#/schemas/AccountTransaction).
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingTransfer = {
    /**
     * A customer or supplier associated with the direct cost.
     */
    contactRef?: ContactRef | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    date?: string | undefined;
    /**
     * List of selected transactions to associate with the transfer. Use this field to include transactions which are posted to the _undeposited funds_ (or other holding) account within the transfer.
     */
    depositedRecordRefs?: Array<InvoiceTo> | null | undefined;
    /**
     * Description of the transfer.
     */
    description?: string | null | undefined;
    /**
     * Account details of the account sending or receiving the transfer.
     */
    from?: TransferAccount | undefined;
    /**
     * Unique identifier for the transfer.
     */
    id?: string | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
    /**
     * Account details of the account sending or receiving the transfer.
     */
    to?: TransferAccount | undefined;
    /**
     * Reference to the tracking categories this transfer is being tracked against.
     */
    trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
};

export type CreateTransferResponse = {
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    data?: AccountingTransfer | null | undefined;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * Push status code.
     */
    statusCode: number;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
};

/** @internal */
export namespace AccountingTransfer$ {
    export type Inbound = {
        contactRef?: ContactRef$.Inbound | undefined;
        date?: string | undefined;
        depositedRecordRefs?: Array<InvoiceTo$.Inbound> | null | undefined;
        description?: string | null | undefined;
        from?: TransferAccount$.Inbound | undefined;
        id?: string | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
        to?: TransferAccount$.Inbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingTransfer, z.ZodTypeDef, Inbound> = z
        .object({
            contactRef: ContactRef$.inboundSchema.optional(),
            date: z.string().optional(),
            depositedRecordRefs: z.nullable(z.array(InvoiceTo$.inboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            from: TransferAccount$.inboundSchema.optional(),
            id: z.string().optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
            to: TransferAccount$.inboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.depositedRecordRefs === undefined
                    ? null
                    : { depositedRecordRefs: v.depositedRecordRefs }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
            };
        });

    export type Outbound = {
        contactRef?: ContactRef$.Outbound | undefined;
        date?: string | undefined;
        depositedRecordRefs?: Array<InvoiceTo$.Outbound> | null | undefined;
        description?: string | null | undefined;
        from?: TransferAccount$.Outbound | undefined;
        id?: string | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
        to?: TransferAccount$.Outbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingTransfer> = z
        .object({
            contactRef: ContactRef$.outboundSchema.optional(),
            date: z.string().optional(),
            depositedRecordRefs: z.nullable(z.array(InvoiceTo$.outboundSchema)).optional(),
            description: z.nullable(z.string()).optional(),
            from: TransferAccount$.outboundSchema.optional(),
            id: z.string().optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
            to: TransferAccount$.outboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.depositedRecordRefs === undefined
                    ? null
                    : { depositedRecordRefs: v.depositedRecordRefs }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
            };
        });
}

/** @internal */
export namespace CreateTransferResponse$ {
    export type Inbound = {
        changes?: Array<PushOperationChange$.Inbound> | null | undefined;
        companyId: string;
        completedOnUtc?: string | undefined;
        data?: AccountingTransfer$.Inbound | null | undefined;
        dataConnectionKey: string;
        dataType?: DataType | undefined;
        errorMessage?: string | null | undefined;
        pushOperationKey: string;
        requestedOnUtc: string;
        status: PushOperationStatus;
        statusCode: number;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        validation?: Validation$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTransferResponse, z.ZodTypeDef, Inbound> = z
        .object({
            changes: z.nullable(z.array(PushOperationChange$.inboundSchema)).optional(),
            companyId: z.string(),
            completedOnUtc: z.string().optional(),
            data: z.nullable(z.lazy(() => AccountingTransfer$.inboundSchema)).optional(),
            dataConnectionKey: z.string(),
            dataType: DataType$.optional(),
            errorMessage: z.nullable(z.string()).optional(),
            pushOperationKey: z.string(),
            requestedOnUtc: z.string(),
            status: PushOperationStatus$,
            statusCode: z.number().int(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            validation: Validation$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
                companyId: v.companyId,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.data === undefined ? null : { data: v.data }),
                dataConnectionKey: v.dataConnectionKey,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                pushOperationKey: v.pushOperationKey,
                requestedOnUtc: v.requestedOnUtc,
                status: v.status,
                statusCode: v.statusCode,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });

    export type Outbound = {
        changes?: Array<PushOperationChange$.Outbound> | null | undefined;
        companyId: string;
        completedOnUtc?: string | undefined;
        data?: AccountingTransfer$.Outbound | null | undefined;
        dataConnectionKey: string;
        dataType?: DataType | undefined;
        errorMessage?: string | null | undefined;
        pushOperationKey: string;
        requestedOnUtc: string;
        status: PushOperationStatus;
        statusCode: number;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        validation?: Validation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransferResponse> = z
        .object({
            changes: z.nullable(z.array(PushOperationChange$.outboundSchema)).optional(),
            companyId: z.string(),
            completedOnUtc: z.string().optional(),
            data: z.nullable(z.lazy(() => AccountingTransfer$.outboundSchema)).optional(),
            dataConnectionKey: z.string(),
            dataType: DataType$.optional(),
            errorMessage: z.nullable(z.string()).optional(),
            pushOperationKey: z.string(),
            requestedOnUtc: z.string(),
            status: PushOperationStatus$,
            statusCode: z.number().int(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            validation: Validation$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.changes === undefined ? null : { changes: v.changes }),
                companyId: v.companyId,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.data === undefined ? null : { data: v.data }),
                dataConnectionKey: v.dataConnectionKey,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                pushOperationKey: v.pushOperationKey,
                requestedOnUtc: v.requestedOnUtc,
                status: v.status,
                statusCode: v.statusCode,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
            };
        });
}
