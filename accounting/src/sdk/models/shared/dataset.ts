/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DatasetStatus, DatasetStatus$ } from "./datasetstatus";
import { DataType, DataType$ } from "./datatype";
import * as z from "zod";

export type Dataset = {
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completed?: string | undefined;
    /**
     * Unique identifier for a company's data connection.
     */
    connectionId: string;
    /**
     * Available data types
     */
    dataType?: DataType | undefined;
    /**
     * URI to the dataset's logs.
     */
    datasetLogsUrl?: string | null | undefined;
    /**
     * A brief message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * Identifier for the dataset.
     */
    id: string;
    /**
     * `True` if the dataset completed successfully.
     */
    isCompleted: boolean;
    /**
     * `True` if the dataset entered an error state.
     */
    isErrored: boolean;
    /**
     * An integer signifying the progress of the dataset.
     */
    progress: number;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requested: string;
    /**
     * The current status of the dataset.
     */
    status: DatasetStatus;
    /**
     * URI to the dataset's validation information.
     */
    validationInformationUrl?: string | null | undefined;
};

/** @internal */
export namespace Dataset$ {
    export type Inbound = {
        companyId: string;
        completed?: string | undefined;
        connectionId: string;
        dataType?: DataType | undefined;
        datasetLogsUrl?: string | null | undefined;
        errorMessage?: string | null | undefined;
        id: string;
        isCompleted: boolean;
        isErrored: boolean;
        progress: number;
        requested: string;
        status: DatasetStatus;
        validationInformationUrl?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Dataset, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            completed: z.string().optional(),
            connectionId: z.string(),
            dataType: DataType$.optional(),
            datasetLogsUrl: z.nullable(z.string()).optional(),
            errorMessage: z.nullable(z.string()).optional(),
            id: z.string(),
            isCompleted: z.boolean(),
            isErrored: z.boolean(),
            progress: z.number().int(),
            requested: z.string(),
            status: DatasetStatus$,
            validationInformationUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.completed === undefined ? null : { completed: v.completed }),
                connectionId: v.connectionId,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.datasetLogsUrl === undefined ? null : { datasetLogsUrl: v.datasetLogsUrl }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                id: v.id,
                isCompleted: v.isCompleted,
                isErrored: v.isErrored,
                progress: v.progress,
                requested: v.requested,
                status: v.status,
                ...(v.validationInformationUrl === undefined
                    ? null
                    : { validationInformationUrl: v.validationInformationUrl }),
            };
        });

    export type Outbound = {
        companyId: string;
        completed?: string | undefined;
        connectionId: string;
        dataType?: DataType | undefined;
        datasetLogsUrl?: string | null | undefined;
        errorMessage?: string | null | undefined;
        id: string;
        isCompleted: boolean;
        isErrored: boolean;
        progress: number;
        requested: string;
        status: DatasetStatus;
        validationInformationUrl?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Dataset> = z
        .object({
            companyId: z.string(),
            completed: z.string().optional(),
            connectionId: z.string(),
            dataType: DataType$.optional(),
            datasetLogsUrl: z.nullable(z.string()).optional(),
            errorMessage: z.nullable(z.string()).optional(),
            id: z.string(),
            isCompleted: z.boolean(),
            isErrored: z.boolean(),
            progress: z.number().int(),
            requested: z.string(),
            status: DatasetStatus$,
            validationInformationUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.completed === undefined ? null : { completed: v.completed }),
                connectionId: v.connectionId,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.datasetLogsUrl === undefined ? null : { datasetLogsUrl: v.datasetLogsUrl }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                id: v.id,
                isCompleted: v.isCompleted,
                isErrored: v.isErrored,
                progress: v.progress,
                requested: v.requested,
                status: v.status,
                ...(v.validationInformationUrl === undefined
                    ? null
                    : { validationInformationUrl: v.validationInformationUrl }),
            };
        });
}
