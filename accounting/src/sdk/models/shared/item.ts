/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BillItem, BillItem$ } from "./billitem";
import { InvoiceItem, InvoiceItem$ } from "./invoiceitem";
import { ItemStatus, ItemStatus$ } from "./itemstatus";
import { ItemType, ItemType$ } from "./itemtype";
import { Metadata, Metadata$ } from "./metadata";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import * as z from "zod";

/**
 * > View the coverage for items in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=items" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * **Items** allow your customers to save and track details of the products and services that they buy and sell.
 *
 */
export type Item = {
    /**
     * Item details that are only for bills.
     */
    billItem?: BillItem | undefined;
    /**
     * Friendly reference for the item.
     */
    code?: string | null | undefined;
    /**
     * Identifier for the item that is unique to a company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Item details that are only for bills.
     */
    invoiceItem?: InvoiceItem | undefined;
    /**
     * Whether you can use this item for bills.
     */
    isBillItem: boolean;
    /**
     * Whether you can use this item for invoices.
     */
    isInvoiceItem: boolean;
    /**
     * Current state of the item, either:
     *
     * @remarks
     *
     * - `Active`: Available for use
     * - `Archived`: Unavailable
     * - `Unknown`
     *
     * Due to a [limitation in Xero's API](https://docs.codat.io/integrations/accounting/xero/xero-faq#why-do-all-of-my-items-from-xero-have-their-status-as-unknown), all items from Xero are mapped as `Unknown`.
     */
    itemStatus: ItemStatus;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * Name of the item in the accounting platform.
     */
    name?: string | null | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
    /**
     * Type of the item.
     */
    type: ItemType;
};

/** @internal */
export namespace Item$ {
    export type Inbound = {
        billItem?: BillItem$.Inbound | undefined;
        code?: string | null | undefined;
        id?: string | undefined;
        invoiceItem?: InvoiceItem$.Inbound | undefined;
        isBillItem: boolean;
        isInvoiceItem: boolean;
        itemStatus: ItemStatus;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        name?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
        type: ItemType;
    };

    export const inboundSchema: z.ZodType<Item, z.ZodTypeDef, Inbound> = z
        .object({
            billItem: BillItem$.inboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            invoiceItem: InvoiceItem$.inboundSchema.optional(),
            isBillItem: z.boolean(),
            isInvoiceItem: z.boolean(),
            itemStatus: ItemStatus$,
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
            type: ItemType$,
        })
        .transform((v) => {
            return {
                ...(v.billItem === undefined ? null : { billItem: v.billItem }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceItem === undefined ? null : { invoiceItem: v.invoiceItem }),
                isBillItem: v.isBillItem,
                isInvoiceItem: v.isInvoiceItem,
                itemStatus: v.itemStatus,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                type: v.type,
            };
        });

    export type Outbound = {
        billItem?: BillItem$.Outbound | undefined;
        code?: string | null | undefined;
        id?: string | undefined;
        invoiceItem?: InvoiceItem$.Outbound | undefined;
        isBillItem: boolean;
        isInvoiceItem: boolean;
        itemStatus: ItemStatus;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        name?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
        type: ItemType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Item> = z
        .object({
            billItem: BillItem$.outboundSchema.optional(),
            code: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            invoiceItem: InvoiceItem$.outboundSchema.optional(),
            isBillItem: z.boolean(),
            isInvoiceItem: z.boolean(),
            itemStatus: ItemStatus$,
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            name: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
            type: ItemType$,
        })
        .transform((v) => {
            return {
                ...(v.billItem === undefined ? null : { billItem: v.billItem }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceItem === undefined ? null : { invoiceItem: v.invoiceItem }),
                isBillItem: v.isBillItem,
                isInvoiceItem: v.isInvoiceItem,
                itemStatus: v.itemStatus,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                type: v.type,
            };
        });
}
