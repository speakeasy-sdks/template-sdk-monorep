/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { ItemReceiptLineItem, ItemReceiptLineItem$ } from "./itemreceiptlineitem";
import { ItemReceiptStatus, ItemReceiptStatus$ } from "./itemreceiptstatus";
import { Metadata, Metadata$ } from "./metadata";
import { PurchaseOrderRef, PurchaseOrderRef$ } from "./purchaseorderref";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { SupplierRef, SupplierRef$ } from "./supplierref";
import * as z from "zod";

/**
 * An item receipt records the receipt of items into a SMBs inventory. It links to a [purchase order](https://docs.codat.io/codat-api#/schemas/AccountingPurchaseOrder) and acts as an acknowledgement of items received.
 *
 * @remarks
 *
 * > **Language tip:** Item receipts may also be referred to as **Purchase receipt**, or **PO receiver inventory** in various accounting platforms.
 *
 * ADD SOMETHING ABOUT USAGE. E.g. a use case. or an example situation of where it can be used.
 */
export type ItemReceipt = {
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * Identifier for the item receipt, unique for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Array of Item Receipt line items.
     */
    lineItems?: Array<ItemReceiptLineItem> | null | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * Any private, company notes about the item receipt, such as payment information.
     */
    note?: string | null | undefined;
    purchaseOrderRefs?: Array<PurchaseOrderRef> | null | undefined;
    receivedDate?: string | undefined;
    /**
     * User-friendly reference for the item receipt.
     */
    reference?: string | null | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Current status of the item receipt.
     */
    status?: ItemReceiptStatus | undefined;
    /**
     * Total amount of the item receipt, excluding any taxes.
     */
    subTotal?: Decimal$ | number | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
    /**
     * Reference to the supplier the record relates to.
     */
    supplierRef?: SupplierRef | undefined;
    /**
     * Amount of the item receipt, including tax.
     */
    totalAmount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace ItemReceipt$ {
    export type Inbound = {
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        id?: string | undefined;
        lineItems?: Array<ItemReceiptLineItem$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        purchaseOrderRefs?: Array<PurchaseOrderRef$.Inbound> | null | undefined;
        receivedDate?: string | undefined;
        reference?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        status?: ItemReceiptStatus | undefined;
        subTotal?: number | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
        supplierRef?: SupplierRef$.Inbound | undefined;
        totalAmount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ItemReceipt, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            id: z.string().optional(),
            lineItems: z.nullable(z.array(ItemReceiptLineItem$.inboundSchema)).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            purchaseOrderRefs: z.nullable(z.array(PurchaseOrderRef$.inboundSchema)).optional(),
            receivedDate: z.string().optional(),
            reference: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            status: ItemReceiptStatus$.optional(),
            subTotal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
            supplierRef: SupplierRef$.inboundSchema.optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.purchaseOrderRefs === undefined
                    ? null
                    : { purchaseOrderRefs: v.purchaseOrderRefs }),
                ...(v.receivedDate === undefined ? null : { receivedDate: v.receivedDate }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });

    export type Outbound = {
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        id?: string | undefined;
        lineItems?: Array<ItemReceiptLineItem$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        purchaseOrderRefs?: Array<PurchaseOrderRef$.Outbound> | null | undefined;
        receivedDate?: string | undefined;
        reference?: string | null | undefined;
        sourceModifiedDate?: string | undefined;
        status?: ItemReceiptStatus | undefined;
        subTotal?: number | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
        supplierRef?: SupplierRef$.Outbound | undefined;
        totalAmount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ItemReceipt> = z
        .object({
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            id: z.string().optional(),
            lineItems: z.nullable(z.array(ItemReceiptLineItem$.outboundSchema)).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            purchaseOrderRefs: z.nullable(z.array(PurchaseOrderRef$.outboundSchema)).optional(),
            receivedDate: z.string().optional(),
            reference: z.nullable(z.string()).optional(),
            sourceModifiedDate: z.string().optional(),
            status: ItemReceiptStatus$.optional(),
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
            supplierRef: SupplierRef$.outboundSchema.optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.purchaseOrderRefs === undefined
                    ? null
                    : { purchaseOrderRefs: v.purchaseOrderRefs }),
                ...(v.receivedDate === undefined ? null : { receivedDate: v.receivedDate }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });
}
