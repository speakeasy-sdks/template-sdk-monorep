/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { PaymentAllocationPayment, PaymentAllocationPayment$ } from "./paymentallocationpayment";
import * as z from "zod";

export type Allocation = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    allocatedOnDate?: string | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * The total amount that has been allocated.
     */
    totalAmount?: Decimal$ | number | undefined;
};

export type PaymentAllocationItems = {
    allocation: Allocation;
    payment: PaymentAllocationPayment;
};

/** @internal */
export namespace Allocation$ {
    export type Inbound = {
        allocatedOnDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        totalAmount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Allocation, z.ZodTypeDef, Inbound> = z
        .object({
            allocatedOnDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.allocatedOnDate === undefined
                    ? null
                    : { allocatedOnDate: v.allocatedOnDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });

    export type Outbound = {
        allocatedOnDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        totalAmount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Allocation> = z
        .object({
            allocatedOnDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.allocatedOnDate === undefined
                    ? null
                    : { allocatedOnDate: v.allocatedOnDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });
}

/** @internal */
export namespace PaymentAllocationItems$ {
    export type Inbound = {
        allocation: Allocation$.Inbound;
        payment: PaymentAllocationPayment$.Inbound;
    };

    export const inboundSchema: z.ZodType<PaymentAllocationItems, z.ZodTypeDef, Inbound> = z
        .object({
            allocation: z.lazy(() => Allocation$.inboundSchema),
            payment: PaymentAllocationPayment$.inboundSchema,
        })
        .transform((v) => {
            return {
                allocation: v.allocation,
                payment: v.payment,
            };
        });

    export type Outbound = {
        allocation: Allocation$.Outbound;
        payment: PaymentAllocationPayment$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAllocationItems> = z
        .object({
            allocation: z.lazy(() => Allocation$.outboundSchema),
            payment: PaymentAllocationPayment$.outboundSchema,
        })
        .transform((v) => {
            return {
                allocation: v.allocation,
                payment: v.payment,
            };
        });
}
