/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PhoneNumberType, PhoneNumberType$ } from "./phonenumbertype";
import * as z from "zod";

export type PhoneNumberItems = {
    /**
     * A phone number.
     */
    number?: string | null | undefined;
    /**
     * The type of phone number
     */
    type: PhoneNumberType;
};

/** @internal */
export namespace PhoneNumberItems$ {
    export type Inbound = {
        number?: string | null | undefined;
        type: PhoneNumberType;
    };

    export const inboundSchema: z.ZodType<PhoneNumberItems, z.ZodTypeDef, Inbound> = z
        .object({
            number: z.nullable(z.string()).optional(),
            type: PhoneNumberType$,
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                type: v.type,
            };
        });

    export type Outbound = {
        number?: string | null | undefined;
        type: PhoneNumberType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PhoneNumberItems> = z
        .object({
            number: z.nullable(z.string()).optional(),
            type: PhoneNumberType$,
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                type: v.type,
            };
        });
}
