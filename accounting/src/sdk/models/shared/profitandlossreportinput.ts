/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProfitAndLossReport, ProfitAndLossReport$ } from "./profitandlossreport";
import { ReportBasis, ReportBasis$ } from "./reportbasis";
import * as z from "zod";

/**
 * > **Language tip:** Profit and loss statement is also referred to as **income statement** under US GAAP (Generally Accepted Accounting Principles).
 *
 * @remarks
 *
 * > View the coverage for profit and loss in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=profitAndLoss" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * The purpose of a profit and loss report is to present the financial performance of a company over a specified time period.
 *
 * A profit and loss report shows a company's total income and expenses for a specified period of time and whether a profit or loss has been made.
 *
 * > **Profit and loss or balance sheet?**
 * > Profit and loss reports summarise the total revenue, expenses, and profit or loss over a specified time period. A balance sheet report presents all assets, liability, and equity for a given date.
 *
 *
 * **Structure of this report**
 * This report will reflect the structure and line descriptions that the business has set in their own accounting platform.
 *
 * **History**
 * By default, Codat pulls (up to) 24 months of profit and loss history for a company. You can adjust this to fetch more history, where available, by updating the `monthsToSync` value for `profitAndLoss` on the [data type settings endpoint](https://docs.codat.io/codat-api#/operations/post-profile-syncSettings).
 *
 * **Want to pull this in a standardised structure?**
 * Our [Enhanced Financials](https://docs.codat.io/assess/reports/enhanced-financials/financials) endpoints provide the same report under standardized headings, allowing you to pull it in the same format for all of your business customers.
 */
export type ProfitAndLossReportInput = {
    /**
     * Base currency of the company in which the profit and loss report is presented.
     */
    currency: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    earliestAvailableMonth?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    mostRecentAvailableMonth?: string | undefined;
    /**
     * The basis of a report.
     */
    reportBasis: ReportBasis;
    /**
     * An array of profit and loss reports.
     */
    reports: Array<ProfitAndLossReport>;
};

/** @internal */
export namespace ProfitAndLossReportInput$ {
    export type Inbound = {
        currency: string;
        earliestAvailableMonth?: string | undefined;
        mostRecentAvailableMonth?: string | undefined;
        reportBasis: ReportBasis;
        reports: Array<ProfitAndLossReport$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ProfitAndLossReportInput, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string(),
            earliestAvailableMonth: z.string().optional(),
            mostRecentAvailableMonth: z.string().optional(),
            reportBasis: ReportBasis$,
            reports: z.array(ProfitAndLossReport$.inboundSchema),
        })
        .transform((v) => {
            return {
                currency: v.currency,
                ...(v.earliestAvailableMonth === undefined
                    ? null
                    : { earliestAvailableMonth: v.earliestAvailableMonth }),
                ...(v.mostRecentAvailableMonth === undefined
                    ? null
                    : { mostRecentAvailableMonth: v.mostRecentAvailableMonth }),
                reportBasis: v.reportBasis,
                reports: v.reports,
            };
        });

    export type Outbound = {
        currency: string;
        earliestAvailableMonth?: string | undefined;
        mostRecentAvailableMonth?: string | undefined;
        reportBasis: ReportBasis;
        reports: Array<ProfitAndLossReport$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProfitAndLossReportInput> = z
        .object({
            currency: z.string(),
            earliestAvailableMonth: z.string().optional(),
            mostRecentAvailableMonth: z.string().optional(),
            reportBasis: ReportBasis$,
            reports: z.array(ProfitAndLossReport$.outboundSchema),
        })
        .transform((v) => {
            return {
                currency: v.currency,
                ...(v.earliestAvailableMonth === undefined
                    ? null
                    : { earliestAvailableMonth: v.earliestAvailableMonth }),
                ...(v.mostRecentAvailableMonth === undefined
                    ? null
                    : { mostRecentAvailableMonth: v.mostRecentAvailableMonth }),
                reportBasis: v.reportBasis,
                reports: v.reports,
            };
        });
}
