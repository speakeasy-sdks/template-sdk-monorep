/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountingCustomerRef, AccountingCustomerRef$ } from "./accountingcustomerref";
import { BilledToType1, BilledToType1$ } from "./billedtotype1";
import { InvoiceTo, InvoiceTo$ } from "./invoiceto";
import { ProjectRef, ProjectRef$ } from "./projectref";
import { TrackingCategoryRef, TrackingCategoryRef$ } from "./trackingcategoryref";
import * as z from "zod";

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type PropertieTracking1 = {
    categoryRefs: Array<TrackingCategoryRef>;
    customerRef?: AccountingCustomerRef | undefined;
    /**
     * Defines if the bill or bill credit note is billed/rebilled to a project.
     */
    isBilledTo: BilledToType1;
    /**
     * Defines if the bill or bill credit note is billed/rebilled to a project.
     */
    isRebilledTo: BilledToType1;
    projectRef?: ProjectRef | undefined;
    /**
     * Links the current record to the underlying record or data type that created it.
     *
     * @remarks
     *
     * For example, if a journal entry is generated based on an invoice, this property allows you to connect the journal entry to the underlying invoice in our data model.
     */
    recordRef?: InvoiceTo | undefined;
};

/** @internal */
export namespace PropertieTracking1$ {
    export type Inbound = {
        categoryRefs: Array<TrackingCategoryRef$.Inbound>;
        customerRef?: AccountingCustomerRef$.Inbound | undefined;
        isBilledTo: BilledToType1;
        isRebilledTo: BilledToType1;
        projectRef?: ProjectRef$.Inbound | undefined;
        recordRef?: InvoiceTo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PropertieTracking1, z.ZodTypeDef, Inbound> = z
        .object({
            categoryRefs: z.array(TrackingCategoryRef$.inboundSchema),
            customerRef: AccountingCustomerRef$.inboundSchema.optional(),
            isBilledTo: BilledToType1$,
            isRebilledTo: BilledToType1$,
            projectRef: ProjectRef$.inboundSchema.optional(),
            recordRef: InvoiceTo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                categoryRefs: v.categoryRefs,
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                isBilledTo: v.isBilledTo,
                isRebilledTo: v.isRebilledTo,
                ...(v.projectRef === undefined ? null : { projectRef: v.projectRef }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
            };
        });

    export type Outbound = {
        categoryRefs: Array<TrackingCategoryRef$.Outbound>;
        customerRef?: AccountingCustomerRef$.Outbound | undefined;
        isBilledTo: BilledToType1;
        isRebilledTo: BilledToType1;
        projectRef?: ProjectRef$.Outbound | undefined;
        recordRef?: InvoiceTo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PropertieTracking1> = z
        .object({
            categoryRefs: z.array(TrackingCategoryRef$.outboundSchema),
            customerRef: AccountingCustomerRef$.outboundSchema.optional(),
            isBilledTo: BilledToType1$,
            isRebilledTo: BilledToType1$,
            projectRef: ProjectRef$.outboundSchema.optional(),
            recordRef: InvoiceTo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                categoryRefs: v.categoryRefs,
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                isBilledTo: v.isBilledTo,
                isRebilledTo: v.isRebilledTo,
                ...(v.projectRef === undefined ? null : { projectRef: v.projectRef }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
            };
        });
}
