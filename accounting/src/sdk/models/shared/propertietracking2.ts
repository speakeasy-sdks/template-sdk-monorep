/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TrackingRecordRef, TrackingRecordRef$ } from "./trackingrecordref";
import * as z from "zod";

export type PropertieTracking2 = {
    recordRefs?: Array<TrackingRecordRef> | null | undefined;
};

/** @internal */
export namespace PropertieTracking2$ {
    export type Inbound = {
        recordRefs?: Array<TrackingRecordRef$.Inbound> | null | undefined;
    };

    export const inboundSchema: z.ZodType<PropertieTracking2, z.ZodTypeDef, Inbound> = z
        .object({
            recordRefs: z.nullable(z.array(TrackingRecordRef$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.recordRefs === undefined ? null : { recordRefs: v.recordRefs }),
            };
        });

    export type Outbound = {
        recordRefs?: Array<TrackingRecordRef$.Outbound> | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PropertieTracking2> = z
        .object({
            recordRefs: z.nullable(z.array(TrackingRecordRef$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.recordRefs === undefined ? null : { recordRefs: v.recordRefs }),
            };
        });
}
