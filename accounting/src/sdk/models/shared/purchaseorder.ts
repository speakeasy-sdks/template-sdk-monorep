/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { Metadata, Metadata$ } from "./metadata";
import { PurchaseOrderLineItem, PurchaseOrderLineItem$ } from "./purchaseorderlineitem";
import { PurchaseOrderStatus, PurchaseOrderStatus$ } from "./purchaseorderstatus";
import { ShipTo, ShipTo$ } from "./shipto";
import { SupplierRef, SupplierRef$ } from "./supplierref";
import * as z from "zod";

/**
 * The user who created the purchase order in the accounting system
 */
export type User = {
    /**
     * Email address of the user.
     */
    email?: string | null | undefined;
    /**
     * First name of the user.
     */
    firstName?: string | null | undefined;
    /**
     * Last name of the user.
     */
    lastName?: string | null | undefined;
};

/**
 * > View the coverage for purchase orders in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=purchaseOrders" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * Purchase orders represent a business's intent to purchase goods or services from a supplier and normally include information such as expected delivery dates and shipping details.
 *
 * This information can be used to provide visibility on a business's expected payables and to track a purchase through the full procurement process.
 */
export type PurchaseOrder = {
    /**
     * The user who created the purchase order in the accounting system
     */
    createdBy?: User | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    deliveryDate?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    expectedDeliveryDate?: string | undefined;
    /**
     * Identifier for the purchase order, unique for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    issueDate?: string | undefined;
    /**
     * Array of line items.
     */
    lineItems?: Array<PurchaseOrderLineItem> | null | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * Any additional information associated with the purchase order.
     */
    note?: string | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    paymentDueDate?: string | undefined;
    /**
     * Friendly reference for the purchase order, commonly generated by the accounting platform.
     */
    purchaseOrderNumber?: string | null | undefined;
    /**
     * Delivery details for any goods that have been ordered.
     */
    shipTo?: ShipTo | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Current state of the purchase order
     */
    status?: PurchaseOrderStatus | undefined;
    /**
     * Total amount of the purchase order, including discounts but excluding tax.
     */
    subTotal?: Decimal$ | number | undefined;
    /**
     * Reference to the supplier the record relates to.
     */
    supplierRef?: SupplierRef | undefined;
    /**
     * Total amount of the purchase order, including discounts and tax.
     */
    totalAmount?: Decimal$ | number | undefined;
    /**
     * Total value of any discounts applied to the purchase order.
     */
    totalDiscount?: Decimal$ | number | undefined;
    /**
     *
     *
     * @remarks
     * Total amount of tax included in the purchase order.
     */
    totalTaxAmount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace User$ {
    export type Inbound = {
        email?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.nullable(z.string()).optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
            };
        });

    export type Outbound = {
        email?: string | null | undefined;
        firstName?: string | null | undefined;
        lastName?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            email: z.nullable(z.string()).optional(),
            firstName: z.nullable(z.string()).optional(),
            lastName: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
            };
        });
}

/** @internal */
export namespace PurchaseOrder$ {
    export type Inbound = {
        createdBy?: User$.Inbound | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        deliveryDate?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        id?: string | undefined;
        issueDate?: string | undefined;
        lineItems?: Array<PurchaseOrderLineItem$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        paymentDueDate?: string | undefined;
        purchaseOrderNumber?: string | null | undefined;
        shipTo?: ShipTo$.Inbound | undefined;
        sourceModifiedDate?: string | undefined;
        status?: PurchaseOrderStatus | undefined;
        subTotal?: number | undefined;
        supplierRef?: SupplierRef$.Inbound | undefined;
        totalAmount?: number | undefined;
        totalDiscount?: number | undefined;
        totalTaxAmount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PurchaseOrder, z.ZodTypeDef, Inbound> = z
        .object({
            createdBy: z.lazy(() => User$.inboundSchema).optional(),
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            deliveryDate: z.string().optional(),
            expectedDeliveryDate: z.string().optional(),
            id: z.string().optional(),
            issueDate: z.string().optional(),
            lineItems: z.nullable(z.array(PurchaseOrderLineItem$.inboundSchema)).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            paymentDueDate: z.string().optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
            shipTo: ShipTo$.inboundSchema.optional(),
            sourceModifiedDate: z.string().optional(),
            status: PurchaseOrderStatus$.optional(),
            subTotal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            supplierRef: SupplierRef$.inboundSchema.optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalDiscount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalTaxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.deliveryDate === undefined ? null : { deliveryDate: v.deliveryDate }),
                ...(v.expectedDeliveryDate === undefined
                    ? null
                    : { expectedDeliveryDate: v.expectedDeliveryDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paymentDueDate === undefined ? null : { paymentDueDate: v.paymentDueDate }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
                ...(v.shipTo === undefined ? null : { shipTo: v.shipTo }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
            };
        });

    export type Outbound = {
        createdBy?: User$.Outbound | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        deliveryDate?: string | undefined;
        expectedDeliveryDate?: string | undefined;
        id?: string | undefined;
        issueDate?: string | undefined;
        lineItems?: Array<PurchaseOrderLineItem$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        paymentDueDate?: string | undefined;
        purchaseOrderNumber?: string | null | undefined;
        shipTo?: ShipTo$.Outbound | undefined;
        sourceModifiedDate?: string | undefined;
        status?: PurchaseOrderStatus | undefined;
        subTotal?: number | undefined;
        supplierRef?: SupplierRef$.Outbound | undefined;
        totalAmount?: number | undefined;
        totalDiscount?: number | undefined;
        totalTaxAmount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseOrder> = z
        .object({
            createdBy: z.lazy(() => User$.outboundSchema).optional(),
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            deliveryDate: z.string().optional(),
            expectedDeliveryDate: z.string().optional(),
            id: z.string().optional(),
            issueDate: z.string().optional(),
            lineItems: z.nullable(z.array(PurchaseOrderLineItem$.outboundSchema)).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            paymentDueDate: z.string().optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
            shipTo: ShipTo$.outboundSchema.optional(),
            sourceModifiedDate: z.string().optional(),
            status: PurchaseOrderStatus$.optional(),
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            supplierRef: SupplierRef$.outboundSchema.optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalDiscount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.deliveryDate === undefined ? null : { deliveryDate: v.deliveryDate }),
                ...(v.expectedDeliveryDate === undefined
                    ? null
                    : { expectedDeliveryDate: v.expectedDeliveryDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paymentDueDate === undefined ? null : { paymentDueDate: v.paymentDueDate }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
                ...(v.shipTo === undefined ? null : { shipTo: v.shipTo }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
            };
        });
}
