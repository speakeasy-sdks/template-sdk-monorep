/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type ReportLine = {
    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    accountId?: string | null | undefined;
    /**
     * An array of ReportLine items.
     */
    items?: Array<ReportLine> | null | undefined;
    /**
     * Name of the report line item.
     */
    name?: string | null | undefined;
    /**
     * Numerical value of the line item.
     */
    value: Decimal$ | number;
};

/** @internal */
export namespace ReportLine$ {
    export type Inbound = {
        accountId?: string | null | undefined;
        items?: Array<ReportLine$.Inbound> | null | undefined;
        name?: string | null | undefined;
        value: number;
    };

    export const inboundSchema: z.ZodType<ReportLine, z.ZodTypeDef, Inbound> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            items: z.nullable(z.array(z.lazy(() => ReportLine$.inboundSchema))).optional(),
            name: z.nullable(z.string()).optional(),
            value: z.number().transform((v) => new Decimal$(v)),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.name === undefined ? null : { name: v.name }),
                value: v.value,
            };
        });

    export type Outbound = {
        accountId?: string | null | undefined;
        items?: Array<ReportLine$.Outbound> | null | undefined;
        name?: string | null | undefined;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportLine> = z
        .object({
            accountId: z.nullable(z.string()).optional(),
            items: z.nullable(z.array(z.lazy(() => ReportLine$.outboundSchema))).optional(),
            name: z.nullable(z.string()).optional(),
            value: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.name === undefined ? null : { name: v.name }),
                value: v.value,
            };
        });
}
