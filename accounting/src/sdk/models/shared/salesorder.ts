/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountingCustomerRef, AccountingCustomerRef$ } from "./accountingcustomerref";
import { Items, Items$ } from "./items";
import { Metadata, Metadata$ } from "./metadata";
import { SalesOrderInvoiceStatus, SalesOrderInvoiceStatus$ } from "./salesorderinvoicestatus";
import { SalesOrderLineItem, SalesOrderLineItem$ } from "./salesorderlineitem";
import { SalesOrderStatus, SalesOrderStatus$ } from "./salesorderstatus";
import * as z from "zod";

/**
 * Details of the named contact at the delivery address.
 */
export type SalesOrderContact = {
    /**
     * Email address of the contact at the delivery address.
     */
    email?: string | null | undefined;
    /**
     * Name of the contact at the delivery address.
     */
    name?: string | null | undefined;
    /**
     * Phone number of the contact at the delivery address.
     */
    phone?: string | null | undefined;
};

/**
 * Delivery details for any goods that have been ordered.
 */
export type SalesOrderShipTo = {
    address?: Items | undefined;
    /**
     * Details of the named contact at the delivery address.
     */
    contact?: SalesOrderContact | undefined;
};

/**
 * > View the coverage for sales orders in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=salesOrders" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * A sales order represents a customer's intention to purchase goods or services from a seller and usually includes information such as the expected delivery date and shipping details. This information can be used to provide visibility on a business's expected receivables and to track sales through the full procurement process.
 *
 * A sales order is typically converted to an [invoice](https://docs.codat.io/accounting-api#/schemas/Invoice) after approval.
 */
export type SalesOrder = {
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * A customer-supplied identifier for the purchase order in the customer's system.
     */
    customerPurchaseOrderNumber?: string | null | undefined;
    customerRef?: AccountingCustomerRef | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    expectedDeliveryDate?: string | undefined;
    /**
     * Identifier for the sales order, unique for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * If the sales order is converted to an invoice, or will be in future, the invoicingStatus field indicates the current stage of the invoicing process.
     */
    invoicingStatus?: SalesOrderInvoiceStatus | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    issueDate?: string | undefined;
    /**
     * An array of line items.
     */
    lineItems?: Array<SalesOrderLineItem> | null | undefined;
    metadata?: Metadata | undefined;
    modifiedDate?: string | undefined;
    /**
     * Any additional information associated with the sales order.
     */
    note?: string | null | undefined;
    /**
     * Friendly reference for the sales order, commonly generated by the accounting platform.
     */
    salesOrderNumber?: string | null | undefined;
    /**
     * Delivery details for any goods that have been ordered.
     */
    shipTo?: SalesOrderShipTo | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Current state of the sales order.
     */
    status?: SalesOrderStatus | undefined;
    /**
     * Total amount of the sales order, including discounts but excluding tax.
     */
    subTotal?: Decimal$ | number | undefined;
    /**
     * Total amount of the sales order, including discounts and tax.
     */
    totalAmount?: Decimal$ | number | undefined;
    /**
     * Total value of any discounts applied to the sales order.
     */
    totalDiscount?: Decimal$ | number | undefined;
    /**
     * Total amount of tax included in the sales order.
     */
    totalTaxAmount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace SalesOrderContact$ {
    export type Inbound = {
        email?: string | null | undefined;
        name?: string | null | undefined;
        phone?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<SalesOrderContact, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
            };
        });

    export type Outbound = {
        email?: string | null | undefined;
        name?: string | null | undefined;
        phone?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SalesOrderContact> = z
        .object({
            email: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
            };
        });
}

/** @internal */
export namespace SalesOrderShipTo$ {
    export type Inbound = {
        address?: Items$.Inbound | undefined;
        contact?: SalesOrderContact$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SalesOrderShipTo, z.ZodTypeDef, Inbound> = z
        .object({
            address: Items$.inboundSchema.optional(),
            contact: z.lazy(() => SalesOrderContact$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contact === undefined ? null : { contact: v.contact }),
            };
        });

    export type Outbound = {
        address?: Items$.Outbound | undefined;
        contact?: SalesOrderContact$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SalesOrderShipTo> = z
        .object({
            address: Items$.outboundSchema.optional(),
            contact: z.lazy(() => SalesOrderContact$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contact === undefined ? null : { contact: v.contact }),
            };
        });
}

/** @internal */
export namespace SalesOrder$ {
    export type Inbound = {
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        customerPurchaseOrderNumber?: string | null | undefined;
        customerRef?: AccountingCustomerRef$.Inbound | undefined;
        expectedDeliveryDate?: string | undefined;
        id?: string | undefined;
        invoicingStatus?: SalesOrderInvoiceStatus | undefined;
        issueDate?: string | undefined;
        lineItems?: Array<SalesOrderLineItem$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        salesOrderNumber?: string | null | undefined;
        shipTo?: SalesOrderShipTo$.Inbound | undefined;
        sourceModifiedDate?: string | undefined;
        status?: SalesOrderStatus | undefined;
        subTotal?: number | undefined;
        totalAmount?: number | undefined;
        totalDiscount?: number | undefined;
        totalTaxAmount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<SalesOrder, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            customerPurchaseOrderNumber: z.nullable(z.string()).optional(),
            customerRef: AccountingCustomerRef$.inboundSchema.optional(),
            expectedDeliveryDate: z.string().optional(),
            id: z.string().optional(),
            invoicingStatus: SalesOrderInvoiceStatus$.optional(),
            issueDate: z.string().optional(),
            lineItems: z.nullable(z.array(SalesOrderLineItem$.inboundSchema)).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            salesOrderNumber: z.nullable(z.string()).optional(),
            shipTo: z.lazy(() => SalesOrderShipTo$.inboundSchema).optional(),
            sourceModifiedDate: z.string().optional(),
            status: SalesOrderStatus$.optional(),
            subTotal: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalDiscount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalTaxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.customerPurchaseOrderNumber === undefined
                    ? null
                    : { customerPurchaseOrderNumber: v.customerPurchaseOrderNumber }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.expectedDeliveryDate === undefined
                    ? null
                    : { expectedDeliveryDate: v.expectedDeliveryDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoicingStatus === undefined
                    ? null
                    : { invoicingStatus: v.invoicingStatus }),
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.salesOrderNumber === undefined
                    ? null
                    : { salesOrderNumber: v.salesOrderNumber }),
                ...(v.shipTo === undefined ? null : { shipTo: v.shipTo }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
            };
        });

    export type Outbound = {
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        customerPurchaseOrderNumber?: string | null | undefined;
        customerRef?: AccountingCustomerRef$.Outbound | undefined;
        expectedDeliveryDate?: string | undefined;
        id?: string | undefined;
        invoicingStatus?: SalesOrderInvoiceStatus | undefined;
        issueDate?: string | undefined;
        lineItems?: Array<SalesOrderLineItem$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        modifiedDate?: string | undefined;
        note?: string | null | undefined;
        salesOrderNumber?: string | null | undefined;
        shipTo?: SalesOrderShipTo$.Outbound | undefined;
        sourceModifiedDate?: string | undefined;
        status?: SalesOrderStatus | undefined;
        subTotal?: number | undefined;
        totalAmount?: number | undefined;
        totalDiscount?: number | undefined;
        totalTaxAmount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SalesOrder> = z
        .object({
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            customerPurchaseOrderNumber: z.nullable(z.string()).optional(),
            customerRef: AccountingCustomerRef$.outboundSchema.optional(),
            expectedDeliveryDate: z.string().optional(),
            id: z.string().optional(),
            invoicingStatus: SalesOrderInvoiceStatus$.optional(),
            issueDate: z.string().optional(),
            lineItems: z.nullable(z.array(SalesOrderLineItem$.outboundSchema)).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
            note: z.nullable(z.string()).optional(),
            salesOrderNumber: z.nullable(z.string()).optional(),
            shipTo: z.lazy(() => SalesOrderShipTo$.outboundSchema).optional(),
            sourceModifiedDate: z.string().optional(),
            status: SalesOrderStatus$.optional(),
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalDiscount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.customerPurchaseOrderNumber === undefined
                    ? null
                    : { customerPurchaseOrderNumber: v.customerPurchaseOrderNumber }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.expectedDeliveryDate === undefined
                    ? null
                    : { expectedDeliveryDate: v.expectedDeliveryDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoicingStatus === undefined
                    ? null
                    : { invoicingStatus: v.invoicingStatus }),
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.salesOrderNumber === undefined
                    ? null
                    : { salesOrderNumber: v.salesOrderNumber }),
                ...(v.shipTo === undefined ? null : { shipTo: v.shipTo }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalDiscount === undefined ? null : { totalDiscount: v.totalDiscount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
            };
        });
}
