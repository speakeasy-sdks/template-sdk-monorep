/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The underlying data type associated to the reference `id`.
 */
export enum SalesOrderRefDataType {
    SalesOrders = "salesOrders",
}

export type SalesOrderRef = {
    /**
     * The underlying data type associated to the reference `id`.
     */
    dataType?: SalesOrderRefDataType | undefined;
    /**
     * Unique identifier to a record in `dataType`.
     */
    id?: string | undefined;
};

/** @internal */
export const SalesOrderRefDataType$ = z.nativeEnum(SalesOrderRefDataType);

/** @internal */
export namespace SalesOrderRef$ {
    export type Inbound = {
        dataType?: SalesOrderRefDataType | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SalesOrderRef, z.ZodTypeDef, Inbound> = z
        .object({
            dataType: SalesOrderRefDataType$.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        dataType?: SalesOrderRefDataType | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SalesOrderRef> = z
        .object({
            dataType: SalesOrderRefDataType$.optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}
