/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Items, Items$ } from "./items";
import * as z from "zod";

/**
 * Details of the named contact at the delivery address.
 */
export type ShipToContact = {
    /**
     * Email address of the contact at the delivery address.
     */
    email?: string | null | undefined;
    /**
     * Name of the contact at the delivery address.
     */
    name?: string | null | undefined;
    /**
     * Phone number of the contact at the delivery address.
     */
    phone?: string | null | undefined;
};

/**
 * Delivery details for any goods that have been ordered.
 */
export type ShipTo = {
    address?: Items | undefined;
    /**
     * Details of the named contact at the delivery address.
     */
    contact?: ShipToContact | undefined;
};

/** @internal */
export namespace ShipToContact$ {
    export type Inbound = {
        email?: string | null | undefined;
        name?: string | null | undefined;
        phone?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ShipToContact, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
            };
        });

    export type Outbound = {
        email?: string | null | undefined;
        name?: string | null | undefined;
        phone?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipToContact> = z
        .object({
            email: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
            };
        });
}

/** @internal */
export namespace ShipTo$ {
    export type Inbound = {
        address?: Items$.Inbound | undefined;
        contact?: ShipToContact$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ShipTo, z.ZodTypeDef, Inbound> = z
        .object({
            address: Items$.inboundSchema.optional(),
            contact: z.lazy(() => ShipToContact$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contact === undefined ? null : { contact: v.contact }),
            };
        });

    export type Outbound = {
        address?: Items$.Outbound | undefined;
        contact?: ShipToContact$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShipTo> = z
        .object({
            address: Items$.outboundSchema.optional(),
            contact: z.lazy(() => ShipToContact$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contact === undefined ? null : { contact: v.contact }),
            };
        });
}
