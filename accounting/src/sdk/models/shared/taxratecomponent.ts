/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

/**
 * A tax rate can be made up of multiple sub taxes, often called components of the tax.
 */
export type TaxRateComponent = {
    /**
     * A flag to indicate with the tax is calculated using the principle of compounding.
     */
    isCompound: boolean;
    /**
     * Name of the tax rate component.
     */
    name?: string | null | undefined;
    /**
     * The rate of the tax rate component, usually a percentage.
     */
    rate?: Decimal$ | number | null | undefined;
};

/** @internal */
export namespace TaxRateComponent$ {
    export type Inbound = {
        isCompound: boolean;
        name?: string | null | undefined;
        rate?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<TaxRateComponent, z.ZodTypeDef, Inbound> = z
        .object({
            isCompound: z.boolean(),
            name: z.nullable(z.string()).optional(),
            rate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
        })
        .transform((v) => {
            return {
                isCompound: v.isCompound,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.rate === undefined ? null : { rate: v.rate }),
            };
        });

    export type Outbound = {
        isCompound: boolean;
        name?: string | null | undefined;
        rate?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxRateComponent> = z
        .object({
            isCompound: z.boolean(),
            name: z.nullable(z.string()).optional(),
            rate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                isCompound: v.isCompound,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.rate === undefined ? null : { rate: v.rate }),
            };
        });
}
