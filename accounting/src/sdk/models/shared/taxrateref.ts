/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

/**
 * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
 *
 * @remarks
 *
 * Found on:
 *
 * - Bill line items
 * - Bill Credit Note line items
 * - Credit Note line items
 * - Direct incomes line items
 * - Invoice line items
 * - Items
 */
export type TaxRateRef = {
    /**
     * Applicable tax rate.
     */
    effectiveTaxRate?: Decimal$ | number | undefined;
    /**
     * Unique identifier for the tax rate in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Name of the tax rate in the accounting platform.
     */
    name?: string | undefined;
};

/** @internal */
export namespace TaxRateRef$ {
    export type Inbound = {
        effectiveTaxRate?: number | undefined;
        id?: string | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaxRateRef, z.ZodTypeDef, Inbound> = z
        .object({
            effectiveTaxRate: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.effectiveTaxRate === undefined
                    ? null
                    : { effectiveTaxRate: v.effectiveTaxRate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        effectiveTaxRate?: number | undefined;
        id?: string | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxRateRef> = z
        .object({
            effectiveTaxRate: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            id: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.effectiveTaxRate === undefined
                    ? null
                    : { effectiveTaxRate: v.effectiveTaxRate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
