/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type WithholdingTaxItems = {
    /**
     * Amount of tax withheld.
     */
    amount: Decimal$ | number;
    /**
     * Name assigned to withheld tax.
     */
    name: string;
};

/** @internal */
export namespace WithholdingTaxItems$ {
    export type Inbound = {
        amount: number;
        name: string;
    };

    export const inboundSchema: z.ZodType<WithholdingTaxItems, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number().transform((v) => new Decimal$(v)),
            name: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                name: v.name,
            };
        });

    export type Outbound = {
        amount: number;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WithholdingTaxItems> = z
        .object({
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            name: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                name: v.name,
            };
        });
}
