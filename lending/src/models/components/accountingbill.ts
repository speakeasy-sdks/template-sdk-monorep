/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import {
    AccountingPaymentAllocation,
    AccountingPaymentAllocation$,
} from "./accountingpaymentallocation";
import { BillLineItem, BillLineItem$ } from "./billlineitem";
import { BillStatus, BillStatus$ } from "./billstatus";
import { Metadata, Metadata$ } from "./metadata";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { SupplierRef, SupplierRef$ } from "./supplierref";
import * as z from "zod";

export type PurchaseOrderReference = {
    /**
     * Identifier for the purchase order, unique for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Friendly reference for the purchase order, commonly generated by the accounting platform.
     */
    purchaseOrderNumber?: string | null | undefined;
};

export type WithholdingTax = {
    /**
     * Name assigned to withheld tax.
     */
    name: string;
    /**
     * Amount of tax withheld.
     */
    amount: Decimal$ | number;
};

/**
 * > **Invoices or bills?**
 *
 * @remarks
 * >
 * > We distinguish between invoices where the company *owes money* vs. *is owed money*. If the company has received an invoice, and owes money to someone else (accounts payable) we call this a Bill.
 * >
 * > See [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) for the accounts receivable equivalent of bills.
 *
 * View the coverage for bills in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=bills" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * In Codat, a bill contains details of:
 * * When the bill was recorded in the accounting system.
 * * How much the bill is for and the currency of the amount.
 * * Who the bill was received from — the *supplier*.
 * * What the bill is for — the *line items*.
 *
 * Some accounting platforms give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
 *
 * You can find these types of transactions in our [Direct costs](https://docs.codat.io/lending-api#/schemas/DirectCost) data model.
 */
export type AccountingBill = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Identifier for the bill, unique for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * User-friendly reference for the bill.
     */
    reference?: string | null | undefined;
    /**
     * Reference to the supplier the record relates to.
     */
    supplierRef?: SupplierRef | undefined;
    purchaseOrderRefs?: Array<PurchaseOrderReference> | null | undefined;
    issueDate: string;
    dueDate?: string | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * Array of Bill line items.
     */
    lineItems?: Array<BillLineItem> | null | undefined;
    withholdingTax?: Array<WithholdingTax> | null | undefined;
    /**
     * Current state of the bill.
     */
    status: BillStatus;
    /**
     * Total amount of the bill, excluding any taxes.
     */
    subTotal: Decimal$ | number;
    /**
     * Amount of tax on the bill.
     */
    taxAmount: Decimal$ | number;
    /**
     * Amount of the bill, including tax.
     */
    totalAmount: Decimal$ | number;
    /**
     * Amount outstanding on the bill.
     */
    amountDue?: Decimal$ | number | null | undefined;
    /**
     * Any private, company notes about the bill, such as payment information.
     */
    note?: string | null | undefined;
    /**
     * An array of payment allocations.
     */
    paymentAllocations?: Array<AccountingPaymentAllocation> | null | undefined;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace PurchaseOrderReference$ {
    export type Inbound = {
        id?: string | undefined;
        purchaseOrderNumber?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<PurchaseOrderReference, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        purchaseOrderNumber?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PurchaseOrderReference> = z
        .object({
            id: z.string().optional(),
            purchaseOrderNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.purchaseOrderNumber === undefined
                    ? null
                    : { purchaseOrderNumber: v.purchaseOrderNumber }),
            };
        });
}

/** @internal */
export namespace WithholdingTax$ {
    export type Inbound = {
        name: string;
        amount: number;
    };

    export const inboundSchema: z.ZodType<WithholdingTax, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            amount: z.number().transform((v) => new Decimal$(v)),
        })
        .transform((v) => {
            return {
                name: v.name,
                amount: v.amount,
            };
        });

    export type Outbound = {
        name: string;
        amount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WithholdingTax> = z
        .object({
            name: z.string(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        })
        .transform((v) => {
            return {
                name: v.name,
                amount: v.amount,
            };
        });
}

/** @internal */
export namespace AccountingBill$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        reference?: string | null | undefined;
        supplierRef?: SupplierRef$.Inbound | undefined;
        purchaseOrderRefs?: Array<PurchaseOrderReference$.Inbound> | null | undefined;
        issueDate: string;
        dueDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        lineItems?: Array<BillLineItem$.Inbound> | null | undefined;
        withholdingTax?: Array<WithholdingTax$.Inbound> | null | undefined;
        status: BillStatus;
        subTotal: number;
        taxAmount: number;
        totalAmount: number;
        amountDue?: number | null | undefined;
        note?: string | null | undefined;
        paymentAllocations?: Array<AccountingPaymentAllocation$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingBill, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            reference: z.nullable(z.string()).optional(),
            supplierRef: SupplierRef$.inboundSchema.optional(),
            purchaseOrderRefs: z
                .nullable(z.array(z.lazy(() => PurchaseOrderReference$.inboundSchema)))
                .optional(),
            issueDate: z.string(),
            dueDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            lineItems: z.nullable(z.array(BillLineItem$.inboundSchema)).optional(),
            withholdingTax: z
                .nullable(z.array(z.lazy(() => WithholdingTax$.inboundSchema)))
                .optional(),
            status: BillStatus$,
            subTotal: z.number().transform((v) => new Decimal$(v)),
            taxAmount: z.number().transform((v) => new Decimal$(v)),
            totalAmount: z.number().transform((v) => new Decimal$(v)),
            amountDue: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            note: z.nullable(z.string()).optional(),
            paymentAllocations: z
                .nullable(z.array(AccountingPaymentAllocation$.inboundSchema))
                .optional(),
            metadata: Metadata$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.purchaseOrderRefs === undefined
                    ? null
                    : { purchaseOrderRefs: v.purchaseOrderRefs }),
                issueDate: v.issueDate,
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
                status: v.status,
                subTotal: v.subTotal,
                taxAmount: v.taxAmount,
                totalAmount: v.totalAmount,
                ...(v.amountDue === undefined ? null : { amountDue: v.amountDue }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        reference?: string | null | undefined;
        supplierRef?: SupplierRef$.Outbound | undefined;
        purchaseOrderRefs?: Array<PurchaseOrderReference$.Outbound> | null | undefined;
        issueDate: string;
        dueDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        lineItems?: Array<BillLineItem$.Outbound> | null | undefined;
        withholdingTax?: Array<WithholdingTax$.Outbound> | null | undefined;
        status: BillStatus;
        subTotal: number;
        taxAmount: number;
        totalAmount: number;
        amountDue?: number | null | undefined;
        note?: string | null | undefined;
        paymentAllocations?: Array<AccountingPaymentAllocation$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingBill> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            reference: z.nullable(z.string()).optional(),
            supplierRef: SupplierRef$.outboundSchema.optional(),
            purchaseOrderRefs: z
                .nullable(z.array(z.lazy(() => PurchaseOrderReference$.outboundSchema)))
                .optional(),
            issueDate: z.string(),
            dueDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            lineItems: z.nullable(z.array(BillLineItem$.outboundSchema)).optional(),
            withholdingTax: z
                .nullable(z.array(z.lazy(() => WithholdingTax$.outboundSchema)))
                .optional(),
            status: BillStatus$,
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            taxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            amountDue: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            note: z.nullable(z.string()).optional(),
            paymentAllocations: z
                .nullable(z.array(AccountingPaymentAllocation$.outboundSchema))
                .optional(),
            metadata: Metadata$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.supplierRef === undefined ? null : { supplierRef: v.supplierRef }),
                ...(v.purchaseOrderRefs === undefined
                    ? null
                    : { purchaseOrderRefs: v.purchaseOrderRefs }),
                issueDate: v.issueDate,
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
                status: v.status,
                subTotal: v.subTotal,
                taxAmount: v.taxAmount,
                totalAmount: v.totalAmount,
                ...(v.amountDue === undefined ? null : { amountDue: v.amountDue }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
