/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CreateBankAccountTransaction,
    CreateBankAccountTransaction$,
} from "./createbankaccounttransaction";
import { PropertieDataType, PropertieDataType$ } from "./propertiedatatype";
import { PushOperationChange, PushOperationChange$ } from "./pushoperationchange";
import { PushOperationStatus, PushOperationStatus$ } from "./pushoperationstatus";
import { Validation, Validation$ } from "./validation";
import * as z from "zod";

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingCreateBankAccountTransactions = {
    /**
     * Unique identifier for a bank account.
     */
    accountId?: string | undefined;
    transactions?: Array<CreateBankAccountTransaction> | undefined;
};

export type AccountingCreateBankTransactionsResponse = {
    data?: AccountingCreateBankAccountTransactions | undefined;
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
    /**
     * Push status code.
     */
    statusCode: number;
};

/** @internal */
export namespace AccountingCreateBankAccountTransactions$ {
    export type Inbound = {
        accountId?: string | undefined;
        transactions?: Array<CreateBankAccountTransaction$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        AccountingCreateBankAccountTransactions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            accountId: z.string().optional(),
            transactions: z.array(CreateBankAccountTransaction$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
            };
        });

    export type Outbound = {
        accountId?: string | undefined;
        transactions?: Array<CreateBankAccountTransaction$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingCreateBankAccountTransactions
    > = z
        .object({
            accountId: z.string().optional(),
            transactions: z.array(CreateBankAccountTransaction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
            };
        });
}

/** @internal */
export namespace AccountingCreateBankTransactionsResponse$ {
    export type Inbound = {
        data?: AccountingCreateBankAccountTransactions$.Inbound | undefined;
        changes?: Array<PushOperationChange$.Inbound> | null | undefined;
        dataType?: PropertieDataType | undefined;
        companyId: string;
        pushOperationKey: string;
        dataConnectionKey: string;
        requestedOnUtc: string;
        completedOnUtc?: string | undefined;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        status: PushOperationStatus;
        errorMessage?: string | null | undefined;
        validation?: Validation$.Inbound | undefined;
        statusCode: number;
    };

    export const inboundSchema: z.ZodType<
        AccountingCreateBankTransactionsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => AccountingCreateBankAccountTransactions$.inboundSchema).optional(),
            changes: z.nullable(z.array(PushOperationChange$.inboundSchema)).optional(),
            dataType: PropertieDataType$.optional(),
            companyId: z.string(),
            pushOperationKey: z.string(),
            dataConnectionKey: z.string(),
            requestedOnUtc: z.string(),
            completedOnUtc: z.string().optional(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            status: PushOperationStatus$,
            errorMessage: z.nullable(z.string()).optional(),
            validation: Validation$.inboundSchema.optional(),
            statusCode: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.changes === undefined ? null : { changes: v.changes }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                companyId: v.companyId,
                pushOperationKey: v.pushOperationKey,
                dataConnectionKey: v.dataConnectionKey,
                requestedOnUtc: v.requestedOnUtc,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                status: v.status,
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
                statusCode: v.statusCode,
            };
        });

    export type Outbound = {
        data?: AccountingCreateBankAccountTransactions$.Outbound | undefined;
        changes?: Array<PushOperationChange$.Outbound> | null | undefined;
        dataType?: PropertieDataType | undefined;
        companyId: string;
        pushOperationKey: string;
        dataConnectionKey: string;
        requestedOnUtc: string;
        completedOnUtc?: string | undefined;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        status: PushOperationStatus;
        errorMessage?: string | null | undefined;
        validation?: Validation$.Outbound | undefined;
        statusCode: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingCreateBankTransactionsResponse
    > = z
        .object({
            data: z.lazy(() => AccountingCreateBankAccountTransactions$.outboundSchema).optional(),
            changes: z.nullable(z.array(PushOperationChange$.outboundSchema)).optional(),
            dataType: PropertieDataType$.optional(),
            companyId: z.string(),
            pushOperationKey: z.string(),
            dataConnectionKey: z.string(),
            requestedOnUtc: z.string(),
            completedOnUtc: z.string().optional(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            status: PushOperationStatus$,
            errorMessage: z.nullable(z.string()).optional(),
            validation: Validation$.outboundSchema.optional(),
            statusCode: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.changes === undefined ? null : { changes: v.changes }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                companyId: v.companyId,
                pushOperationKey: v.pushOperationKey,
                dataConnectionKey: v.dataConnectionKey,
                requestedOnUtc: v.requestedOnUtc,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                status: v.status,
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
                statusCode: v.statusCode,
            };
        });
}
