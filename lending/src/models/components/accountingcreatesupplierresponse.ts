/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountingAddress, AccountingAddress$ } from "./accountingaddress";
import { Metadata, Metadata$ } from "./metadata";
import { PropertieDataType, PropertieDataType$ } from "./propertiedatatype";
import { PushOperationChange, PushOperationChange$ } from "./pushoperationchange";
import { PushOperationStatus, PushOperationStatus$ } from "./pushoperationstatus";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { SupplierStatus, SupplierStatus$ } from "./supplierstatus";
import { Validation, Validation$ } from "./validation";
import * as z from "zod";

/**
 * > View the coverage for suppliers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=suppliers" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * From the **Suppliers** endpoints, you can retrieve a list of [all the suppliers for a company](https://docs.codat.io/lending-api#/operations/list-suppliers). Suppliers' data links to accounts payable [bills](https://docs.codat.io/lending-api#/schemas/Bill).
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type AccountingCreateSupplierResponseAccountingSupplier = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Identifier for the supplier, unique to the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Name of the supplier as recorded in the accounting system, typically the company name.
     */
    supplierName?: string | null | undefined;
    /**
     * Name of the main contact for the supplier.
     */
    contactName?: string | null | undefined;
    /**
     * Email address that the supplier may be contacted on.
     */
    emailAddress?: string | null | undefined;
    /**
     * Phone number that the supplier may be contacted on.
     */
    phone?: string | null | undefined;
    /**
     * An array of Addresses.
     */
    addresses?: Array<AccountingAddress> | null | undefined;
    /**
     * Company number of the supplier. In the UK, this is typically the company registration number issued by Companies House.
     */
    registrationNumber?: string | null | undefined;
    /**
     * Supplier's company tax number.
     */
    taxNumber?: string | null | undefined;
    /**
     * Status of the supplier.
     */
    status: SupplierStatus;
    /**
     * Default currency the supplier's transactional data is recorded in.
     */
    defaultCurrency?: string | null | undefined;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

export type AccountingCreateSupplierResponse = {
    data?: AccountingCreateSupplierResponseAccountingSupplier | null | undefined;
    /**
     * Contains a single entry that communicates which record has changed and the manner in which it changed.
     */
    changes?: Array<PushOperationChange> | null | undefined;
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
    /**
     * Unique identifier for your SMB in Codat.
     */
    companyId: string;
    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    pushOperationKey: string;
    /**
     * Unique identifier for a company's data connection.
     */
    dataConnectionKey: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    requestedOnUtc: string;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    completedOnUtc?: string | undefined;
    /**
     * Number of minutes the push operation must complete within before it times out.
     */
    timeoutInMinutes?: number | null | undefined;
    /**
     * Number of seconds the push operation must complete within before it times out.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    timeoutInSeconds?: number | null | undefined;
    /**
     * The current status of the push operation.
     */
    status: PushOperationStatus;
    /**
     * A message about the error.
     */
    errorMessage?: string | null | undefined;
    /**
     * A human-readable object describing validation decisions Codat has made when pushing data into the platform. If a push has failed because of validation errors, they will be detailed here.
     */
    validation?: Validation | undefined;
    /**
     * Push status code.
     */
    statusCode: number;
};

/** @internal */
export namespace AccountingCreateSupplierResponseAccountingSupplier$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        supplierName?: string | null | undefined;
        contactName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        phone?: string | null | undefined;
        addresses?: Array<AccountingAddress$.Inbound> | null | undefined;
        registrationNumber?: string | null | undefined;
        taxNumber?: string | null | undefined;
        status: SupplierStatus;
        defaultCurrency?: string | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        AccountingCreateSupplierResponseAccountingSupplier,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            supplierName: z.nullable(z.string()).optional(),
            contactName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
            addresses: z.nullable(z.array(AccountingAddress$.inboundSchema)).optional(),
            registrationNumber: z.nullable(z.string()).optional(),
            taxNumber: z.nullable(z.string()).optional(),
            status: SupplierStatus$,
            defaultCurrency: z.nullable(z.string()).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.supplierName === undefined ? null : { supplierName: v.supplierName }),
                ...(v.contactName === undefined ? null : { contactName: v.contactName }),
                ...(v.emailAddress === undefined ? null : { emailAddress: v.emailAddress }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.registrationNumber === undefined
                    ? null
                    : { registrationNumber: v.registrationNumber }),
                ...(v.taxNumber === undefined ? null : { taxNumber: v.taxNumber }),
                status: v.status,
                ...(v.defaultCurrency === undefined
                    ? null
                    : { defaultCurrency: v.defaultCurrency }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        supplierName?: string | null | undefined;
        contactName?: string | null | undefined;
        emailAddress?: string | null | undefined;
        phone?: string | null | undefined;
        addresses?: Array<AccountingAddress$.Outbound> | null | undefined;
        registrationNumber?: string | null | undefined;
        taxNumber?: string | null | undefined;
        status: SupplierStatus;
        defaultCurrency?: string | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingCreateSupplierResponseAccountingSupplier
    > = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            supplierName: z.nullable(z.string()).optional(),
            contactName: z.nullable(z.string()).optional(),
            emailAddress: z.nullable(z.string()).optional(),
            phone: z.nullable(z.string()).optional(),
            addresses: z.nullable(z.array(AccountingAddress$.outboundSchema)).optional(),
            registrationNumber: z.nullable(z.string()).optional(),
            taxNumber: z.nullable(z.string()).optional(),
            status: SupplierStatus$,
            defaultCurrency: z.nullable(z.string()).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.supplierName === undefined ? null : { supplierName: v.supplierName }),
                ...(v.contactName === undefined ? null : { contactName: v.contactName }),
                ...(v.emailAddress === undefined ? null : { emailAddress: v.emailAddress }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.registrationNumber === undefined
                    ? null
                    : { registrationNumber: v.registrationNumber }),
                ...(v.taxNumber === undefined ? null : { taxNumber: v.taxNumber }),
                status: v.status,
                ...(v.defaultCurrency === undefined
                    ? null
                    : { defaultCurrency: v.defaultCurrency }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}

/** @internal */
export namespace AccountingCreateSupplierResponse$ {
    export type Inbound = {
        data?: AccountingCreateSupplierResponseAccountingSupplier$.Inbound | null | undefined;
        changes?: Array<PushOperationChange$.Inbound> | null | undefined;
        dataType?: PropertieDataType | undefined;
        companyId: string;
        pushOperationKey: string;
        dataConnectionKey: string;
        requestedOnUtc: string;
        completedOnUtc?: string | undefined;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        status: PushOperationStatus;
        errorMessage?: string | null | undefined;
        validation?: Validation$.Inbound | undefined;
        statusCode: number;
    };

    export const inboundSchema: z.ZodType<AccountingCreateSupplierResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z
                    .nullable(
                        z.lazy(
                            () => AccountingCreateSupplierResponseAccountingSupplier$.inboundSchema
                        )
                    )
                    .optional(),
                changes: z.nullable(z.array(PushOperationChange$.inboundSchema)).optional(),
                dataType: PropertieDataType$.optional(),
                companyId: z.string(),
                pushOperationKey: z.string(),
                dataConnectionKey: z.string(),
                requestedOnUtc: z.string(),
                completedOnUtc: z.string().optional(),
                timeoutInMinutes: z.nullable(z.number().int()).optional(),
                timeoutInSeconds: z.nullable(z.number().int()).optional(),
                status: PushOperationStatus$,
                errorMessage: z.nullable(z.string()).optional(),
                validation: Validation$.inboundSchema.optional(),
                statusCode: z.number().int(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                    ...(v.changes === undefined ? null : { changes: v.changes }),
                    ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                    companyId: v.companyId,
                    pushOperationKey: v.pushOperationKey,
                    dataConnectionKey: v.dataConnectionKey,
                    requestedOnUtc: v.requestedOnUtc,
                    ...(v.completedOnUtc === undefined
                        ? null
                        : { completedOnUtc: v.completedOnUtc }),
                    ...(v.timeoutInMinutes === undefined
                        ? null
                        : { timeoutInMinutes: v.timeoutInMinutes }),
                    ...(v.timeoutInSeconds === undefined
                        ? null
                        : { timeoutInSeconds: v.timeoutInSeconds }),
                    status: v.status,
                    ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                    ...(v.validation === undefined ? null : { validation: v.validation }),
                    statusCode: v.statusCode,
                };
            });

    export type Outbound = {
        data?: AccountingCreateSupplierResponseAccountingSupplier$.Outbound | null | undefined;
        changes?: Array<PushOperationChange$.Outbound> | null | undefined;
        dataType?: PropertieDataType | undefined;
        companyId: string;
        pushOperationKey: string;
        dataConnectionKey: string;
        requestedOnUtc: string;
        completedOnUtc?: string | undefined;
        timeoutInMinutes?: number | null | undefined;
        timeoutInSeconds?: number | null | undefined;
        status: PushOperationStatus;
        errorMessage?: string | null | undefined;
        validation?: Validation$.Outbound | undefined;
        statusCode: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingCreateSupplierResponse
    > = z
        .object({
            data: z
                .nullable(
                    z.lazy(() => AccountingCreateSupplierResponseAccountingSupplier$.outboundSchema)
                )
                .optional(),
            changes: z.nullable(z.array(PushOperationChange$.outboundSchema)).optional(),
            dataType: PropertieDataType$.optional(),
            companyId: z.string(),
            pushOperationKey: z.string(),
            dataConnectionKey: z.string(),
            requestedOnUtc: z.string(),
            completedOnUtc: z.string().optional(),
            timeoutInMinutes: z.nullable(z.number().int()).optional(),
            timeoutInSeconds: z.nullable(z.number().int()).optional(),
            status: PushOperationStatus$,
            errorMessage: z.nullable(z.string()).optional(),
            validation: Validation$.outboundSchema.optional(),
            statusCode: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.changes === undefined ? null : { changes: v.changes }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
                companyId: v.companyId,
                pushOperationKey: v.pushOperationKey,
                dataConnectionKey: v.dataConnectionKey,
                requestedOnUtc: v.requestedOnUtc,
                ...(v.completedOnUtc === undefined ? null : { completedOnUtc: v.completedOnUtc }),
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                ...(v.timeoutInSeconds === undefined
                    ? null
                    : { timeoutInSeconds: v.timeoutInSeconds }),
                status: v.status,
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.validation === undefined ? null : { validation: v.validation }),
                statusCode: v.statusCode,
            };
        });
}
