/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountingCustomerRef, AccountingCustomerRef$ } from "./accountingcustomerref";
import {
    AccountingPaymentAllocation,
    AccountingPaymentAllocation$,
} from "./accountingpaymentallocation";
import { CreditNoteLineItem, CreditNoteLineItem$ } from "./creditnotelineitem";
import { CreditNoteStatus, CreditNoteStatus$ } from "./creditnotestatus";
import { Metadata, Metadata$ } from "./metadata";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { WithholdingTaxItems, WithholdingTaxItems$ } from "./withholdingtaxitems";
import * as z from "zod";

/**
 * > View the coverage for credit notes in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=creditNotes" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * ## Overview
 *
 * Think of a credit note as a voucher issued to a customer. It is a reduction that can be applied against one or multiple invoices. A credit note can either reduce the amount owed or cancel out an invoice entirely.
 *
 * In the Codat system a credit note is issued to a [customer's](https://docs.codat.io/lending-api#/schemas/Customer) accounts receivable.
 *
 * It contains details of:
 * * The amount of credit remaining and its status.
 * * Payment allocations against the payments type, in this case an invoice.
 * * Which customers the credit notes have been issued to.
 */
export type AccountingCreditNote = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Identifier for the credit note, unique to the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Friendly reference for the credit note.
     */
    creditNoteNumber?: string | null | undefined;
    customerRef?: AccountingCustomerRef | undefined;
    withholdingTax?: Array<WithholdingTaxItems> | null | undefined;
    /**
     * Total amount of credit that has been applied to the customer's accounts receivable
     */
    totalAmount: Decimal$ | number;
    /**
     * Any discounts applied to the credit note amount.
     */
    totalDiscount: Decimal$ | number;
    /**
     * Value of the credit note, including discounts and excluding tax.
     */
    subTotal: Decimal$ | number;
    /**
     * Additional tax amount applied to credit note.
     */
    additionalTaxAmount?: Decimal$ | number | undefined;
    /**
     * Percentage rate of any additional tax applied to the credit note.
     */
    additionalTaxPercentage?: Decimal$ | number | undefined;
    /**
     * Any tax applied to the credit note amount.
     */
    totalTaxAmount: Decimal$ | number;
    /**
     * Percentage rate (from 0 to 100) of discounts applied to the credit note.
     */
    discountPercentage: Decimal$ | number;
    /**
     * Unused balance of totalAmount originally raised.
     */
    remainingCredit: Decimal$ | number;
    /**
     * Current state of the credit note.
     */
    status: CreditNoteStatus;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    issueDate?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    allocatedOnDate?: string | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    lineItems?: Array<CreditNoteLineItem> | null | undefined;
    /**
     * An array of payment allocations.
     */
    paymentAllocations?: Array<AccountingPaymentAllocation> | null | undefined;
    /**
     * Any additional information about the credit note. Where possible, Codat links to a data field in the accounting platform that is publicly available. This means that the contents of the note field are included when a credit note is emailed from the accounting platform to the customer.
     */
    note?: string | null | undefined;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace AccountingCreditNote$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        creditNoteNumber?: string | null | undefined;
        customerRef?: AccountingCustomerRef$.Inbound | undefined;
        withholdingTax?: Array<WithholdingTaxItems$.Inbound> | null | undefined;
        totalAmount: number;
        totalDiscount: number;
        subTotal: number;
        additionalTaxAmount?: number | undefined;
        additionalTaxPercentage?: number | undefined;
        totalTaxAmount: number;
        discountPercentage: number;
        remainingCredit: number;
        status: CreditNoteStatus;
        issueDate?: string | undefined;
        allocatedOnDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        lineItems?: Array<CreditNoteLineItem$.Inbound> | null | undefined;
        paymentAllocations?: Array<AccountingPaymentAllocation$.Inbound> | null | undefined;
        note?: string | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingCreditNote, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            creditNoteNumber: z.nullable(z.string()).optional(),
            customerRef: AccountingCustomerRef$.inboundSchema.optional(),
            withholdingTax: z.nullable(z.array(WithholdingTaxItems$.inboundSchema)).optional(),
            totalAmount: z.number().transform((v) => new Decimal$(v)),
            totalDiscount: z.number().transform((v) => new Decimal$(v)),
            subTotal: z.number().transform((v) => new Decimal$(v)),
            additionalTaxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            additionalTaxPercentage: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalTaxAmount: z.number().transform((v) => new Decimal$(v)),
            discountPercentage: z.number().transform((v) => new Decimal$(v)),
            remainingCredit: z.number().transform((v) => new Decimal$(v)),
            status: CreditNoteStatus$,
            issueDate: z.string().optional(),
            allocatedOnDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            lineItems: z.nullable(z.array(CreditNoteLineItem$.inboundSchema)).optional(),
            paymentAllocations: z
                .nullable(z.array(AccountingPaymentAllocation$.inboundSchema))
                .optional(),
            note: z.nullable(z.string()).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.creditNoteNumber === undefined
                    ? null
                    : { creditNoteNumber: v.creditNoteNumber }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
                totalAmount: v.totalAmount,
                totalDiscount: v.totalDiscount,
                subTotal: v.subTotal,
                ...(v.additionalTaxAmount === undefined
                    ? null
                    : { additionalTaxAmount: v.additionalTaxAmount }),
                ...(v.additionalTaxPercentage === undefined
                    ? null
                    : { additionalTaxPercentage: v.additionalTaxPercentage }),
                totalTaxAmount: v.totalTaxAmount,
                discountPercentage: v.discountPercentage,
                remainingCredit: v.remainingCredit,
                status: v.status,
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.allocatedOnDate === undefined
                    ? null
                    : { allocatedOnDate: v.allocatedOnDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        creditNoteNumber?: string | null | undefined;
        customerRef?: AccountingCustomerRef$.Outbound | undefined;
        withholdingTax?: Array<WithholdingTaxItems$.Outbound> | null | undefined;
        totalAmount: number;
        totalDiscount: number;
        subTotal: number;
        additionalTaxAmount?: number | undefined;
        additionalTaxPercentage?: number | undefined;
        totalTaxAmount: number;
        discountPercentage: number;
        remainingCredit: number;
        status: CreditNoteStatus;
        issueDate?: string | undefined;
        allocatedOnDate?: string | undefined;
        currency?: string | undefined;
        currencyRate?: number | null | undefined;
        lineItems?: Array<CreditNoteLineItem$.Outbound> | null | undefined;
        paymentAllocations?: Array<AccountingPaymentAllocation$.Outbound> | null | undefined;
        note?: string | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingCreditNote> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            creditNoteNumber: z.nullable(z.string()).optional(),
            customerRef: AccountingCustomerRef$.outboundSchema.optional(),
            withholdingTax: z.nullable(z.array(WithholdingTaxItems$.outboundSchema)).optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            totalDiscount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            additionalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            additionalTaxPercentage: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            discountPercentage: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            remainingCredit: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            status: CreditNoteStatus$,
            issueDate: z.string().optional(),
            allocatedOnDate: z.string().optional(),
            currency: z.string().optional(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            lineItems: z.nullable(z.array(CreditNoteLineItem$.outboundSchema)).optional(),
            paymentAllocations: z
                .nullable(z.array(AccountingPaymentAllocation$.outboundSchema))
                .optional(),
            note: z.nullable(z.string()).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.creditNoteNumber === undefined
                    ? null
                    : { creditNoteNumber: v.creditNoteNumber }),
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.withholdingTax === undefined ? null : { withholdingTax: v.withholdingTax }),
                totalAmount: v.totalAmount,
                totalDiscount: v.totalDiscount,
                subTotal: v.subTotal,
                ...(v.additionalTaxAmount === undefined
                    ? null
                    : { additionalTaxAmount: v.additionalTaxAmount }),
                ...(v.additionalTaxPercentage === undefined
                    ? null
                    : { additionalTaxPercentage: v.additionalTaxPercentage }),
                totalTaxAmount: v.totalTaxAmount,
                discountPercentage: v.discountPercentage,
                remainingCredit: v.remainingCredit,
                status: v.status,
                ...(v.issueDate === undefined ? null : { issueDate: v.issueDate }),
                ...(v.allocatedOnDate === undefined
                    ? null
                    : { allocatedOnDate: v.allocatedOnDate }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                ...(v.lineItems === undefined ? null : { lineItems: v.lineItems }),
                ...(v.paymentAllocations === undefined
                    ? null
                    : { paymentAllocations: v.paymentAllocations }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
