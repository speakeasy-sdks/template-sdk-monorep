/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JournalEntryRecordRef, JournalEntryRecordRef$ } from "./journalentryrecordref";
import { JournalLine, JournalLine$ } from "./journalline";
import { JournalRef, JournalRef$ } from "./journalref";
import { Metadata, Metadata$ } from "./metadata";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import * as z from "zod";

/**
 * > **Language tip:** For the top-level record of a company's financial transactions, refer to the [Journals](https://docs.codat.io/lending-api#/schemas/Journal) data type
 *
 * @remarks
 *
 * > View the coverage for journal entries in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journalEntries" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * A journal entry report shows the entries made in a company's general ledger, or [accounts](https://docs.codat.io/lending-api#/schemas/Account), when transactions are approved. The journal line items for each journal entry should balance.
 *
 * A journal entry line item is a single transaction line on the journal entry. For example:
 *
 * - When a journal entry is recording a receipt of cash, the credit to accounts receivable and the debit to cash are separate line items.
 * - When a company needs to recognise revenue from an annual contract on a monthly basis, on receipt of cash for month one, they make a debit to deferred income and a credit to revenue.
 *
 * In Codat a journal entry contains details of:
 *
 * - The date on which the entry was created and posted.
 * - Itemised lines, including amounts and currency.
 * - A reference to the associated accounts.
 * - A reference to the underlying record. For example, the invoice, bill, or other data type that triggered the posting of the journal entry to the general ledger.
 *
 * > **Pushing journal entries**
 * > Codat only supports journal entries in the base currency of the company that are pushed into accounts denominated in the same base currency.
 */
export type AccountingJournalEntry = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Unique identifier of the journal entry for the company in the accounting platform.
     */
    id?: string | undefined;
    /**
     * Optional description of the journal entry.
     */
    description?: string | null | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    postedOn?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    createdOn?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    updatedOn?: string | undefined;
    /**
     * Links journal entries to the relevant journal in accounting integrations that use multi-book accounting (multiple journals).
     */
    journalRef?: JournalRef | undefined;
    /**
     * An array of journal lines.
     */
    journalLines?: Array<JournalLine> | null | undefined;
    /**
     * Links a journal entry to the underlying record that created it.
     */
    recordRef?: JournalEntryRecordRef | undefined;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace AccountingJournalEntry$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        description?: string | null | undefined;
        postedOn?: string | undefined;
        createdOn?: string | undefined;
        updatedOn?: string | undefined;
        journalRef?: JournalRef$.Inbound | undefined;
        journalLines?: Array<JournalLine$.Inbound> | null | undefined;
        recordRef?: JournalEntryRecordRef$.Inbound | undefined;
        metadata?: Metadata$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingJournalEntry, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            postedOn: z.string().optional(),
            createdOn: z.string().optional(),
            updatedOn: z.string().optional(),
            journalRef: JournalRef$.inboundSchema.optional(),
            journalLines: z.nullable(z.array(JournalLine$.inboundSchema)).optional(),
            recordRef: JournalEntryRecordRef$.inboundSchema.optional(),
            metadata: Metadata$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.postedOn === undefined ? null : { postedOn: v.postedOn }),
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.updatedOn === undefined ? null : { updatedOn: v.updatedOn }),
                ...(v.journalRef === undefined ? null : { journalRef: v.journalRef }),
                ...(v.journalLines === undefined ? null : { journalLines: v.journalLines }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        description?: string | null | undefined;
        postedOn?: string | undefined;
        createdOn?: string | undefined;
        updatedOn?: string | undefined;
        journalRef?: JournalRef$.Outbound | undefined;
        journalLines?: Array<JournalLine$.Outbound> | null | undefined;
        recordRef?: JournalEntryRecordRef$.Outbound | undefined;
        metadata?: Metadata$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingJournalEntry> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            postedOn: z.string().optional(),
            createdOn: z.string().optional(),
            updatedOn: z.string().optional(),
            journalRef: JournalRef$.outboundSchema.optional(),
            journalLines: z.nullable(z.array(JournalLine$.outboundSchema)).optional(),
            recordRef: JournalEntryRecordRef$.outboundSchema.optional(),
            metadata: Metadata$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.postedOn === undefined ? null : { postedOn: v.postedOn }),
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.updatedOn === undefined ? null : { updatedOn: v.updatedOn }),
                ...(v.journalRef === undefined ? null : { journalRef: v.journalRef }),
                ...(v.journalLines === undefined ? null : { journalLines: v.journalLines }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
