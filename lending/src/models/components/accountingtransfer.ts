/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContactRef, ContactRef$ } from "./contactref";
import { Metadata, Metadata$ } from "./metadata";
import { RecordRef, RecordRef$ } from "./recordref";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { TrackingCategoryRef, TrackingCategoryRef$ } from "./trackingcategoryref";
import { TransferAccount, TransferAccount$ } from "./transferaccount";
import * as z from "zod";

/**
 * > View the coverage for transfers in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=transfers" target="_blank">Data coverage explorer</a>.
 *
 * @remarks
 *
 * A transfer records the movement of money between two bank accounts, or between a bank account and a nominal account. It is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
 */
export type AccountingTransfer = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Unique identifier for the transfer.
     */
    id?: string | undefined;
    /**
     * Description of the transfer.
     */
    description?: string | null | undefined;
    /**
     * A customer or supplier associated with the direct cost.
     */
    contactRef?: ContactRef | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    date?: string | undefined;
    /**
     * Account details of the account sending or receiving the transfer.
     */
    from?: TransferAccount | undefined;
    /**
     * Account details of the account sending or receiving the transfer.
     */
    to?: TransferAccount | undefined;
    /**
     * Reference to the tracking categories this transfer is being tracked against.
     */
    trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
    /**
     * List of selected transactions to associate with the transfer. Use this field to include transactions which are posted to the _undeposited funds_ (or other holding) account within the transfer.
     */
    depositedRecordRefs?: Array<RecordRef> | null | undefined;
    metadata?: Metadata | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace AccountingTransfer$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        description?: string | null | undefined;
        contactRef?: ContactRef$.Inbound | undefined;
        date?: string | undefined;
        from?: TransferAccount$.Inbound | undefined;
        to?: TransferAccount$.Inbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Inbound> | null | undefined;
        depositedRecordRefs?: Array<RecordRef$.Inbound> | null | undefined;
        metadata?: Metadata$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingTransfer, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            contactRef: ContactRef$.inboundSchema.optional(),
            date: z.string().optional(),
            from: TransferAccount$.inboundSchema.optional(),
            to: TransferAccount$.inboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.inboundSchema))
                .optional(),
            depositedRecordRefs: z.nullable(z.array(RecordRef$.inboundSchema)).optional(),
            metadata: Metadata$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
                ...(v.depositedRecordRefs === undefined
                    ? null
                    : { depositedRecordRefs: v.depositedRecordRefs }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        description?: string | null | undefined;
        contactRef?: ContactRef$.Outbound | undefined;
        date?: string | undefined;
        from?: TransferAccount$.Outbound | undefined;
        to?: TransferAccount$.Outbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Outbound> | null | undefined;
        depositedRecordRefs?: Array<RecordRef$.Outbound> | null | undefined;
        metadata?: Metadata$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingTransfer> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            description: z.nullable(z.string()).optional(),
            contactRef: ContactRef$.outboundSchema.optional(),
            date: z.string().optional(),
            from: TransferAccount$.outboundSchema.optional(),
            to: TransferAccount$.outboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.outboundSchema))
                .optional(),
            depositedRecordRefs: z.nullable(z.array(RecordRef$.outboundSchema)).optional(),
            metadata: Metadata$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
                ...(v.depositedRecordRefs === undefined
                    ? null
                    : { depositedRecordRefs: v.depositedRecordRefs }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
