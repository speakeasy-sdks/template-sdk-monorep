/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import {
    AccountTransactionLineRecordRef,
    AccountTransactionLineRecordRef$,
} from "./accounttransactionlinerecordref";
import * as z from "zod";

export type AccountTransactionLine = {
    /**
     * Description of the account transaction.
     */
    description?: string | null | undefined;
    /**
     * Links an account transaction line to the underlying record that created it.
     */
    recordRef?: AccountTransactionLineRecordRef | undefined;
    /**
     * Amount in the bill payment currency.
     */
    amount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace AccountTransactionLine$ {
    export type Inbound = {
        description?: string | null | undefined;
        recordRef?: AccountTransactionLineRecordRef$.Inbound | undefined;
        amount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<AccountTransactionLine, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.nullable(z.string()).optional(),
            recordRef: AccountTransactionLineRecordRef$.inboundSchema.optional(),
            amount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
            };
        });

    export type Outbound = {
        description?: string | null | undefined;
        recordRef?: AccountTransactionLineRecordRef$.Outbound | undefined;
        amount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountTransactionLine> = z
        .object({
            description: z.nullable(z.string()).optional(),
            recordRef: AccountTransactionLineRecordRef$.outboundSchema.optional(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.recordRef === undefined ? null : { recordRef: v.recordRef }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
            };
        });
}
