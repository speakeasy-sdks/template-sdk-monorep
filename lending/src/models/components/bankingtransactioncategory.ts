/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TransactionCategoryStatus, TransactionCategoryStatus$ } from "./transactioncategorystatus";
import * as z from "zod";

/**
 * The Banking Transaction Categories data type provides a list of hierarchical categories associated with a transaction for greater contextual meaning to transaction activity.
 *
 * @remarks
 *
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 */
export type BankingTransactionCategory = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * The unique identifier of the bank transaction category.
     */
    id: string;
    /**
     * The name of the bank transaction category.
     */
    name: string;
    /**
     * The unique identifier of the parent bank transaction category.
     */
    parentId?: string | null | undefined;
    /**
     * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
     */
    hasChildren?: boolean | undefined;
    /**
     * The status of the transaction category.
     */
    status?: TransactionCategoryStatus | undefined;
};

/** @internal */
export namespace BankingTransactionCategory$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        name: string;
        parentId?: string | null | undefined;
        hasChildren?: boolean | undefined;
        status?: TransactionCategoryStatus | undefined;
    };

    export const inboundSchema: z.ZodType<BankingTransactionCategory, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            name: z.string(),
            parentId: z.nullable(z.string()).optional(),
            hasChildren: z.boolean().optional(),
            status: TransactionCategoryStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                name: v.name,
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        name: string;
        parentId?: string | null | undefined;
        hasChildren?: boolean | undefined;
        status?: TransactionCategoryStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BankingTransactionCategory> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            name: z.string(),
            parentId: z.nullable(z.string()).optional(),
            hasChildren: z.boolean().optional(),
            status: TransactionCategoryStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                name: v.name,
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
