/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The source of the banking data that determines its format
 */
export enum Source {
    Codat = "codat",
}

/**
 * Configuration settings for uploading banking data to Codat
 */
export type BankStatementUploadConfiguration = {
    /**
     * The source of the banking data that determines its format
     */
    source?: Source | undefined;
    /**
     * The ID of the account in the third-party platform
     */
    accountId?: string | undefined;
    /**
     * TrueLayer provider ID (only required if source is TrueLayer)
     */
    providerId?: string | undefined;
};

/** @internal */
export const Source$ = z.nativeEnum(Source);

/** @internal */
export namespace BankStatementUploadConfiguration$ {
    export type Inbound = {
        source?: Source | undefined;
        accountId?: string | undefined;
        providerId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<BankStatementUploadConfiguration, z.ZodTypeDef, Inbound> =
        z
            .object({
                source: Source$.optional(),
                accountId: z.string().optional(),
                providerId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.source === undefined ? null : { source: v.source }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.providerId === undefined ? null : { providerId: v.providerId }),
                };
            });

    export type Outbound = {
        source?: Source | undefined;
        accountId?: string | undefined;
        providerId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        BankStatementUploadConfiguration
    > = z
        .object({
            source: Source$.optional(),
            accountId: z.string().optional(),
            providerId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.providerId === undefined ? null : { providerId: v.providerId }),
            };
        });
}
