/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

/**
 * Only returned for transactions. For accounts, there is nothing returned.
 */
export type DataIntegrityAmounts = {
    /**
     * Lowest value of transaction set.
     */
    min?: Decimal$ | number | undefined;
    /**
     * Highest value of transaction set.
     */
    max?: Decimal$ | number | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
};

/** @internal */
export namespace DataIntegrityAmounts$ {
    export type Inbound = {
        min?: number | undefined;
        max?: number | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegrityAmounts, z.ZodTypeDef, Inbound> = z
        .object({
            min: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            max: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.min === undefined ? null : { min: v.min }),
                ...(v.max === undefined ? null : { max: v.max }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        min?: number | undefined;
        max?: number | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegrityAmounts> = z
        .object({
            min: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            max: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.min === undefined ? null : { min: v.min }),
                ...(v.max === undefined ? null : { max: v.max }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}
