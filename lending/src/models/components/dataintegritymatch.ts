/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DataIntegrityMatch = {
    /**
     * ID GUID of the transaction.
     */
    id?: string | undefined;
    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    type?: string | undefined;
    /**
     * ID GUID representing the connection of the accounting or banking platform.
     */
    connectionId?: string | undefined;
    /**
     * The date of the transaction.
     */
    date?: string | undefined;
    /**
     * The transaction description.
     */
    description?: string | undefined;
    /**
     * The transaction value.
     */
    amount?: string | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
};

/** @internal */
export namespace DataIntegrityMatch$ {
    export type Inbound = {
        id?: string | undefined;
        type?: string | undefined;
        connectionId?: string | undefined;
        date?: string | undefined;
        description?: string | undefined;
        amount?: string | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegrityMatch, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: z.string().optional(),
            connectionId: z.string().optional(),
            date: z.string().optional(),
            description: z.string().optional(),
            amount: z.string().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: string | undefined;
        connectionId?: string | undefined;
        date?: string | undefined;
        description?: string | undefined;
        amount?: string | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegrityMatch> = z
        .object({
            id: z.string().optional(),
            type: z.string().optional(),
            connectionId: z.string().optional(),
            date: z.string().optional(),
            description: z.string().optional(),
            amount: z.string().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}
