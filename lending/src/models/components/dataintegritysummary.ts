/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataIntegrityByAmount, DataIntegrityByAmount$ } from "./dataintegritybyamount";
import { DataIntegrityByCount, DataIntegrityByCount$ } from "./dataintegritybycount";
import * as z from "zod";

export type DataIntegritySummary = {
    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    type?: string | undefined;
    byAmount?: DataIntegrityByAmount | undefined;
    byCount?: DataIntegrityByCount | undefined;
};

/** @internal */
export namespace DataIntegritySummary$ {
    export type Inbound = {
        type?: string | undefined;
        byAmount?: DataIntegrityByAmount$.Inbound | undefined;
        byCount?: DataIntegrityByCount$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegritySummary, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().optional(),
            byAmount: DataIntegrityByAmount$.inboundSchema.optional(),
            byCount: DataIntegrityByCount$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.byAmount === undefined ? null : { byAmount: v.byAmount }),
                ...(v.byCount === undefined ? null : { byCount: v.byCount }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
        byAmount?: DataIntegrityByAmount$.Outbound | undefined;
        byCount?: DataIntegrityByCount$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegritySummary> = z
        .object({
            type: z.string().optional(),
            byAmount: DataIntegrityByAmount$.outboundSchema.optional(),
            byCount: DataIntegrityByCount$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.byAmount === undefined ? null : { byAmount: v.byAmount }),
                ...(v.byCount === undefined ? null : { byCount: v.byCount }),
            };
        });
}
