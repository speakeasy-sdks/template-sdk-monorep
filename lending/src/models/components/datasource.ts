/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Accounts, Accounts$ } from "./accounts";
import * as z from "zod";

export type DataSource = {
    /**
     * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
     */
    accounts?: Array<Accounts> | undefined;
};

/** @internal */
export namespace DataSource$ {
    export type Inbound = {
        accounts?: Array<Accounts$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<DataSource, z.ZodTypeDef, Inbound> = z
        .object({
            accounts: z.array(Accounts$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
            };
        });

    export type Outbound = {
        accounts?: Array<Accounts$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataSource> = z
        .object({
            accounts: z.array(Accounts$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accounts === undefined ? null : { accounts: v.accounts }),
            };
        });
}
