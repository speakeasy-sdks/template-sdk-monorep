/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountRef, AccountRef$ } from "./accountref";
import { PropertieItemRef, PropertieItemRef$ } from "./propertieitemref";
import { TaxRateRef, TaxRateRef$ } from "./taxrateref";
import { Tracking, Tracking$ } from "./tracking";
import { TrackingCategoryRef, TrackingCategoryRef$ } from "./trackingcategoryref";
import * as z from "zod";

export type DirectCostLineItem = {
    /**
     * Friendly name of the goods or services.
     */
    description?: string | null | undefined;
    /**
     * Price of each unit of goods or services.
     *
     * @remarks
     * Note: If the platform does not provide this information, the unit amount will be mapped to the total amount.
     */
    unitAmount: Decimal$ | number;
    /**
     * Number of units of goods or services received.
     *
     * @remarks
     *
     * Note: If the platform does not provide this information, the quantity will be mapped as 1.
     */
    quantity: Decimal$ | number;
    /**
     * Discount amount for the line before tax.
     */
    discountAmount?: Decimal$ | number | null | undefined;
    /**
     * Discount percentage for the line before tax.
     */
    discountPercentage?: Decimal$ | number | null | undefined;
    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    subTotal?: Decimal$ | number | null | undefined;
    /**
     * Amount of tax for the line.
     */
    taxAmount?: Decimal$ | number | null | undefined;
    /**
     * Total amount of the line, including tax.
     */
    totalAmount?: Decimal$ | number | null | undefined;
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    accountRef?: AccountRef | undefined;
    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     *
     * @remarks
     *
     * Found on:
     *
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    taxRateRef?: TaxRateRef | undefined;
    /**
     * Reference to the item the line is linked to.
     */
    itemRef?: PropertieItemRef | undefined;
    /**
     * Collection of categories against which this direct cost is tracked.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    trackingCategoryRefs?: Array<TrackingCategoryRef> | null | undefined;
    tracking?: Tracking | undefined;
};

/** @internal */
export namespace DirectCostLineItem$ {
    export type Inbound = {
        description?: string | null | undefined;
        unitAmount: number;
        quantity: number;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        subTotal?: number | null | undefined;
        taxAmount?: number | null | undefined;
        totalAmount?: number | null | undefined;
        accountRef?: AccountRef$.Inbound | undefined;
        taxRateRef?: TaxRateRef$.Inbound | undefined;
        itemRef?: PropertieItemRef$.Inbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Inbound> | null | undefined;
        tracking?: Tracking$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DirectCostLineItem, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.nullable(z.string()).optional(),
            unitAmount: z.number().transform((v) => new Decimal$(v)),
            quantity: z.number().transform((v) => new Decimal$(v)),
            discountAmount: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            discountPercentage: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            subTotal: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            taxAmount: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            totalAmount: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            accountRef: AccountRef$.inboundSchema.optional(),
            taxRateRef: TaxRateRef$.inboundSchema.optional(),
            itemRef: PropertieItemRef$.inboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.inboundSchema))
                .optional(),
            tracking: Tracking$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                unitAmount: v.unitAmount,
                quantity: v.quantity,
                ...(v.discountAmount === undefined ? null : { discountAmount: v.discountAmount }),
                ...(v.discountPercentage === undefined
                    ? null
                    : { discountPercentage: v.discountPercentage }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.taxRateRef === undefined ? null : { taxRateRef: v.taxRateRef }),
                ...(v.itemRef === undefined ? null : { itemRef: v.itemRef }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
                ...(v.tracking === undefined ? null : { tracking: v.tracking }),
            };
        });

    export type Outbound = {
        description?: string | null | undefined;
        unitAmount: number;
        quantity: number;
        discountAmount?: number | null | undefined;
        discountPercentage?: number | null | undefined;
        subTotal?: number | null | undefined;
        taxAmount?: number | null | undefined;
        totalAmount?: number | null | undefined;
        accountRef?: AccountRef$.Outbound | undefined;
        taxRateRef?: TaxRateRef$.Outbound | undefined;
        itemRef?: PropertieItemRef$.Outbound | undefined;
        trackingCategoryRefs?: Array<TrackingCategoryRef$.Outbound> | null | undefined;
        tracking?: Tracking$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DirectCostLineItem> = z
        .object({
            description: z.nullable(z.string()).optional(),
            unitAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            quantity: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            discountAmount: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            discountPercentage: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            subTotal: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            taxAmount: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            totalAmount: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            accountRef: AccountRef$.outboundSchema.optional(),
            taxRateRef: TaxRateRef$.outboundSchema.optional(),
            itemRef: PropertieItemRef$.outboundSchema.optional(),
            trackingCategoryRefs: z
                .nullable(z.array(TrackingCategoryRef$.outboundSchema))
                .optional(),
            tracking: Tracking$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                unitAmount: v.unitAmount,
                quantity: v.quantity,
                ...(v.discountAmount === undefined ? null : { discountAmount: v.discountAmount }),
                ...(v.discountPercentage === undefined
                    ? null
                    : { discountPercentage: v.discountPercentage }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.taxRateRef === undefined ? null : { taxRateRef: v.taxRateRef }),
                ...(v.itemRef === undefined ? null : { itemRef: v.itemRef }),
                ...(v.trackingCategoryRefs === undefined
                    ? null
                    : { trackingCategoryRefs: v.trackingCategoryRefs }),
                ...(v.tracking === undefined ? null : { tracking: v.tracking }),
            };
        });
}
