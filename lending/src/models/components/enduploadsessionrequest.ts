/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
 */
export enum EndUploadSessionRequestStatus {
    Cancel = "Cancel",
    Process = "Process",
}

export type EndUploadSessionRequest = {
    /**
     * An indicator to cancel the dataset processing or trigger ingestion and enrichment of data.
     */
    status?: EndUploadSessionRequestStatus | undefined;
};

/** @internal */
export const EndUploadSessionRequestStatus$ = z.nativeEnum(EndUploadSessionRequestStatus);

/** @internal */
export namespace EndUploadSessionRequest$ {
    export type Inbound = {
        status?: EndUploadSessionRequestStatus | undefined;
    };

    export const inboundSchema: z.ZodType<EndUploadSessionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            status: EndUploadSessionRequestStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        status?: EndUploadSessionRequestStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EndUploadSessionRequest> = z
        .object({
            status: EndUploadSessionRequestStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
