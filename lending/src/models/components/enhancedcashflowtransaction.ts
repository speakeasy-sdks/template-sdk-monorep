/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountRef, AccountRef$ } from "./accountref";
import { SourceRef, SourceRef$ } from "./sourceref";
import { TransactionCategory, TransactionCategory$ } from "./transactioncategory";
import * as z from "zod";

export type EnhancedCashFlowTransaction = {
    /**
     * The unique identifier of the bank transaction.
     */
    id?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    date?: string | undefined;
    /**
     * The description of the bank transaction.
     */
    description?: string | undefined;
    /**
     * The bank transaction amount.
     */
    amount?: Decimal$ | number | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    transactionCategory?: TransactionCategory | undefined;
    /**
     * Returns the payment processor responsible for the transaction.
     */
    platformName?: string | undefined;
    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    sourceRef?: SourceRef | undefined;
    /**
     * An account reference containing the account id and name.
     */
    accountRef?: AccountRef | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    modifiedDate?: string | undefined;
};

/** @internal */
export namespace EnhancedCashFlowTransaction$ {
    export type Inbound = {
        id?: string | undefined;
        date?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        transactionCategory?: TransactionCategory$.Inbound | undefined;
        platformName?: string | undefined;
        sourceRef?: SourceRef$.Inbound | undefined;
        accountRef?: AccountRef$.Inbound | undefined;
        modifiedDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EnhancedCashFlowTransaction, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            date: z.string().optional(),
            description: z.string().optional(),
            amount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            currency: z.string().optional(),
            transactionCategory: TransactionCategory$.inboundSchema.optional(),
            platformName: z.string().optional(),
            sourceRef: SourceRef$.inboundSchema.optional(),
            accountRef: AccountRef$.inboundSchema.optional(),
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.transactionCategory === undefined
                    ? null
                    : { transactionCategory: v.transactionCategory }),
                ...(v.platformName === undefined ? null : { platformName: v.platformName }),
                ...(v.sourceRef === undefined ? null : { sourceRef: v.sourceRef }),
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        date?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        transactionCategory?: TransactionCategory$.Outbound | undefined;
        platformName?: string | undefined;
        sourceRef?: SourceRef$.Outbound | undefined;
        accountRef?: AccountRef$.Outbound | undefined;
        modifiedDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EnhancedCashFlowTransaction> = z
        .object({
            id: z.string().optional(),
            date: z.string().optional(),
            description: z.string().optional(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            currency: z.string().optional(),
            transactionCategory: TransactionCategory$.outboundSchema.optional(),
            platformName: z.string().optional(),
            sourceRef: SourceRef$.outboundSchema.optional(),
            accountRef: AccountRef$.outboundSchema.optional(),
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.transactionCategory === undefined
                    ? null
                    : { transactionCategory: v.transactionCategory }),
                ...(v.platformName === undefined ? null : { platformName: v.platformName }),
                ...(v.sourceRef === undefined ? null : { sourceRef: v.sourceRef }),
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });
}
