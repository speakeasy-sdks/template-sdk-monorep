/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataSource, DataSource$ } from "./datasource";
import { EnhancedCashFlowItem, EnhancedCashFlowItem$ } from "./enhancedcashflowitem";
import { ReportInfo, ReportInfo$ } from "./reportinfo";
import * as z from "zod";

/**
 * > **Categorization engine**
 *
 * @remarks
 * >
 * > The categorization engine uses machine learning and has been fully trained against Plaid and TrueLayer banking data sources. It is not fully trained against the Basiq banking data source.
 *
 * The Enhanced Cash Flow Transactions endpoint provides a fully categorized list of banking transactions for a company. Accounts and transaction data are obtained from the company's banking data sources.
 */
export type EnhancedCashFlowTransactions = {
    /**
     * Report additional information, which is specific to Lending API reports.
     */
    reportInfo?: ReportInfo | undefined;
    dataSources?: Array<DataSource> | undefined;
    reportItems?: Array<EnhancedCashFlowItem> | undefined;
};

/** @internal */
export namespace EnhancedCashFlowTransactions$ {
    export type Inbound = {
        reportInfo?: ReportInfo$.Inbound | undefined;
        dataSources?: Array<DataSource$.Inbound> | undefined;
        reportItems?: Array<EnhancedCashFlowItem$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<EnhancedCashFlowTransactions, z.ZodTypeDef, Inbound> = z
        .object({
            reportInfo: ReportInfo$.inboundSchema.optional(),
            dataSources: z.array(DataSource$.inboundSchema).optional(),
            reportItems: z.array(EnhancedCashFlowItem$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.dataSources === undefined ? null : { dataSources: v.dataSources }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
            };
        });

    export type Outbound = {
        reportInfo?: ReportInfo$.Outbound | undefined;
        dataSources?: Array<DataSource$.Outbound> | undefined;
        reportItems?: Array<EnhancedCashFlowItem$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EnhancedCashFlowTransactions> = z
        .object({
            reportInfo: ReportInfo$.outboundSchema.optional(),
            dataSources: z.array(DataSource$.outboundSchema).optional(),
            reportItems: z.array(EnhancedCashFlowItem$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.dataSources === undefined ? null : { dataSources: v.dataSources }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
            };
        });
}
