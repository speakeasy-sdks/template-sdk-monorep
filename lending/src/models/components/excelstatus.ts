/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ExcelReportTypes, ExcelReportTypes$ } from "./excelreporttypes";
import * as z from "zod";

export type ExcelStatus = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    lastGenerated?: string | undefined;
    /**
     * When true, the request was successful and the report is being generated. If false, the request was unsuccessful and the report is not being generated.
     */
    inProgress?: boolean | undefined;
    /**
     * The date and time of when a successful request was queued for the most recent report.
     */
    queued?: string | undefined;
    /**
     * True if the requested report was successfully queued and false if the requested report was not able to be queued.
     */
    success?: boolean | undefined;
    /**
     * Error details in case the report generation request was unsuccessful.
     */
    errorMessage?: string | undefined;
    /**
     * A unique ID generated for this request.
     */
    lastInvocationId?: string | undefined;
    /**
     * The type of the report requested in the query string.
     */
    reportType?: ExcelReportTypes | undefined;
    /**
     * The file size in Bytes is populated upon successful generation of the report.
     */
    fileSize?: number | null | undefined;
};

/** @internal */
export namespace ExcelStatus$ {
    export type Inbound = {
        lastGenerated?: string | undefined;
        inProgress?: boolean | undefined;
        queued?: string | undefined;
        success?: boolean | undefined;
        errorMessage?: string | undefined;
        lastInvocationId?: string | undefined;
        reportType?: ExcelReportTypes | undefined;
        fileSize?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<ExcelStatus, z.ZodTypeDef, Inbound> = z
        .object({
            lastGenerated: z.string().optional(),
            inProgress: z.boolean().optional(),
            queued: z.string().optional(),
            success: z.boolean().optional(),
            errorMessage: z.string().optional(),
            lastInvocationId: z.string().optional(),
            reportType: ExcelReportTypes$.optional(),
            fileSize: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastGenerated === undefined ? null : { lastGenerated: v.lastGenerated }),
                ...(v.inProgress === undefined ? null : { inProgress: v.inProgress }),
                ...(v.queued === undefined ? null : { queued: v.queued }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.lastInvocationId === undefined
                    ? null
                    : { lastInvocationId: v.lastInvocationId }),
                ...(v.reportType === undefined ? null : { reportType: v.reportType }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
            };
        });

    export type Outbound = {
        lastGenerated?: string | undefined;
        inProgress?: boolean | undefined;
        queued?: string | undefined;
        success?: boolean | undefined;
        errorMessage?: string | undefined;
        lastInvocationId?: string | undefined;
        reportType?: ExcelReportTypes | undefined;
        fileSize?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExcelStatus> = z
        .object({
            lastGenerated: z.string().optional(),
            inProgress: z.boolean().optional(),
            queued: z.string().optional(),
            success: z.boolean().optional(),
            errorMessage: z.string().optional(),
            lastInvocationId: z.string().optional(),
            reportType: ExcelReportTypes$.optional(),
            fileSize: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastGenerated === undefined ? null : { lastGenerated: v.lastGenerated }),
                ...(v.inProgress === undefined ? null : { inProgress: v.inProgress }),
                ...(v.queued === undefined ? null : { queued: v.queued }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.lastInvocationId === undefined
                    ? null
                    : { lastInvocationId: v.lastInvocationId }),
                ...(v.reportType === undefined ? null : { reportType: v.reportType }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
            };
        });
}
