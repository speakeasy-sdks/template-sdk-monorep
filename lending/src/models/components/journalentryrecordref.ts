/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Name of underlying data type.
 */
export enum JournalEntryRecordRefDataType {
    BankTransactions = "bankTransactions",
    BillCreditNotes = "billCreditNotes",
    BillPayments = "billPayments",
    Bills = "bills",
    CreditNotes = "creditNotes",
    DirectCosts = "directCosts",
    DirectIncomes = "directIncomes",
    Invoices = "invoices",
    JournalEntries = "journalEntries",
    Payments = "payments",
    Transfers = "transfers",
}

/**
 * Links a journal entry to the underlying record that created it.
 */
export type JournalEntryRecordRef = {
    /**
     * 'id' of the underlying record or data type.
     */
    id?: string | undefined;
    /**
     * Name of underlying data type.
     */
    dataType?: JournalEntryRecordRefDataType | undefined;
};

/** @internal */
export const JournalEntryRecordRefDataType$ = z.nativeEnum(JournalEntryRecordRefDataType);

/** @internal */
export namespace JournalEntryRecordRef$ {
    export type Inbound = {
        id?: string | undefined;
        dataType?: JournalEntryRecordRefDataType | undefined;
    };

    export const inboundSchema: z.ZodType<JournalEntryRecordRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            dataType: JournalEntryRecordRefDataType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        dataType?: JournalEntryRecordRefDataType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JournalEntryRecordRef> = z
        .object({
            id: z.string().optional(),
            dataType: JournalEntryRecordRefDataType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });
}
