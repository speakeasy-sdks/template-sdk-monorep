/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type LendingCustomerRef = {
    /**
     * `id` from the Customers data type.
     */
    id?: string | undefined;
    /**
     * `customerName` from the Customer data type.
     */
    customerName?: string | null | undefined;
};

/** @internal */
export namespace LendingCustomerRef$ {
    export type Inbound = {
        id?: string | undefined;
        customerName?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<LendingCustomerRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            customerName: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerName === undefined ? null : { customerName: v.customerName }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        customerName?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LendingCustomerRef> = z
        .object({
            id: z.string().optional(),
            customerName: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerName === undefined ? null : { customerName: v.customerName }),
            };
        });
}
