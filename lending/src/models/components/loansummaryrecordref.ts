/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    LoanSummaryIntegrationType,
    LoanSummaryIntegrationType$,
} from "./loansummaryintegrationtype";
import { LoanSummaryRecordRefType, LoanSummaryRecordRefType$ } from "./loansummaryrecordreftype";
import * as z from "zod";

export type LoanSummaryRecordRef = {
    /**
     * The id of the object being referred to.
     */
    id?: string | undefined;
    /**
     * The dataConnectionId the object being referred to is associated with.
     */
    dataConnectionId?: string | undefined;
    /**
     * The integration type begin referred to.
     */
    integrationType?: LoanSummaryIntegrationType | undefined;
    /**
     * The datatype being referred to.
     */
    recordRefType?: LoanSummaryRecordRefType | undefined;
};

/** @internal */
export namespace LoanSummaryRecordRef$ {
    export type Inbound = {
        id?: string | undefined;
        dataConnectionId?: string | undefined;
        integrationType?: LoanSummaryIntegrationType | undefined;
        recordRefType?: LoanSummaryRecordRefType | undefined;
    };

    export const inboundSchema: z.ZodType<LoanSummaryRecordRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            dataConnectionId: z.string().optional(),
            integrationType: LoanSummaryIntegrationType$.optional(),
            recordRefType: LoanSummaryRecordRefType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataConnectionId === undefined
                    ? null
                    : { dataConnectionId: v.dataConnectionId }),
                ...(v.integrationType === undefined
                    ? null
                    : { integrationType: v.integrationType }),
                ...(v.recordRefType === undefined ? null : { recordRefType: v.recordRefType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        dataConnectionId?: string | undefined;
        integrationType?: LoanSummaryIntegrationType | undefined;
        recordRefType?: LoanSummaryRecordRefType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoanSummaryRecordRef> = z
        .object({
            id: z.string().optional(),
            dataConnectionId: z.string().optional(),
            integrationType: LoanSummaryIntegrationType$.optional(),
            recordRefType: LoanSummaryRecordRefType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataConnectionId === undefined
                    ? null
                    : { dataConnectionId: v.dataConnectionId }),
                ...(v.integrationType === undefined
                    ? null
                    : { integrationType: v.integrationType }),
                ...(v.recordRefType === undefined ? null : { recordRefType: v.recordRefType }),
            };
        });
}
