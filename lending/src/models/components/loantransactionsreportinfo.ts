/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type LoanTransactionsReportInfo = {
    /**
     * The page number.
     */
    pageNumber?: number | undefined;
    /**
     * Queried page size.
     */
    pageSize?: number | undefined;
    /**
     * The total number of transactions returned.
     */
    totalResults?: number | undefined;
    /**
     * The name of the report.
     */
    reportName?: string | undefined;
    /**
     * Name of the company queried.
     */
    companyName?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    generatedDate?: string | undefined;
};

/** @internal */
export namespace LoanTransactionsReportInfo$ {
    export type Inbound = {
        pageNumber?: number | undefined;
        pageSize?: number | undefined;
        totalResults?: number | undefined;
        reportName?: string | undefined;
        companyName?: string | undefined;
        generatedDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<LoanTransactionsReportInfo, z.ZodTypeDef, Inbound> = z
        .object({
            pageNumber: z.number().int().optional(),
            pageSize: z.number().int().optional(),
            totalResults: z.number().int().optional(),
            reportName: z.string().optional(),
            companyName: z.string().optional(),
            generatedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.pageNumber === undefined ? null : { pageNumber: v.pageNumber }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.totalResults === undefined ? null : { totalResults: v.totalResults }),
                ...(v.reportName === undefined ? null : { reportName: v.reportName }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.generatedDate === undefined ? null : { generatedDate: v.generatedDate }),
            };
        });

    export type Outbound = {
        pageNumber?: number | undefined;
        pageSize?: number | undefined;
        totalResults?: number | undefined;
        reportName?: string | undefined;
        companyName?: string | undefined;
        generatedDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoanTransactionsReportInfo> = z
        .object({
            pageNumber: z.number().int().optional(),
            pageSize: z.number().int().optional(),
            totalResults: z.number().int().optional(),
            reportName: z.string().optional(),
            companyName: z.string().optional(),
            generatedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.pageNumber === undefined ? null : { pageNumber: v.pageNumber }),
                ...(v.pageSize === undefined ? null : { pageSize: v.pageSize }),
                ...(v.totalResults === undefined ? null : { totalResults: v.totalResults }),
                ...(v.reportName === undefined ? null : { reportName: v.reportName }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.generatedDate === undefined ? null : { generatedDate: v.generatedDate }),
            };
        });
}
