/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type OrderDiscountAllocation = {
    /**
     * Name of the discount in the commerce or point of sale platform.
     */
    name?: string | undefined;
    /**
     * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
     */
    totalAmount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace OrderDiscountAllocation$ {
    export type Inbound = {
        name?: string | undefined;
        totalAmount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<OrderDiscountAllocation, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        totalAmount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderDiscountAllocation> = z
        .object({
            name: z.string().optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
            };
        });
}
