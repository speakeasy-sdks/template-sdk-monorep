/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { ProductInventoryLocation, ProductInventoryLocation$ } from "./productinventorylocation";
import * as z from "zod";

/**
 * Information about the total inventory as well as the locations inventory is in.
 */
export type ProductInventory = {
    /**
     * The total quantity of stock remaining across locations.
     */
    totalQuantity?: Decimal$ | number | null | undefined;
    locations?: Array<ProductInventoryLocation> | undefined;
};

/** @internal */
export namespace ProductInventory$ {
    export type Inbound = {
        totalQuantity?: number | null | undefined;
        locations?: Array<ProductInventoryLocation$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ProductInventory, z.ZodTypeDef, Inbound> = z
        .object({
            totalQuantity: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            locations: z.array(ProductInventoryLocation$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.totalQuantity === undefined ? null : { totalQuantity: v.totalQuantity }),
                ...(v.locations === undefined ? null : { locations: v.locations }),
            };
        });

    export type Outbound = {
        totalQuantity?: number | null | undefined;
        locations?: Array<ProductInventoryLocation$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductInventory> = z
        .object({
            totalQuantity: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            locations: z.array(ProductInventoryLocation$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.totalQuantity === undefined ? null : { totalQuantity: v.totalQuantity }),
                ...(v.locations === undefined ? null : { locations: v.locations }),
            };
        });
}
