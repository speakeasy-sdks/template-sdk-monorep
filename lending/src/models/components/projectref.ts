/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ProjectRef = {
    /**
     * Unique identifier to the project reference.
     */
    id: string;
    /**
     * The project's name.
     */
    name?: string | null | undefined;
};

/** @internal */
export namespace ProjectRef$ {
    export type Inbound = {
        id: string;
        name?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<ProjectRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            name: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        id: string;
        name?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProjectRef> = z
        .object({
            id: z.string(),
            name: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
