/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PropertieDataType, PropertieDataType$ } from "./propertiedatatype";
import * as z from "zod";

export type PushOperationRef = {
    /**
     * Unique identifier for a push operation.
     */
    id?: string | undefined;
    /**
     * Available data types
     */
    dataType?: PropertieDataType | undefined;
};

/** @internal */
export namespace PushOperationRef$ {
    export type Inbound = {
        id?: string | undefined;
        dataType?: PropertieDataType | undefined;
    };

    export const inboundSchema: z.ZodType<PushOperationRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            dataType: PropertieDataType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        dataType?: PropertieDataType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PushOperationRef> = z
        .object({
            id: z.string().optional(),
            dataType: PropertieDataType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });
}
