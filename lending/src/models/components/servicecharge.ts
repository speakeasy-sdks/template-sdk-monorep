/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { ServiceChargeType, ServiceChargeType$ } from "./servicechargetype";
import { TaxComponentAllocation, TaxComponentAllocation$ } from "./taxcomponentallocation";
import * as z from "zod";

export type ServiceCharge = {
    /**
     * Service charges for this order.
     */
    description?: string | undefined;
    /**
     * Total amount of the service charge, including tax.
     */
    totalAmount?: Decimal$ | number | undefined;
    /**
     * Percentage rate (from 0 to 100) of any tax applied to the service charge.
     */
    taxPercentage?: Decimal$ | number | undefined;
    /**
     * Amount of the service charge that is tax.
     */
    taxAmount?: Decimal$ | number | undefined;
    /**
     * Taxes breakdown as applied to service charges.
     */
    taxes?: Array<TaxComponentAllocation> | undefined;
    /**
     * The number of times the charge is charged.
     */
    quantity?: number | undefined;
    /**
     * The type of the service charge.
     */
    type?: ServiceChargeType | undefined;
};

/** @internal */
export namespace ServiceCharge$ {
    export type Inbound = {
        description?: string | undefined;
        totalAmount?: number | undefined;
        taxPercentage?: number | undefined;
        taxAmount?: number | undefined;
        taxes?: Array<TaxComponentAllocation$.Inbound> | undefined;
        quantity?: number | undefined;
        type?: ServiceChargeType | undefined;
    };

    export const inboundSchema: z.ZodType<ServiceCharge, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            taxPercentage: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            taxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            taxes: z.array(TaxComponentAllocation$.inboundSchema).optional(),
            quantity: z.number().int().optional(),
            type: ServiceChargeType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.taxPercentage === undefined ? null : { taxPercentage: v.taxPercentage }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxes === undefined ? null : { taxes: v.taxes }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        totalAmount?: number | undefined;
        taxPercentage?: number | undefined;
        taxAmount?: number | undefined;
        taxes?: Array<TaxComponentAllocation$.Outbound> | undefined;
        quantity?: number | undefined;
        type?: ServiceChargeType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServiceCharge> = z
        .object({
            description: z.string().optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            taxPercentage: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            taxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            taxes: z.array(TaxComponentAllocation$.outboundSchema).optional(),
            quantity: z.number().int().optional(),
            type: ServiceChargeType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.taxPercentage === undefined ? null : { taxPercentage: v.taxPercentage }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.taxes === undefined ? null : { taxes: v.taxes }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
