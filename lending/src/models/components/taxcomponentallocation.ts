/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { TaxComponentRef, TaxComponentRef$ } from "./taxcomponentref";
import * as z from "zod";

export type TaxComponentAllocation = {
    /**
     * Taxes rates reference object depending on the rates being available on source commerce package.
     */
    taxComponentRef?: TaxComponentRef | undefined;
    /**
     * Tax amount on order line sale as available from source commerce platform.
     */
    rate?: Decimal$ | number | null | undefined;
};

/** @internal */
export namespace TaxComponentAllocation$ {
    export type Inbound = {
        taxComponentRef?: TaxComponentRef$.Inbound | undefined;
        rate?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<TaxComponentAllocation, z.ZodTypeDef, Inbound> = z
        .object({
            taxComponentRef: TaxComponentRef$.inboundSchema.optional(),
            rate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxComponentRef === undefined
                    ? null
                    : { taxComponentRef: v.taxComponentRef }),
                ...(v.rate === undefined ? null : { rate: v.rate }),
            };
        });

    export type Outbound = {
        taxComponentRef?: TaxComponentRef$.Outbound | undefined;
        rate?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaxComponentAllocation> = z
        .object({
            taxComponentRef: TaxComponentRef$.outboundSchema.optional(),
            rate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxComponentRef === undefined
                    ? null
                    : { taxComponentRef: v.taxComponentRef }),
                ...(v.rate === undefined ? null : { rate: v.rate }),
            };
        });
}
