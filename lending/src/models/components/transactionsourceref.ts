/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TransactionSourceType, TransactionSourceType$ } from "./transactionsourcetype";
import * as z from "zod";

export type TransactionSourceRef = {
    /**
     * The unique identitifer of the record being referenced
     */
    id: string;
    /**
     * The type of source the transaction arose.
     */
    type: TransactionSourceType;
};

/** @internal */
export namespace TransactionSourceRef$ {
    export type Inbound = {
        id: string;
        type: TransactionSourceType;
    };

    export const inboundSchema: z.ZodType<TransactionSourceRef, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            type: TransactionSourceType$,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
            };
        });

    export type Outbound = {
        id: string;
        type: TransactionSourceType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionSourceRef> = z
        .object({
            id: z.string(),
            type: TransactionSourceType$,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
            };
        });
}
