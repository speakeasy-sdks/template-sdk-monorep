/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { AccountRef, AccountRef$ } from "./accountref";
import * as z from "zod";

/**
 * Account details of the account sending or receiving the transfer.
 */
export type TransferAccount = {
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    accountRef?: AccountRef | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * The amount transferred between accounts.
     */
    amount?: Decimal$ | number | undefined;
};

/** @internal */
export namespace TransferAccount$ {
    export type Inbound = {
        accountRef?: AccountRef$.Inbound | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
    };

    export const inboundSchema: z.ZodType<TransferAccount, z.ZodTypeDef, Inbound> = z
        .object({
            accountRef: AccountRef$.inboundSchema.optional(),
            currency: z.string().optional(),
            amount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
            };
        });

    export type Outbound = {
        accountRef?: AccountRef$.Outbound | undefined;
        currency?: string | undefined;
        amount?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferAccount> = z
        .object({
            accountRef: AccountRef$.outboundSchema.optional(),
            currency: z.string().optional(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountRef === undefined ? null : { accountRef: v.accountRef }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
            };
        });
}
