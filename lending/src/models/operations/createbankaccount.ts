/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateBankAccountRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    accountingBankAccount?: components.AccountingBankAccount | null | undefined;
};

export type CreateBankAccountResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingCreateBankAccountResponse?:
        | components.AccountingCreateBankAccountResponse
        | undefined;
};

/** @internal */
export namespace CreateBankAccountRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete?: boolean | undefined;
        AccountingBankAccount?: components.AccountingBankAccount$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBankAccountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
            allowSyncOnPushComplete: z.boolean().default(true),
            AccountingBankAccount: z
                .nullable(components.AccountingBankAccount$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                ...(v.AccountingBankAccount === undefined
                    ? null
                    : { accountingBankAccount: v.AccountingBankAccount }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete: boolean;
        AccountingBankAccount?: components.AccountingBankAccount$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankAccountRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
            allowSyncOnPushComplete: z.boolean().default(true),
            accountingBankAccount: z
                .nullable(components.AccountingBankAccount$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                ...(v.accountingBankAccount === undefined
                    ? null
                    : { AccountingBankAccount: v.accountingBankAccount }),
            };
        });
}

/** @internal */
export namespace CreateBankAccountResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingCreateBankAccountResponse?:
            | components.AccountingCreateBankAccountResponse$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBankAccountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingCreateBankAccountResponse:
                components.AccountingCreateBankAccountResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingCreateBankAccountResponse === undefined
                    ? null
                    : {
                          accountingCreateBankAccountResponse:
                              v.AccountingCreateBankAccountResponse,
                      }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingCreateBankAccountResponse?:
            | components.AccountingCreateBankAccountResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankAccountResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingCreateBankAccountResponse:
                components.AccountingCreateBankAccountResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingCreateBankAccountResponse === undefined
                    ? null
                    : {
                          AccountingCreateBankAccountResponse:
                              v.accountingCreateBankAccountResponse,
                      }),
            };
        });
}
