/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import * as components from "../components";
import * as z from "zod";

export type DownloadExcelReportRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * The type of report you want to generate and download.
     */
    reportType: components.ExcelReportTypes;
};

export type DownloadExcelReportResponse = {
    httpMeta: components.HTTPMetadata;
    body?: Uint8Array | string | undefined;
};

/** @internal */
export namespace DownloadExcelReportRequest$ {
    export type Inbound = {
        companyId: string;
        reportType: components.ExcelReportTypes;
    };

    export const inboundSchema: z.ZodType<DownloadExcelReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            reportType: components.ExcelReportTypes$,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                reportType: v.reportType,
            };
        });

    export type Outbound = {
        companyId: string;
        reportType: components.ExcelReportTypes;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DownloadExcelReportRequest> = z
        .object({
            companyId: z.string(),
            reportType: components.ExcelReportTypes$,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                reportType: v.reportType,
            };
        });
}

/** @internal */
export namespace DownloadExcelReportResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Body?: Uint8Array | string | undefined;
    };

    export const inboundSchema: z.ZodType<DownloadExcelReportResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Body: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Body === undefined ? null : { body: v.Body }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Body?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DownloadExcelReportResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            body: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.body === undefined ? null : { Body: v.body }),
            };
        });
}
