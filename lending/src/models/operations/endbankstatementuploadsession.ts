/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type EndBankStatementUploadSessionRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for the dataset that completed its sync.
     */
    datasetId: string;
    endUploadSessionRequest?: components.EndUploadSessionRequest | undefined;
};

export type EndBankStatementUploadSessionResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace EndBankStatementUploadSessionRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        datasetId: string;
        EndUploadSessionRequest?: components.EndUploadSessionRequest$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        EndBankStatementUploadSessionRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            datasetId: z.string(),
            EndUploadSessionRequest: components.EndUploadSessionRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                datasetId: v.datasetId,
                ...(v.EndUploadSessionRequest === undefined
                    ? null
                    : { endUploadSessionRequest: v.EndUploadSessionRequest }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        datasetId: string;
        EndUploadSessionRequest?: components.EndUploadSessionRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EndBankStatementUploadSessionRequest
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            datasetId: z.string(),
            endUploadSessionRequest: components.EndUploadSessionRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                datasetId: v.datasetId,
                ...(v.endUploadSessionRequest === undefined
                    ? null
                    : { EndUploadSessionRequest: v.endUploadSessionRequest }),
            };
        });
}

/** @internal */
export namespace EndBankStatementUploadSessionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        EndBankStatementUploadSessionResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        EndBankStatementUploadSessionResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
