/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAccountingCashFlowStatementRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Number of months defining the period of interest.
     */
    periodLength: number;
    /**
     * Number of periods with `periodLength` to compare.
     */
    periodsToCompare: number;
    /**
     * The month the report starts from.
     */
    startMonth?: string | undefined;
};

export type GetAccountingCashFlowStatementResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingCashFlowStatement?: components.AccountingCashFlowStatement | undefined;
};

/** @internal */
export namespace GetAccountingCashFlowStatementRequest$ {
    export type Inbound = {
        companyId: string;
        periodLength: number;
        periodsToCompare: number;
        startMonth?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccountingCashFlowStatementRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            companyId: z.string(),
            periodLength: z.number().int(),
            periodsToCompare: z.number().int(),
            startMonth: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                periodLength: v.periodLength,
                periodsToCompare: v.periodsToCompare,
                ...(v.startMonth === undefined ? null : { startMonth: v.startMonth }),
            };
        });

    export type Outbound = {
        companyId: string;
        periodLength: number;
        periodsToCompare: number;
        startMonth?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingCashFlowStatementRequest
    > = z
        .object({
            companyId: z.string(),
            periodLength: z.number().int(),
            periodsToCompare: z.number().int(),
            startMonth: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                periodLength: v.periodLength,
                periodsToCompare: v.periodsToCompare,
                ...(v.startMonth === undefined ? null : { startMonth: v.startMonth }),
            };
        });
}

/** @internal */
export namespace GetAccountingCashFlowStatementResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingCashFlowStatement?: components.AccountingCashFlowStatement$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccountingCashFlowStatementResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingCashFlowStatement:
                components.AccountingCashFlowStatement$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingCashFlowStatement === undefined
                    ? null
                    : { accountingCashFlowStatement: v.AccountingCashFlowStatement }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingCashFlowStatement?: components.AccountingCashFlowStatement$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingCashFlowStatementResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingCashFlowStatement:
                components.AccountingCashFlowStatement$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingCashFlowStatement === undefined
                    ? null
                    : { AccountingCashFlowStatement: v.accountingCashFlowStatement }),
            };
        });
}
