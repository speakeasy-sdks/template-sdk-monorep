/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAccountingJournalEntryRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a journal entry.
     */
    journalEntryId: string;
};

export type GetAccountingJournalEntryResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingJournalEntry?: components.AccountingJournalEntry | null | undefined;
};

/** @internal */
export namespace GetAccountingJournalEntryRequest$ {
    export type Inbound = {
        companyId: string;
        journalEntryId: string;
    };

    export const inboundSchema: z.ZodType<GetAccountingJournalEntryRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                companyId: z.string(),
                journalEntryId: z.string(),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    journalEntryId: v.journalEntryId,
                };
            });

    export type Outbound = {
        companyId: string;
        journalEntryId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingJournalEntryRequest
    > = z
        .object({
            companyId: z.string(),
            journalEntryId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                journalEntryId: v.journalEntryId,
            };
        });
}

/** @internal */
export namespace GetAccountingJournalEntryResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingJournalEntry?: components.AccountingJournalEntry$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccountingJournalEntryResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingJournalEntry: z
                .nullable(components.AccountingJournalEntry$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingJournalEntry === undefined
                    ? null
                    : { accountingJournalEntry: v.AccountingJournalEntry }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingJournalEntry?: components.AccountingJournalEntry$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingJournalEntryResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingJournalEntry: z
                .nullable(components.AccountingJournalEntry$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingJournalEntry === undefined
                    ? null
                    : { AccountingJournalEntry: v.accountingJournalEntry }),
            };
        });
}
