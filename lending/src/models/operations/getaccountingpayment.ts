/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAccountingPaymentRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a payment.
     */
    paymentId: string;
};

export type GetAccountingPaymentResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingPayment?: components.AccountingPayment | null | undefined;
};

/** @internal */
export namespace GetAccountingPaymentRequest$ {
    export type Inbound = {
        companyId: string;
        paymentId: string;
    };

    export const inboundSchema: z.ZodType<GetAccountingPaymentRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            paymentId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                paymentId: v.paymentId,
            };
        });

    export type Outbound = {
        companyId: string;
        paymentId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingPaymentRequest> = z
        .object({
            companyId: z.string(),
            paymentId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                paymentId: v.paymentId,
            };
        });
}

/** @internal */
export namespace GetAccountingPaymentResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingPayment?: components.AccountingPayment$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetAccountingPaymentResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingPayment: z.nullable(components.AccountingPayment$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingPayment === undefined
                    ? null
                    : { accountingPayment: v.AccountingPayment }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingPayment?: components.AccountingPayment$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingPaymentResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingPayment: z.nullable(components.AccountingPayment$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingPayment === undefined
                    ? null
                    : { AccountingPayment: v.accountingPayment }),
            };
        });
}
