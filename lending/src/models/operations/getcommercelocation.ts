/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceLocationRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a location.
     */
    locationId: string;
};

export type GetCommerceLocationResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceLocation?: components.CommerceLocation | null | undefined;
};

/** @internal */
export namespace GetCommerceLocationRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        locationId: string;
    };

    export const inboundSchema: z.ZodType<GetCommerceLocationRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            locationId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                locationId: v.locationId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        locationId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceLocationRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            locationId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                locationId: v.locationId,
            };
        });
}

/** @internal */
export namespace GetCommerceLocationResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceLocation?: components.CommerceLocation$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceLocationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceLocation: z.nullable(components.CommerceLocation$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceLocation === undefined
                    ? null
                    : { commerceLocation: v.CommerceLocation }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceLocation?: components.CommerceLocation$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceLocationResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            commerceLocation: z.nullable(components.CommerceLocation$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.commerceLocation === undefined
                    ? null
                    : { CommerceLocation: v.commerceLocation }),
            };
        });
}
