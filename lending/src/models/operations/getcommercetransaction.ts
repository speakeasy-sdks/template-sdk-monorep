/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceTransactionRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a transaction.
     */
    transactionId: string;
};

export type GetCommerceTransactionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceTransaction?: components.CommerceTransaction | null | undefined;
};

/** @internal */
export namespace GetCommerceTransactionRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        transactionId: string;
    };

    export const inboundSchema: z.ZodType<GetCommerceTransactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            transactionId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                transactionId: v.transactionId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        transactionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceTransactionRequest> =
        z
            .object({
                companyId: z.string(),
                connectionId: z.string(),
                transactionId: z.string(),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                    transactionId: v.transactionId,
                };
            });
}

/** @internal */
export namespace GetCommerceTransactionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceTransaction?: components.CommerceTransaction$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceTransactionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceTransaction: z
                .nullable(components.CommerceTransaction$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceTransaction === undefined
                    ? null
                    : { commerceTransaction: v.CommerceTransaction }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceTransaction?: components.CommerceTransaction$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceTransactionResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                commerceTransaction: z
                    .nullable(components.CommerceTransaction$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.commerceTransaction === undefined
                        ? null
                        : { CommerceTransaction: v.commerceTransaction }),
                };
            });
}
