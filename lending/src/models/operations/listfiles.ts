/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ListFilesRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type ListFilesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    files?: Array<components.FileT> | undefined;
};

/** @internal */
export namespace ListFilesRequest$ {
    export type Inbound = {
        companyId: string;
    };

    export const inboundSchema: z.ZodType<ListFilesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListFilesRequest> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace ListFilesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Files?: Array<components.FileT$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ListFilesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Files: z.array(components.FileT$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Files === undefined ? null : { files: v.Files }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Files?: Array<components.FileT$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListFilesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            files: z.array(components.FileT$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.files === undefined ? null : { Files: v.files }),
            };
        });
}
