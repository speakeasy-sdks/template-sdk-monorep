/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UnlinkConnectionUpdateConnection = {
    /**
     * The current authorization status of the data connection.
     */
    status?: components.DataConnectionStatus | undefined;
};

export type UnlinkConnectionRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    requestBody?: UnlinkConnectionUpdateConnection | undefined;
};

export type UnlinkConnectionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    connection?: components.Connection | undefined;
};

/** @internal */
export namespace UnlinkConnectionUpdateConnection$ {
    export type Inbound = {
        status?: components.DataConnectionStatus | undefined;
    };

    export const inboundSchema: z.ZodType<UnlinkConnectionUpdateConnection, z.ZodTypeDef, Inbound> =
        z
            .object({
                status: components.DataConnectionStatus$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.status === undefined ? null : { status: v.status }),
                };
            });

    export type Outbound = {
        status?: components.DataConnectionStatus | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnlinkConnectionUpdateConnection
    > = z
        .object({
            status: components.DataConnectionStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace UnlinkConnectionRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        RequestBody?: UnlinkConnectionUpdateConnection$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UnlinkConnectionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            RequestBody: z.lazy(() => UnlinkConnectionUpdateConnection$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        RequestBody?: UnlinkConnectionUpdateConnection$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnlinkConnectionRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            requestBody: z.lazy(() => UnlinkConnectionUpdateConnection$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UnlinkConnectionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Connection?: components.Connection$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UnlinkConnectionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Connection: components.Connection$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Connection === undefined ? null : { connection: v.Connection }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Connection?: components.Connection$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnlinkConnectionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            connection: components.Connection$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.connection === undefined ? null : { Connection: v.connection }),
            };
        });
}
