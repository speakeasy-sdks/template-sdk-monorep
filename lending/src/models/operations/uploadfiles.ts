/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UploadFilesRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    fileUpload?: components.FileUpload | undefined;
};

export type UploadFilesResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace UploadFilesRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        FileUpload?: components.FileUpload$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UploadFilesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            FileUpload: components.FileUpload$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.FileUpload === undefined ? null : { fileUpload: v.FileUpload }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        FileUpload?: components.FileUpload$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFilesRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            fileUpload: components.FileUpload$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.fileUpload === undefined ? null : { FileUpload: v.fileUpload }),
            };
        });
}

/** @internal */
export namespace UploadFilesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
    };

    export const inboundSchema: z.ZodType<UploadFilesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFilesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
