/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AccountTransactions } from "./accounttransactions";
import { DirectCosts } from "./directcosts";
import { JournalEntries } from "./journalentries";
import { Journals } from "./journals";
import { Transfers } from "./transfers";

export class Transactions extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _accountTransactions?: AccountTransactions;
    get accountTransactions() {
        return (this._accountTransactions ??= new AccountTransactions(this.options$));
    }

    private _directCosts?: DirectCosts;
    get directCosts() {
        return (this._directCosts ??= new DirectCosts(this.options$));
    }

    private _journalEntries?: JournalEntries;
    get journalEntries() {
        return (this._journalEntries ??= new JournalEntries(this.options$));
    }

    private _journals?: Journals;
    get journals() {
        return (this._journals ??= new Journals(this.options$));
    }

    private _transfers?: Transfers;
    get transfers() {
        return (this._transfers ??= new Transfers(this.options$));
    }
}
