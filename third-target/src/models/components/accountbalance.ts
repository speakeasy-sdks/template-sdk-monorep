/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type AccountBalance = {
    /**
     * The account's current balance
     */
    available?: Decimal$ | number | undefined;
    /**
     * Funds that are not yet available in the balance
     */
    pending?: Decimal$ | number | undefined;
    /**
     * Funds reserved as holdings
     */
    reserved?: any | undefined;
    /**
     * The currency of the account
     */
    currency?: string | undefined;
};

/** @internal */
export namespace AccountBalance$ {
    export type Inbound = {
        available?: number | undefined;
        pending?: number | undefined;
        reserved?: any | undefined;
        currency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AccountBalance, z.ZodTypeDef, Inbound> = z
        .object({
            available: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            pending: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            reserved: z.any().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.available === undefined ? null : { available: v.available }),
                ...(v.pending === undefined ? null : { pending: v.pending }),
                ...(v.reserved === undefined ? null : { reserved: v.reserved }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });

    export type Outbound = {
        available?: number | undefined;
        pending?: number | undefined;
        reserved?: any | undefined;
        currency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountBalance> = z
        .object({
            available: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            pending: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            reserved: z.any().optional(),
            currency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.available === undefined ? null : { available: v.available }),
                ...(v.pending === undefined ? null : { pending: v.pending }),
                ...(v.reserved === undefined ? null : { reserved: v.reserved }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
            };
        });
}
