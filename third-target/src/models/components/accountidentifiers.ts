/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountIdentifierType, AccountIdentifierType$ } from "./accountidentifiertype";
import * as z from "zod";

/**
 * An object containing bank account identification information.
 */
export type AccountIdentifiers = {
    /**
     * Type of account
     */
    type: AccountIdentifierType;
    /**
     * Detailed account category
     */
    subtype?: string | null | undefined;
    /**
     * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
     */
    number?: string | null | undefined;
    /**
     * The local (usually national) routing number for the account.
     *
     * @remarks
     *
     * This is known by different names in different countries:
     * * BSB code (Australia)
     * * routing number (Canada, USA)
     * * sort code (UK)
     */
    bankCode?: string | null | undefined;
    /**
     * The international bank account number (IBAN) for the account, if known.
     */
    iban?: string | null | undefined;
    /**
     * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
     */
    bic?: string | null | undefined;
    /**
     * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
     */
    maskedAccountNumber?: string | null | undefined;
};

/** @internal */
export namespace AccountIdentifiers$ {
    export type Inbound = {
        type: AccountIdentifierType;
        subtype?: string | null | undefined;
        number?: string | null | undefined;
        bankCode?: string | null | undefined;
        iban?: string | null | undefined;
        bic?: string | null | undefined;
        maskedAccountNumber?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<AccountIdentifiers, z.ZodTypeDef, Inbound> = z
        .object({
            type: AccountIdentifierType$,
            subtype: z.nullable(z.string()).optional(),
            number: z.nullable(z.string()).optional(),
            bankCode: z.nullable(z.string()).optional(),
            iban: z.nullable(z.string()).optional(),
            bic: z.nullable(z.string()).optional(),
            maskedAccountNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.subtype === undefined ? null : { subtype: v.subtype }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.bankCode === undefined ? null : { bankCode: v.bankCode }),
                ...(v.iban === undefined ? null : { iban: v.iban }),
                ...(v.bic === undefined ? null : { bic: v.bic }),
                ...(v.maskedAccountNumber === undefined
                    ? null
                    : { maskedAccountNumber: v.maskedAccountNumber }),
            };
        });

    export type Outbound = {
        type: AccountIdentifierType;
        subtype?: string | null | undefined;
        number?: string | null | undefined;
        bankCode?: string | null | undefined;
        iban?: string | null | undefined;
        bic?: string | null | undefined;
        maskedAccountNumber?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountIdentifiers> = z
        .object({
            type: AccountIdentifierType$,
            subtype: z.nullable(z.string()).optional(),
            number: z.nullable(z.string()).optional(),
            bankCode: z.nullable(z.string()).optional(),
            iban: z.nullable(z.string()).optional(),
            bic: z.nullable(z.string()).optional(),
            maskedAccountNumber: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.subtype === undefined ? null : { subtype: v.subtype }),
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.bankCode === undefined ? null : { bankCode: v.bankCode }),
                ...(v.iban === undefined ? null : { iban: v.iban }),
                ...(v.bic === undefined ? null : { bic: v.bic }),
                ...(v.maskedAccountNumber === undefined
                    ? null
                    : { maskedAccountNumber: v.maskedAccountNumber }),
            };
        });
}
