/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CreateBankAccountTransaction,
    CreateBankAccountTransaction$,
} from "./createbankaccounttransaction";
import * as z from "zod";

export type AccountingCreateBankTransactions = {
    /**
     * Unique identifier for a bank account.
     */
    accountId?: string | undefined;
    transactions?: Array<CreateBankAccountTransaction> | undefined;
};

/** @internal */
export namespace AccountingCreateBankTransactions$ {
    export type Inbound = {
        accountId?: string | undefined;
        transactions?: Array<CreateBankAccountTransaction$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingCreateBankTransactions, z.ZodTypeDef, Inbound> =
        z
            .object({
                accountId: z.string().optional(),
                transactions: z.array(CreateBankAccountTransaction$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.transactions === undefined ? null : { transactions: v.transactions }),
                };
            });

    export type Outbound = {
        accountId?: string | undefined;
        transactions?: Array<CreateBankAccountTransaction$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountingCreateBankTransactions
    > = z
        .object({
            accountId: z.string().optional(),
            transactions: z.array(CreateBankAccountTransaction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
            };
        });
}
