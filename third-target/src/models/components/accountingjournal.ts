/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JournalStatus, JournalStatus$ } from "./journalstatus";
import { Metadata, Metadata$ } from "./metadata";
import * as z from "zod";

/**
 * > **Language tip:** For line items, or individual transactions, of a company's financial documents, refer to the [Journal entries](https://docs.codat.io/lending-api#/schemas/JournalEntry) data type
 *
 * @remarks
 *
 * > View the coverage for journals in the <a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&dataType=journals" target="_blank">Data coverage explorer</a>.
 *
 * ## Overview
 *
 * In accounting software, journals are used to record all the financial transactions of a company. Each transaction in a journal is represented by a separate [journal entry](https://docs.codat.io/lending-api#/schemas/JournalEntry). These entries are used to create the general ledger, which is then used to create the financial statements of a business.
 *
 * When a company records all their transactions in a single journal, it can become large and difficult to maintain and track. This is why large companies often use multiple journals (also known as subjournals) to categorize and manage journal entries.
 *
 * Such journals can be divided into two categories:
 *
 * - Special journals: journals used to record specific types of transactions; for example, a purchases journal, a sales journal, or a cash management journal.
 * - General journals: journals used to record transactions that fall outside the scope of the special journals.
 *
 * Multiple journals or subjournals are used in the following Codat integrations:
 *
 * - [Sage Intacct](https://docs.codat.io/integrations/accounting/sage-intacct/accounting-sage-intacct)  (mandatory)
 * - [Exact Online](https://docs.codat.io/integrations/accounting/exact-online/accounting-exact-online)  (mandatory)
 * - [Oracle NetSuite](https://docs.codat.io/integrations/accounting/netsuite/accounting-netsuite) (optional)
 *
 * > When pushing journal entries to an accounting platform that doesn’t support multiple journals (multi-book accounting), the entries will be linked to the platform-generic journal. The Journals data type will only include one object.
 *
 */
export type AccountingJournal = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * Journal ID.
     */
    id?: string | undefined;
    /**
     * Native journal number or code.
     */
    journalCode?: string | null | undefined;
    /**
     * Journal name.
     *
     * @remarks
     * The maximum length for a journal name is 256 characters. All characters above that number will be truncated.
     */
    name?: string | null | undefined;
    /**
     * The type of the journal.
     */
    type?: string | null | undefined;
    /**
     * Parent journal ID.
     *
     * @remarks
     * If the journal is a parent journal, this value is not present.
     */
    parentId?: string | null | undefined;
    /**
     * If the journal has child journals, this value is true. If it doesn’t, it is false.
     */
    hasChildren?: boolean | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    createdOn?: string | undefined;
    /**
     * Current journal status.
     */
    status?: JournalStatus | undefined;
    metadata?: Metadata | undefined;
};

/** @internal */
export namespace AccountingJournal$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        journalCode?: string | null | undefined;
        name?: string | null | undefined;
        type?: string | null | undefined;
        parentId?: string | null | undefined;
        hasChildren?: boolean | undefined;
        createdOn?: string | undefined;
        status?: JournalStatus | undefined;
        metadata?: Metadata$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountingJournal, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            journalCode: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            hasChildren: z.boolean().optional(),
            createdOn: z.string().optional(),
            status: JournalStatus$.optional(),
            metadata: Metadata$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.journalCode === undefined ? null : { journalCode: v.journalCode }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id?: string | undefined;
        journalCode?: string | null | undefined;
        name?: string | null | undefined;
        type?: string | null | undefined;
        parentId?: string | null | undefined;
        hasChildren?: boolean | undefined;
        createdOn?: string | undefined;
        status?: JournalStatus | undefined;
        metadata?: Metadata$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountingJournal> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string().optional(),
            journalCode: z.nullable(z.string()).optional(),
            name: z.nullable(z.string()).optional(),
            type: z.nullable(z.string()).optional(),
            parentId: z.nullable(z.string()).optional(),
            hasChildren: z.boolean().optional(),
            createdOn: z.string().optional(),
            status: JournalStatus$.optional(),
            metadata: Metadata$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.journalCode === undefined ? null : { journalCode: v.journalCode }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.hasChildren === undefined ? null : { hasChildren: v.hasChildren }),
                ...(v.createdOn === undefined ? null : { createdOn: v.createdOn }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}
