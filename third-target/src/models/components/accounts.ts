/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { SourceRef, SourceRef$ } from "./sourceref";
import * as z from "zod";

export type Accounts = {
    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    sourceRef?: SourceRef | undefined;
    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    platformName?: string | undefined;
    /**
     * The bank or other financial institution providing the account.
     */
    accountProvider?: string | undefined;
    /**
     * The name of the account according to the provider.
     */
    accountName?: string | undefined;
    /**
     * The type of banking account, e.g. credit or debit.
     */
    accountType?: string | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * The balance of the bank account.
     */
    currentBalance?: Decimal$ | number | undefined;
};

/** @internal */
export namespace Accounts$ {
    export type Inbound = {
        sourceRef?: SourceRef$.Inbound | undefined;
        platformName?: string | undefined;
        accountProvider?: string | undefined;
        accountName?: string | undefined;
        accountType?: string | undefined;
        currency?: string | undefined;
        currentBalance?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Accounts, z.ZodTypeDef, Inbound> = z
        .object({
            sourceRef: SourceRef$.inboundSchema.optional(),
            platformName: z.string().optional(),
            accountProvider: z.string().optional(),
            accountName: z.string().optional(),
            accountType: z.string().optional(),
            currency: z.string().optional(),
            currentBalance: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceRef === undefined ? null : { sourceRef: v.sourceRef }),
                ...(v.platformName === undefined ? null : { platformName: v.platformName }),
                ...(v.accountProvider === undefined
                    ? null
                    : { accountProvider: v.accountProvider }),
                ...(v.accountName === undefined ? null : { accountName: v.accountName }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currentBalance === undefined ? null : { currentBalance: v.currentBalance }),
            };
        });

    export type Outbound = {
        sourceRef?: SourceRef$.Outbound | undefined;
        platformName?: string | undefined;
        accountProvider?: string | undefined;
        accountName?: string | undefined;
        accountType?: string | undefined;
        currency?: string | undefined;
        currentBalance?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Accounts> = z
        .object({
            sourceRef: SourceRef$.outboundSchema.optional(),
            platformName: z.string().optional(),
            accountProvider: z.string().optional(),
            accountName: z.string().optional(),
            accountType: z.string().optional(),
            currency: z.string().optional(),
            currentBalance: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceRef === undefined ? null : { sourceRef: v.sourceRef }),
                ...(v.platformName === undefined ? null : { platformName: v.platformName }),
                ...(v.accountProvider === undefined
                    ? null
                    : { accountProvider: v.accountProvider }),
                ...(v.accountName === undefined ? null : { accountName: v.accountName }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.currentBalance === undefined ? null : { currentBalance: v.currentBalance }),
            };
        });
}
