/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountingCustomerRef, AccountingCustomerRef$ } from "./accountingcustomerref";
import { BilledToType, BilledToType$ } from "./billedtotype";
import { ProjectRef, ProjectRef$ } from "./projectref";
import { TrackingCategoryRef, TrackingCategoryRef$ } from "./trackingcategoryref";
import * as z from "zod";

/**
 * Categories, and a project and customer, against which the item is tracked.
 */
export type AccountsPayableTracking = {
    categoryRefs: Array<TrackingCategoryRef>;
    customerRef?: AccountingCustomerRef | undefined;
    projectRef?: ProjectRef | undefined;
    /**
     * Defines if the invoice or credit note is billed/rebilled to a project or customer.
     */
    isBilledTo: BilledToType;
    /**
     * Defines if the invoice or credit note is billed/rebilled to a project or customer.
     */
    isRebilledTo: BilledToType;
};

/** @internal */
export namespace AccountsPayableTracking$ {
    export type Inbound = {
        categoryRefs: Array<TrackingCategoryRef$.Inbound>;
        customerRef?: AccountingCustomerRef$.Inbound | undefined;
        projectRef?: ProjectRef$.Inbound | undefined;
        isBilledTo: BilledToType;
        isRebilledTo: BilledToType;
    };

    export const inboundSchema: z.ZodType<AccountsPayableTracking, z.ZodTypeDef, Inbound> = z
        .object({
            categoryRefs: z.array(TrackingCategoryRef$.inboundSchema),
            customerRef: AccountingCustomerRef$.inboundSchema.optional(),
            projectRef: ProjectRef$.inboundSchema.optional(),
            isBilledTo: BilledToType$,
            isRebilledTo: BilledToType$,
        })
        .transform((v) => {
            return {
                categoryRefs: v.categoryRefs,
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.projectRef === undefined ? null : { projectRef: v.projectRef }),
                isBilledTo: v.isBilledTo,
                isRebilledTo: v.isRebilledTo,
            };
        });

    export type Outbound = {
        categoryRefs: Array<TrackingCategoryRef$.Outbound>;
        customerRef?: AccountingCustomerRef$.Outbound | undefined;
        projectRef?: ProjectRef$.Outbound | undefined;
        isBilledTo: BilledToType;
        isRebilledTo: BilledToType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountsPayableTracking> = z
        .object({
            categoryRefs: z.array(TrackingCategoryRef$.outboundSchema),
            customerRef: AccountingCustomerRef$.outboundSchema.optional(),
            projectRef: ProjectRef$.outboundSchema.optional(),
            isBilledTo: BilledToType$,
            isRebilledTo: BilledToType$,
        })
        .transform((v) => {
            return {
                categoryRefs: v.categoryRefs,
                ...(v.customerRef === undefined ? null : { customerRef: v.customerRef }),
                ...(v.projectRef === undefined ? null : { projectRef: v.projectRef }),
                isBilledTo: v.isBilledTo,
                isRebilledTo: v.isRebilledTo,
            };
        });
}
