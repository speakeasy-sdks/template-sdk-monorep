/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CommerceAddressType, CommerceAddressType$ } from "./commerceaddresstype";
import * as z from "zod";

export type CommerceAddress = {
    /**
     * The type of the address
     */
    type?: CommerceAddressType | undefined;
    /**
     * The first line of the address
     */
    line1?: string | undefined;
    /**
     * The second line of the address
     */
    line2?: string | undefined;
    /**
     * The third line of the address, or city
     */
    city?: string | undefined;
    /**
     * The fourth line of the address, or region
     */
    region?: string | undefined;
    /**
     * The country for the address
     */
    country?: string | undefined;
    /**
     * The postal (or zip) code for the address
     */
    postalCode?: string | undefined;
};

/** @internal */
export namespace CommerceAddress$ {
    export type Inbound = {
        type?: CommerceAddressType | undefined;
        line1?: string | undefined;
        line2?: string | undefined;
        city?: string | undefined;
        region?: string | undefined;
        country?: string | undefined;
        postalCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceAddress, z.ZodTypeDef, Inbound> = z
        .object({
            type: CommerceAddressType$.optional(),
            line1: z.string().optional(),
            line2: z.string().optional(),
            city: z.string().optional(),
            region: z.string().optional(),
            country: z.string().optional(),
            postalCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
            };
        });

    export type Outbound = {
        type?: CommerceAddressType | undefined;
        line1?: string | undefined;
        line2?: string | undefined;
        city?: string | undefined;
        region?: string | undefined;
        country?: string | undefined;
        postalCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceAddress> = z
        .object({
            type: CommerceAddressType$.optional(),
            line1: z.string().optional(),
            line2: z.string().optional(),
            city: z.string().optional(),
            region: z.string().optional(),
            country: z.string().optional(),
            postalCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.line1 === undefined ? null : { line1: v.line1 }),
                ...(v.line2 === undefined ? null : { line2: v.line2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
            };
        });
}
