/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CommerceAddress, CommerceAddress$ } from "./commerceaddress";
import * as z from "zod";

/**
 * The Location datatype holds information on the geographic location at which stocks of products may be held, as referenced in the Products data type.
 *
 * @remarks
 *
 * A Location also holds information on geographic locations where orders were placed, as referenced in the Orders data type.
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-locations) for this data type.
 */
export type CommerceLocation = {
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * A unique, persistent identifier for this record
     */
    id: string;
    /**
     * Name of this location
     */
    name?: string | undefined;
    address?: CommerceAddress | undefined;
};

/** @internal */
export namespace CommerceLocation$ {
    export type Inbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        name?: string | undefined;
        address?: CommerceAddress$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceLocation, z.ZodTypeDef, Inbound> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            name: z.string().optional(),
            address: CommerceAddress$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
            };
        });

    export type Outbound = {
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        name?: string | undefined;
        address?: CommerceAddress$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceLocation> = z
        .object({
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            name: z.string().optional(),
            address: CommerceAddress$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
            };
        });
}
