/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductVariant, ProductVariant$ } from "./productvariant";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import * as z from "zod";

/**
 * A Product is an item in the company's inventory, and includes information about the price and quantity of all products, and variants thereof, available for sale.
 *
 * @remarks
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-products) for this data type.
 *
 */
export type CommerceProduct = {
    /**
     * A unique, persistent identifier for this record
     */
    id: string;
    /**
     * Name of the product in the commerce or POS system
     */
    name?: string | undefined;
    /**
     * Description of the product recorded in the commerce or point of sale platform.
     */
    description?: string | undefined;
    /**
     * Retail category that the product is assigned to e.g. `Hardware`.
     */
    categorization?: string | undefined;
    /**
     * Whether the product represents a gift card or voucher that
     *
     * @remarks
     * can be redeemed in the commerce or POS platform.
     *
     */
    isGiftCard?: boolean | undefined;
    variants?: Array<ProductVariant> | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace CommerceProduct$ {
    export type Inbound = {
        id: string;
        name?: string | undefined;
        description?: string | undefined;
        categorization?: string | undefined;
        isGiftCard?: boolean | undefined;
        variants?: Array<ProductVariant$.Inbound> | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceProduct, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            name: z.string().optional(),
            description: z.string().optional(),
            categorization: z.string().optional(),
            isGiftCard: z.boolean().optional(),
            variants: z.array(ProductVariant$.inboundSchema).optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.categorization === undefined ? null : { categorization: v.categorization }),
                ...(v.isGiftCard === undefined ? null : { isGiftCard: v.isGiftCard }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        id: string;
        name?: string | undefined;
        description?: string | undefined;
        categorization?: string | undefined;
        isGiftCard?: boolean | undefined;
        variants?: Array<ProductVariant$.Outbound> | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceProduct> = z
        .object({
            id: z.string(),
            name: z.string().optional(),
            description: z.string().optional(),
            categorization: z.string().optional(),
            isGiftCard: z.boolean().optional(),
            variants: z.array(ProductVariant$.outboundSchema).optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.categorization === undefined ? null : { categorization: v.categorization }),
                ...(v.isGiftCard === undefined ? null : { isGiftCard: v.isGiftCard }),
                ...(v.variants === undefined ? null : { variants: v.variants }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
