/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CommerceReportComponent, CommerceReportComponent$ } from "./commercereportcomponent";
import { CommerceReportDimension, CommerceReportDimension$ } from "./commercereportdimension";
import { CommerceReportError, CommerceReportError$ } from "./commercereporterror";
import { CommerceReportMeasure, CommerceReportMeasure$ } from "./commercereportmeasure";
import * as z from "zod";

/**
 * ## Structure
 *
 * @remarks
 *
 * Assess reports follow a consistent structure. Reports contain four sections of information:
 *
 * ### 1. Report definition
 *
 * Information such as:
 *
 *   1. The report info (e.g. enhanced_profit_and_loss).
 *   2. The display name of the report (e.g. Enhanced Profit and Loss).
 *
 * ### 2. Dimension info
 *
 * Information about the dimension contained in the reports such as:
 *
 *   1. The type of dimension (e.g. datetime, recordRef).
 *   2. The display name of the dimension (e.g. Period, Category type, Category sub type).
 *   3. The details about each item within the dimension (e.g. displayName:"Jan 2022", start:"...", end:"...", id:"...", name:"...").
 *
 * ### 3. Measure info
 *
 * Information about the measures contained in the report such as:
 *
 *   1. The display name of the measure (e.g. value of account, percentage change).
 *   2. The type of the measure (e.g. currency, percentage).
 *   3. The unit of the measure (e.g. %, GBP).
 *
 * ### 4. The data for the report
 *
 * When the *includeDisplayName* parameter is set to *true*, it shows the *dimensionDisplayName* and *itemDisplayName* to make the data human-readable. The default setting for *includeDisplayName* is *false*.
 *
 *
 * ## Displaying the report
 *
 * Reports can be rendered as follows (ordering is implicit rather than explicit):
 *
 * ![A table showing an example of how a report can be rendered](https://files.readme.io/1fa20ca-Report1.png)
 *
 * # Data model
 *
 * ## Dimensions
 */
export type CommerceReport = {
    reportInfo?: Record<string, string> | undefined;
    dimensions?: Array<CommerceReportDimension> | undefined;
    measures?: Array<CommerceReportMeasure> | undefined;
    reportData?: Array<CommerceReportComponent> | undefined;
    errors?: Array<CommerceReportError> | undefined;
};

/** @internal */
export namespace CommerceReport$ {
    export type Inbound = {
        reportInfo?: Record<string, string> | undefined;
        dimensions?: Array<CommerceReportDimension$.Inbound> | undefined;
        measures?: Array<CommerceReportMeasure$.Inbound> | undefined;
        reportData?: Array<CommerceReportComponent$.Inbound> | undefined;
        errors?: Array<CommerceReportError$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceReport, z.ZodTypeDef, Inbound> = z
        .object({
            reportInfo: z.record(z.string()).optional(),
            dimensions: z.array(CommerceReportDimension$.inboundSchema).optional(),
            measures: z.array(CommerceReportMeasure$.inboundSchema).optional(),
            reportData: z.array(CommerceReportComponent$.inboundSchema).optional(),
            errors: z.array(CommerceReportError$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.measures === undefined ? null : { measures: v.measures }),
                ...(v.reportData === undefined ? null : { reportData: v.reportData }),
                ...(v.errors === undefined ? null : { errors: v.errors }),
            };
        });

    export type Outbound = {
        reportInfo?: Record<string, string> | undefined;
        dimensions?: Array<CommerceReportDimension$.Outbound> | undefined;
        measures?: Array<CommerceReportMeasure$.Outbound> | undefined;
        reportData?: Array<CommerceReportComponent$.Outbound> | undefined;
        errors?: Array<CommerceReportError$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceReport> = z
        .object({
            reportInfo: z.record(z.string()).optional(),
            dimensions: z.array(CommerceReportDimension$.outboundSchema).optional(),
            measures: z.array(CommerceReportMeasure$.outboundSchema).optional(),
            reportData: z.array(CommerceReportComponent$.outboundSchema).optional(),
            errors: z.array(CommerceReportError$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.measures === undefined ? null : { measures: v.measures }),
                ...(v.reportData === undefined ? null : { reportData: v.reportData }),
                ...(v.errors === undefined ? null : { errors: v.errors }),
            };
        });
}
