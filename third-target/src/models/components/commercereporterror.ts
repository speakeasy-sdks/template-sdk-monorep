/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CommerceReportError = {
    /**
     * Message returned by error.
     */
    message?: string | undefined;
    /**
     * The type of error.
     */
    type?: string | undefined;
    /**
     * Additional details on the error.
     */
    details?: Record<string, Array<string>> | undefined;
};

/** @internal */
export namespace CommerceReportError$ {
    export type Inbound = {
        message?: string | undefined;
        type?: string | undefined;
        details?: Record<string, Array<string>> | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceReportError, z.ZodTypeDef, Inbound> = z
        .object({
            message: z.string().optional(),
            type: z.string().optional(),
            details: z.record(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        message?: string | undefined;
        type?: string | undefined;
        details?: Record<string, Array<string>> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceReportError> = z
        .object({
            message: z.string().optional(),
            type: z.string().optional(),
            details: z.record(z.array(z.string())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}
