/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import { TransactionSourceRef, TransactionSourceRef$ } from "./transactionsourceref";
import { TransactionType, TransactionType$ } from "./transactiontype";
import * as z from "zod";

/**
 * Details of all financial transactions recorded in the commerce or point of sale system are added to the Transactions data type. For example, payments, service charges, and fees.
 *
 * @remarks
 *
 * You can use data from the Transactions endpoints to calculate key metrics, such as:
 * - Transaction volumes
 * - Average transaction volume
 * - Average transaction value
 * - Returns
 * - Payouts
 *
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&dataType=commerce-transactions) for this data type.
 */
export type CommerceTransaction = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    createdDate?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    sourceCreatedDate?: string | undefined;
    modifiedDate?: string | undefined;
    sourceModifiedDate?: string | undefined;
    /**
     * A unique, persistent identifier for this record
     */
    id: string;
    /**
     * The total transaction amount
     */
    totalAmount?: Decimal$ | number | undefined;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * The type of the platform transaction:
     *
     * @remarks
     * - `Unknown`
     * - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.
     * - `Payment` — Credit and debit card payments.
     * - `PaymentFee` — Payment provider's fee on each card payment.
     * - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.
     * - `Payout` — Transfer of funds from the seller's merchant account to their bank account.
     * - `Refund` — Refunds to a customer's credit or debit card.
     * - `Transfer` — Secure transfer of funds to the seller's bank account.
     */
    type?: TransactionType | undefined;
    /**
     * Non-standardised transaction type data from the commerce platform
     */
    subType?: string | undefined;
    /**
     * Link to the source event which triggered this transaction
     */
    transactionSourceRef?: TransactionSourceRef | undefined;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export namespace CommerceTransaction$ {
    export type Inbound = {
        createdDate?: string | undefined;
        sourceCreatedDate?: string | undefined;
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        totalAmount?: number | undefined;
        currency?: string | undefined;
        type?: TransactionType | undefined;
        subType?: string | undefined;
        transactionSourceRef?: TransactionSourceRef$.Inbound | undefined;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CommerceTransaction, z.ZodTypeDef, Inbound> = z
        .object({
            createdDate: z.string().optional(),
            sourceCreatedDate: z.string().optional(),
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            currency: z.string().optional(),
            type: TransactionType$.optional(),
            subType: z.string().optional(),
            transactionSourceRef: TransactionSourceRef$.inboundSchema.optional(),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.sourceCreatedDate === undefined
                    ? null
                    : { sourceCreatedDate: v.sourceCreatedDate }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.subType === undefined ? null : { subType: v.subType }),
                ...(v.transactionSourceRef === undefined
                    ? null
                    : { transactionSourceRef: v.transactionSourceRef }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        createdDate?: string | undefined;
        sourceCreatedDate?: string | undefined;
        modifiedDate?: string | undefined;
        sourceModifiedDate?: string | undefined;
        id: string;
        totalAmount?: number | undefined;
        currency?: string | undefined;
        type?: TransactionType | undefined;
        subType?: string | undefined;
        transactionSourceRef?: TransactionSourceRef$.Outbound | undefined;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CommerceTransaction> = z
        .object({
            createdDate: z.string().optional(),
            sourceCreatedDate: z.string().optional(),
            modifiedDate: z.string().optional(),
            sourceModifiedDate: z.string().optional(),
            id: z.string(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            currency: z.string().optional(),
            type: TransactionType$.optional(),
            subType: z.string().optional(),
            transactionSourceRef: TransactionSourceRef$.outboundSchema.optional(),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.sourceCreatedDate === undefined
                    ? null
                    : { sourceCreatedDate: v.sourceCreatedDate }),
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
                ...(v.sourceModifiedDate === undefined
                    ? null
                    : { sourceModifiedDate: v.sourceModifiedDate }),
                id: v.id,
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.subType === undefined ? null : { subType: v.subType }),
                ...(v.transactionSourceRef === undefined
                    ? null
                    : { transactionSourceRef: v.transactionSourceRef }),
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
