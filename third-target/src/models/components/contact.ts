/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AccountingAddress, AccountingAddress$ } from "./accountingaddress";
import { CustomerStatus, CustomerStatus$ } from "./customerstatus";
import { PhoneNumber, PhoneNumber$ } from "./phonenumber";
import * as z from "zod";

export type Contact = {
    /**
     * Name of a contact for a customer.
     */
    name?: string | null | undefined;
    /**
     * Email of a contact for a customer.
     */
    email?: string | null | undefined;
    /**
     * An array of Phone numbers.
     */
    phone?: Array<PhoneNumber> | null | undefined;
    address?: AccountingAddress | undefined;
    /**
     * Status of customer.
     */
    status: CustomerStatus;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    modifiedDate?: string | undefined;
};

/** @internal */
export namespace Contact$ {
    export type Inbound = {
        name?: string | null | undefined;
        email?: string | null | undefined;
        phone?: Array<PhoneNumber$.Inbound> | null | undefined;
        address?: AccountingAddress$.Inbound | undefined;
        status: CustomerStatus;
        modifiedDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Contact, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.nullable(z.string()).optional(),
            email: z.nullable(z.string()).optional(),
            phone: z.nullable(z.array(PhoneNumber$.inboundSchema)).optional(),
            address: AccountingAddress$.inboundSchema.optional(),
            status: CustomerStatus$,
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.address === undefined ? null : { address: v.address }),
                status: v.status,
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });

    export type Outbound = {
        name?: string | null | undefined;
        email?: string | null | undefined;
        phone?: Array<PhoneNumber$.Outbound> | null | undefined;
        address?: AccountingAddress$.Outbound | undefined;
        status: CustomerStatus;
        modifiedDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contact> = z
        .object({
            name: z.nullable(z.string()).optional(),
            email: z.nullable(z.string()).optional(),
            phone: z.nullable(z.array(PhoneNumber$.outboundSchema)).optional(),
            address: AccountingAddress$.outboundSchema.optional(),
            status: CustomerStatus$,
            modifiedDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.address === undefined ? null : { address: v.address }),
                status: v.status,
                ...(v.modifiedDate === undefined ? null : { modifiedDate: v.modifiedDate }),
            };
        });
}
