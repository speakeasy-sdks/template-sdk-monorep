/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DataIntegrityConnectionId = {
    /**
     * An array of strings. The connection IDs for the type specified in the url.
     */
    source?: Array<string> | undefined;
    /**
     * An array of strings. The connection IDs for the type being matched to.
     */
    target?: Array<string> | undefined;
};

/** @internal */
export namespace DataIntegrityConnectionId$ {
    export type Inbound = {
        source?: Array<string> | undefined;
        target?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegrityConnectionId, z.ZodTypeDef, Inbound> = z
        .object({
            source: z.array(z.string()).optional(),
            target: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
            };
        });

    export type Outbound = {
        source?: Array<string> | undefined;
        target?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegrityConnectionId> = z
        .object({
            source: z.array(z.string()).optional(),
            target: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
            };
        });
}
