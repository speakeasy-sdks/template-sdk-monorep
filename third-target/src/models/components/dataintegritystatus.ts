/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataIntegrityAmounts, DataIntegrityAmounts$ } from "./dataintegrityamounts";
import { DataIntegrityConnectionId, DataIntegrityConnectionId$ } from "./dataintegrityconnectionid";
import { DataIntegrityDates, DataIntegrityDates$ } from "./dataintegritydates";
import { DataIntegrityStatusInfo, DataIntegrityStatusInfo$ } from "./dataintegritystatusinfo";
import * as z from "zod";

export type DataIntegrityStatus = {
    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    type?: string | undefined;
    statusInfo?: DataIntegrityStatusInfo | undefined;
    connectionIds?: DataIntegrityConnectionId | undefined;
    /**
     * Only returned for transactions. For accounts, there is nothing returned.
     */
    amounts?: DataIntegrityAmounts | undefined;
    /**
     * Only returned for transactions. For accounts, there is nothing returned.
     */
    dates?: DataIntegrityDates | undefined;
};

/** @internal */
export namespace DataIntegrityStatus$ {
    export type Inbound = {
        type?: string | undefined;
        statusInfo?: DataIntegrityStatusInfo$.Inbound | undefined;
        connectionIds?: DataIntegrityConnectionId$.Inbound | undefined;
        amounts?: DataIntegrityAmounts$.Inbound | undefined;
        dates?: DataIntegrityDates$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegrityStatus, z.ZodTypeDef, Inbound> = z
        .object({
            type: z.string().optional(),
            statusInfo: DataIntegrityStatusInfo$.inboundSchema.optional(),
            connectionIds: DataIntegrityConnectionId$.inboundSchema.optional(),
            amounts: DataIntegrityAmounts$.inboundSchema.optional(),
            dates: DataIntegrityDates$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.statusInfo === undefined ? null : { statusInfo: v.statusInfo }),
                ...(v.connectionIds === undefined ? null : { connectionIds: v.connectionIds }),
                ...(v.amounts === undefined ? null : { amounts: v.amounts }),
                ...(v.dates === undefined ? null : { dates: v.dates }),
            };
        });

    export type Outbound = {
        type?: string | undefined;
        statusInfo?: DataIntegrityStatusInfo$.Outbound | undefined;
        connectionIds?: DataIntegrityConnectionId$.Outbound | undefined;
        amounts?: DataIntegrityAmounts$.Outbound | undefined;
        dates?: DataIntegrityDates$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegrityStatus> = z
        .object({
            type: z.string().optional(),
            statusInfo: DataIntegrityStatusInfo$.outboundSchema.optional(),
            connectionIds: DataIntegrityConnectionId$.outboundSchema.optional(),
            amounts: DataIntegrityAmounts$.outboundSchema.optional(),
            dates: DataIntegrityDates$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.statusInfo === undefined ? null : { statusInfo: v.statusInfo }),
                ...(v.connectionIds === undefined ? null : { connectionIds: v.connectionIds }),
                ...(v.amounts === undefined ? null : { amounts: v.amounts }),
                ...(v.dates === undefined ? null : { dates: v.dates }),
            };
        });
}
