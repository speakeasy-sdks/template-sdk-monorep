/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IntegrityStatus, IntegrityStatus$ } from "./integritystatus";
import * as z from "zod";

export type DataIntegrityStatusInfo = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    lastMatched?: string | undefined;
    /**
     * The current status of the most recently run matching algorithm.
     */
    currentStatus?: IntegrityStatus | undefined;
    /**
     * Detailed explanation supporting the status value.
     */
    statusMessage?: string | undefined;
};

/** @internal */
export namespace DataIntegrityStatusInfo$ {
    export type Inbound = {
        lastMatched?: string | undefined;
        currentStatus?: IntegrityStatus | undefined;
        statusMessage?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DataIntegrityStatusInfo, z.ZodTypeDef, Inbound> = z
        .object({
            lastMatched: z.string().optional(),
            currentStatus: IntegrityStatus$.optional(),
            statusMessage: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastMatched === undefined ? null : { lastMatched: v.lastMatched }),
                ...(v.currentStatus === undefined ? null : { currentStatus: v.currentStatus }),
                ...(v.statusMessage === undefined ? null : { statusMessage: v.statusMessage }),
            };
        });

    export type Outbound = {
        lastMatched?: string | undefined;
        currentStatus?: IntegrityStatus | undefined;
        statusMessage?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataIntegrityStatusInfo> = z
        .object({
            lastMatched: z.string().optional(),
            currentStatus: IntegrityStatus$.optional(),
            statusMessage: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastMatched === undefined ? null : { lastMatched: v.lastMatched }),
                ...(v.currentStatus === undefined ? null : { currentStatus: v.currentStatus }),
                ...(v.statusMessage === undefined ? null : { statusMessage: v.statusMessage }),
            };
        });
}
