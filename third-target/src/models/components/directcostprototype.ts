/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import {
    AccountingPaymentAllocation,
    AccountingPaymentAllocation$,
} from "./accountingpaymentallocation";
import { DirectCostLineItem, DirectCostLineItem$ } from "./directcostlineitem";
import { SupplementalData, SupplementalData$ } from "./supplementaldata";
import * as z from "zod";

/**
 * Allowed name of the 'dataType'.
 */
export enum DirectCostPrototypeDataType {
    Customers = "customers",
    Suppliers = "suppliers",
}

/**
 * A customer or supplier associated with the direct cost.
 */
export type DirectCostPrototypeContactReference = {
    /**
     * Unique identifier for a customer or supplier.
     */
    id: string;
    /**
     * Allowed name of the 'dataType'.
     */
    dataType?: DirectCostPrototypeDataType | null | undefined;
};

export type DirectCostPrototype = {
    /**
     * User-friendly reference for the direct cost.
     */
    reference?: string | null | undefined;
    /**
     * A note attached to the direct cost.
     */
    note?: string | null | undefined;
    /**
     * A customer or supplier associated with the direct cost.
     */
    contactRef?: DirectCostPrototypeContactReference | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    issueDate: string;
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency: string;
    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     *
     * @remarks
     *
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.
     *
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     *
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).
     *
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     *
     * ## Examples with base currency of GBP
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     *
     * ## Examples with base currency of USD
     *
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     *
     *
     * ### Integration-specific details
     *
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    currencyRate?: Decimal$ | number | null | undefined;
    /**
     * An array of line items.
     */
    lineItems: Array<DirectCostLineItem>;
    /**
     * An array of payment allocations.
     */
    paymentAllocations: Array<AccountingPaymentAllocation>;
    /**
     * The total amount of the direct costs, excluding any taxes.
     */
    subTotal: Decimal$ | number;
    /**
     * The total amount of tax on the direct costs.
     */
    taxAmount: Decimal$ | number;
    /**
     * The amount of the direct costs, inclusive of tax.
     */
    totalAmount: Decimal$ | number;
    /**
     * Supplemental data is additional data you can include in our standard data types.
     *
     * @remarks
     *
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    supplementalData?: SupplementalData | undefined;
};

/** @internal */
export const DirectCostPrototypeDataType$ = z.nativeEnum(DirectCostPrototypeDataType);

/** @internal */
export namespace DirectCostPrototypeContactReference$ {
    export type Inbound = {
        id: string;
        dataType?: DirectCostPrototypeDataType | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        DirectCostPrototypeContactReference,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string(),
            dataType: z.nullable(DirectCostPrototypeDataType$).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });

    export type Outbound = {
        id: string;
        dataType?: DirectCostPrototypeDataType | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DirectCostPrototypeContactReference
    > = z
        .object({
            id: z.string(),
            dataType: z.nullable(DirectCostPrototypeDataType$).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.dataType === undefined ? null : { dataType: v.dataType }),
            };
        });
}

/** @internal */
export namespace DirectCostPrototype$ {
    export type Inbound = {
        reference?: string | null | undefined;
        note?: string | null | undefined;
        contactRef?: DirectCostPrototypeContactReference$.Inbound | undefined;
        issueDate: string;
        currency: string;
        currencyRate?: number | null | undefined;
        lineItems: Array<DirectCostLineItem$.Inbound>;
        paymentAllocations: Array<AccountingPaymentAllocation$.Inbound>;
        subTotal: number;
        taxAmount: number;
        totalAmount: number;
        supplementalData?: SupplementalData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DirectCostPrototype, z.ZodTypeDef, Inbound> = z
        .object({
            reference: z.nullable(z.string()).optional(),
            note: z.nullable(z.string()).optional(),
            contactRef: z.lazy(() => DirectCostPrototypeContactReference$.inboundSchema).optional(),
            issueDate: z.string(),
            currency: z.string(),
            currencyRate: z.nullable(z.number().transform((v) => new Decimal$(v))).optional(),
            lineItems: z.array(DirectCostLineItem$.inboundSchema),
            paymentAllocations: z.array(AccountingPaymentAllocation$.inboundSchema),
            subTotal: z.number().transform((v) => new Decimal$(v)),
            taxAmount: z.number().transform((v) => new Decimal$(v)),
            totalAmount: z.number().transform((v) => new Decimal$(v)),
            supplementalData: SupplementalData$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                issueDate: v.issueDate,
                currency: v.currency,
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                lineItems: v.lineItems,
                paymentAllocations: v.paymentAllocations,
                subTotal: v.subTotal,
                taxAmount: v.taxAmount,
                totalAmount: v.totalAmount,
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });

    export type Outbound = {
        reference?: string | null | undefined;
        note?: string | null | undefined;
        contactRef?: DirectCostPrototypeContactReference$.Outbound | undefined;
        issueDate: string;
        currency: string;
        currencyRate?: number | null | undefined;
        lineItems: Array<DirectCostLineItem$.Outbound>;
        paymentAllocations: Array<AccountingPaymentAllocation$.Outbound>;
        subTotal: number;
        taxAmount: number;
        totalAmount: number;
        supplementalData?: SupplementalData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DirectCostPrototype> = z
        .object({
            reference: z.nullable(z.string()).optional(),
            note: z.nullable(z.string()).optional(),
            contactRef: z
                .lazy(() => DirectCostPrototypeContactReference$.outboundSchema)
                .optional(),
            issueDate: z.string(),
            currency: z.string(),
            currencyRate: z
                .nullable(
                    z
                        .union([z.instanceof(Decimal$), z.number()])
                        .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                )
                .optional(),
            lineItems: z.array(DirectCostLineItem$.outboundSchema),
            paymentAllocations: z.array(AccountingPaymentAllocation$.outboundSchema),
            subTotal: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            taxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            supplementalData: SupplementalData$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.reference === undefined ? null : { reference: v.reference }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.contactRef === undefined ? null : { contactRef: v.contactRef }),
                issueDate: v.issueDate,
                currency: v.currency,
                ...(v.currencyRate === undefined ? null : { currencyRate: v.currencyRate }),
                lineItems: v.lineItems,
                paymentAllocations: v.paymentAllocations,
                subTotal: v.subTotal,
                taxAmount: v.taxAmount,
                totalAmount: v.totalAmount,
                ...(v.supplementalData === undefined
                    ? null
                    : { supplementalData: v.supplementalData }),
            };
        });
}
