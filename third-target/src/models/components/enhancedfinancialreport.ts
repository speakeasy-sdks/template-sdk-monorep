/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import {
    EnhancedReportAccountCategory,
    EnhancedReportAccountCategory$,
} from "./enhancedreportaccountcategory";
import { EnhancedReportInfo, EnhancedReportInfo$ } from "./enhancedreportinfo";
import * as z from "zod";

export type ReportItem = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    date?: string | undefined;
    /**
     * Balance of the account as reported on the profit and loss or Balance sheet.
     */
    balance?: Decimal$ | number | undefined;
    /**
     * Name of the account.
     */
    accountName?: string | undefined;
    /**
     * The unique account ID.
     */
    accountId?: string | undefined;
    accountCategory?: EnhancedReportAccountCategory | undefined;
};

export type EnhancedFinancialReport = {
    reportInfo?: EnhancedReportInfo | undefined;
    /**
     * An array of report items.
     */
    reportItems?: Array<ReportItem> | undefined;
};

/** @internal */
export namespace ReportItem$ {
    export type Inbound = {
        date?: string | undefined;
        balance?: number | undefined;
        accountName?: string | undefined;
        accountId?: string | undefined;
        accountCategory?: EnhancedReportAccountCategory$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ReportItem, z.ZodTypeDef, Inbound> = z
        .object({
            date: z.string().optional(),
            balance: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            accountName: z.string().optional(),
            accountId: z.string().optional(),
            accountCategory: EnhancedReportAccountCategory$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.accountName === undefined ? null : { accountName: v.accountName }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.accountCategory === undefined
                    ? null
                    : { accountCategory: v.accountCategory }),
            };
        });

    export type Outbound = {
        date?: string | undefined;
        balance?: number | undefined;
        accountName?: string | undefined;
        accountId?: string | undefined;
        accountCategory?: EnhancedReportAccountCategory$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportItem> = z
        .object({
            date: z.string().optional(),
            balance: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            accountName: z.string().optional(),
            accountId: z.string().optional(),
            accountCategory: EnhancedReportAccountCategory$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.accountName === undefined ? null : { accountName: v.accountName }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.accountCategory === undefined
                    ? null
                    : { accountCategory: v.accountCategory }),
            };
        });
}

/** @internal */
export namespace EnhancedFinancialReport$ {
    export type Inbound = {
        reportInfo?: EnhancedReportInfo$.Inbound | undefined;
        reportItems?: Array<ReportItem$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<EnhancedFinancialReport, z.ZodTypeDef, Inbound> = z
        .object({
            reportInfo: EnhancedReportInfo$.inboundSchema.optional(),
            reportItems: z.array(z.lazy(() => ReportItem$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
            };
        });

    export type Outbound = {
        reportInfo?: EnhancedReportInfo$.Outbound | undefined;
        reportItems?: Array<ReportItem$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EnhancedFinancialReport> = z
        .object({
            reportInfo: EnhancedReportInfo$.outboundSchema.optional(),
            reportItems: z.array(z.lazy(() => ReportItem$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
            };
        });
}
