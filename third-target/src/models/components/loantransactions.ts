/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    LoanTransactionsReportInfo,
    LoanTransactionsReportInfo$,
} from "./loantransactionsreportinfo";
import { ReportItems, ReportItems$ } from "./reportitems";
import * as z from "zod";

export type LoanTransactions = {
    reportInfo?: LoanTransactionsReportInfo | undefined;
    /**
     * Contains object of reporting properties. The loan ref will reference a different object depending on the integration type.
     */
    reportItems?: Array<ReportItems> | undefined;
    /**
     * If there are no errors, an empty array is returned.
     */
    errors?: Array<any> | undefined;
};

/** @internal */
export namespace LoanTransactions$ {
    export type Inbound = {
        reportInfo?: LoanTransactionsReportInfo$.Inbound | undefined;
        reportItems?: Array<ReportItems$.Inbound> | undefined;
        errors?: Array<any> | undefined;
    };

    export const inboundSchema: z.ZodType<LoanTransactions, z.ZodTypeDef, Inbound> = z
        .object({
            reportInfo: LoanTransactionsReportInfo$.inboundSchema.optional(),
            reportItems: z.array(ReportItems$.inboundSchema).optional(),
            errors: z.array(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
                ...(v.errors === undefined ? null : { errors: v.errors }),
            };
        });

    export type Outbound = {
        reportInfo?: LoanTransactionsReportInfo$.Outbound | undefined;
        reportItems?: Array<ReportItems$.Outbound> | undefined;
        errors?: Array<any> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoanTransactions> = z
        .object({
            reportInfo: LoanTransactionsReportInfo$.outboundSchema.optional(),
            reportItems: z.array(ReportItems$.outboundSchema).optional(),
            errors: z.array(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reportInfo === undefined ? null : { reportInfo: v.reportInfo }),
                ...(v.reportItems === undefined ? null : { reportItems: v.reportItems }),
                ...(v.errors === undefined ? null : { errors: v.errors }),
            };
        });
}
