/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { OrderDiscountAllocation, OrderDiscountAllocation$ } from "./orderdiscountallocation";
import { ProductRef, ProductRef$ } from "./productref";
import { ProductVariantRef, ProductVariantRef$ } from "./productvariantref";
import { TaxComponentAllocation, TaxComponentAllocation$ } from "./taxcomponentallocation";
import * as z from "zod";

export type OrderLineItem = {
    /**
     * A unique, persistent identifier for this record
     */
    id: string;
    /**
     * Number of units of the product sold.
     *
     * @remarks
     * For refunds, quantity is negative.
     *
     */
    quantity?: Decimal$ | number | undefined;
    /**
     * Percentage rate (from 0 to 100) of any sales tax applied to the unit price.
     */
    taxPercentage?: Decimal$ | number | undefined;
    /**
     * Total amount of the line item, including discounts and tax.
     */
    totalAmount?: Decimal$ | number | undefined;
    /**
     * Total amount of tax applied to the line item, factoring in any discounts.
     */
    totalTaxAmount?: Decimal$ | number | undefined;
    /**
     * Price per unit of goods or services, excluding discounts and tax.
     */
    unitPrice?: Decimal$ | number | undefined;
    /**
     * Taxes breakdown as applied to order lines.
     */
    taxes?: Array<TaxComponentAllocation> | undefined;
    /**
     * Reference that links the line item to the correct product details.
     */
    productRef?: ProductRef | undefined;
    /**
     * Reference that links the line item to the specific version of product that has been ordered.
     */
    productVariantRef?: ProductVariantRef | undefined;
    discountAllocations?: Array<OrderDiscountAllocation> | undefined;
};

/** @internal */
export namespace OrderLineItem$ {
    export type Inbound = {
        id: string;
        quantity?: number | undefined;
        taxPercentage?: number | undefined;
        totalAmount?: number | undefined;
        totalTaxAmount?: number | undefined;
        unitPrice?: number | undefined;
        taxes?: Array<TaxComponentAllocation$.Inbound> | undefined;
        productRef?: ProductRef$.Inbound | undefined;
        productVariantRef?: ProductVariantRef$.Inbound | undefined;
        discountAllocations?: Array<OrderDiscountAllocation$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<OrderLineItem, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            quantity: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            taxPercentage: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            totalTaxAmount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            unitPrice: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            taxes: z.array(TaxComponentAllocation$.inboundSchema).optional(),
            productRef: ProductRef$.inboundSchema.optional(),
            productVariantRef: ProductVariantRef$.inboundSchema.optional(),
            discountAllocations: z.array(OrderDiscountAllocation$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxPercentage === undefined ? null : { taxPercentage: v.taxPercentage }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
                ...(v.taxes === undefined ? null : { taxes: v.taxes }),
                ...(v.productRef === undefined ? null : { productRef: v.productRef }),
                ...(v.productVariantRef === undefined
                    ? null
                    : { productVariantRef: v.productVariantRef }),
                ...(v.discountAllocations === undefined
                    ? null
                    : { discountAllocations: v.discountAllocations }),
            };
        });

    export type Outbound = {
        id: string;
        quantity?: number | undefined;
        taxPercentage?: number | undefined;
        totalAmount?: number | undefined;
        totalTaxAmount?: number | undefined;
        unitPrice?: number | undefined;
        taxes?: Array<TaxComponentAllocation$.Outbound> | undefined;
        productRef?: ProductRef$.Outbound | undefined;
        productVariantRef?: ProductVariantRef$.Outbound | undefined;
        discountAllocations?: Array<OrderDiscountAllocation$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderLineItem> = z
        .object({
            id: z.string(),
            quantity: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            taxPercentage: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            totalTaxAmount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            unitPrice: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            taxes: z.array(TaxComponentAllocation$.outboundSchema).optional(),
            productRef: ProductRef$.outboundSchema.optional(),
            productVariantRef: ProductVariantRef$.outboundSchema.optional(),
            discountAllocations: z.array(OrderDiscountAllocation$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxPercentage === undefined ? null : { taxPercentage: v.taxPercentage }),
                ...(v.totalAmount === undefined ? null : { totalAmount: v.totalAmount }),
                ...(v.totalTaxAmount === undefined ? null : { totalTaxAmount: v.totalTaxAmount }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
                ...(v.taxes === undefined ? null : { taxes: v.taxes }),
                ...(v.productRef === undefined ? null : { productRef: v.productRef }),
                ...(v.productVariantRef === undefined
                    ? null
                    : { productVariantRef: v.productVariantRef }),
                ...(v.discountAllocations === undefined
                    ? null
                    : { discountAllocations: v.discountAllocations }),
            };
        });
}
