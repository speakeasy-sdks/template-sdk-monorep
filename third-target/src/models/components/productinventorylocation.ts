/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { LocationRef, LocationRef$ } from "./locationref";
import * as z from "zod";

export type ProductInventoryLocation = {
    /**
     * The quantity of stock remaining at location.
     */
    quantity?: Decimal$ | number | undefined;
    /**
     * Reference to the geographic location where the order was placed.
     */
    locationRef?: LocationRef | undefined;
};

/** @internal */
export namespace ProductInventoryLocation$ {
    export type Inbound = {
        quantity?: number | undefined;
        locationRef?: LocationRef$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ProductInventoryLocation, z.ZodTypeDef, Inbound> = z
        .object({
            quantity: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            locationRef: LocationRef$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.locationRef === undefined ? null : { locationRef: v.locationRef }),
            };
        });

    export type Outbound = {
        quantity?: number | undefined;
        locationRef?: LocationRef$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductInventoryLocation> = z
        .object({
            quantity: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            locationRef: LocationRef$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.locationRef === undefined ? null : { locationRef: v.locationRef }),
            };
        });
}
