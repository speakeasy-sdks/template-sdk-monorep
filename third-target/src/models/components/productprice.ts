/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type ProductPrice = {
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     *
     * @remarks
     *
     * ## Unknown currencies
     *
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.
     *
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    currency?: string | undefined;
    /**
     * The product variant's unit price.
     */
    unitPrice?: Decimal$ | number | undefined;
};

/** @internal */
export namespace ProductPrice$ {
    export type Inbound = {
        currency?: string | undefined;
        unitPrice?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ProductPrice, z.ZodTypeDef, Inbound> = z
        .object({
            currency: z.string().optional(),
            unitPrice: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
            };
        });

    export type Outbound = {
        currency?: string | undefined;
        unitPrice?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductPrice> = z
        .object({
            currency: z.string().optional(),
            unitPrice: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.unitPrice === undefined ? null : { unitPrice: v.unitPrice }),
            };
        });
}
