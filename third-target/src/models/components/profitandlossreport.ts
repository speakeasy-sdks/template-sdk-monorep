/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { ReportLine, ReportLine$ } from "./reportline";
import * as z from "zod";

export type ProfitAndLossReport = {
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    fromDate?: string | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    toDate?: string | undefined;
    income?: ReportLine | undefined;
    costOfSales?: ReportLine | undefined;
    /**
     * Gross profit of the company in the given date range.
     */
    grossProfit: Decimal$ | number;
    expenses?: ReportLine | undefined;
    /**
     * Net operating profit of the company in the given date range.
     */
    netOperatingProfit: Decimal$ | number;
    otherExpenses?: ReportLine | undefined;
    otherIncome?: ReportLine | undefined;
    /**
     * Net other income of the company in the given date range.
     */
    netOtherIncome: Decimal$ | number;
    /**
     * Net profit of the company in the given date range.
     */
    netProfit: Decimal$ | number;
};

/** @internal */
export namespace ProfitAndLossReport$ {
    export type Inbound = {
        fromDate?: string | undefined;
        toDate?: string | undefined;
        income?: ReportLine$.Inbound | undefined;
        costOfSales?: ReportLine$.Inbound | undefined;
        grossProfit: number;
        expenses?: ReportLine$.Inbound | undefined;
        netOperatingProfit: number;
        otherExpenses?: ReportLine$.Inbound | undefined;
        otherIncome?: ReportLine$.Inbound | undefined;
        netOtherIncome: number;
        netProfit: number;
    };

    export const inboundSchema: z.ZodType<ProfitAndLossReport, z.ZodTypeDef, Inbound> = z
        .object({
            fromDate: z.string().optional(),
            toDate: z.string().optional(),
            income: ReportLine$.inboundSchema.optional(),
            costOfSales: ReportLine$.inboundSchema.optional(),
            grossProfit: z.number().transform((v) => new Decimal$(v)),
            expenses: ReportLine$.inboundSchema.optional(),
            netOperatingProfit: z.number().transform((v) => new Decimal$(v)),
            otherExpenses: ReportLine$.inboundSchema.optional(),
            otherIncome: ReportLine$.inboundSchema.optional(),
            netOtherIncome: z.number().transform((v) => new Decimal$(v)),
            netProfit: z.number().transform((v) => new Decimal$(v)),
        })
        .transform((v) => {
            return {
                ...(v.fromDate === undefined ? null : { fromDate: v.fromDate }),
                ...(v.toDate === undefined ? null : { toDate: v.toDate }),
                ...(v.income === undefined ? null : { income: v.income }),
                ...(v.costOfSales === undefined ? null : { costOfSales: v.costOfSales }),
                grossProfit: v.grossProfit,
                ...(v.expenses === undefined ? null : { expenses: v.expenses }),
                netOperatingProfit: v.netOperatingProfit,
                ...(v.otherExpenses === undefined ? null : { otherExpenses: v.otherExpenses }),
                ...(v.otherIncome === undefined ? null : { otherIncome: v.otherIncome }),
                netOtherIncome: v.netOtherIncome,
                netProfit: v.netProfit,
            };
        });

    export type Outbound = {
        fromDate?: string | undefined;
        toDate?: string | undefined;
        income?: ReportLine$.Outbound | undefined;
        costOfSales?: ReportLine$.Outbound | undefined;
        grossProfit: number;
        expenses?: ReportLine$.Outbound | undefined;
        netOperatingProfit: number;
        otherExpenses?: ReportLine$.Outbound | undefined;
        otherIncome?: ReportLine$.Outbound | undefined;
        netOtherIncome: number;
        netProfit: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProfitAndLossReport> = z
        .object({
            fromDate: z.string().optional(),
            toDate: z.string().optional(),
            income: ReportLine$.outboundSchema.optional(),
            costOfSales: ReportLine$.outboundSchema.optional(),
            grossProfit: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            expenses: ReportLine$.outboundSchema.optional(),
            netOperatingProfit: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            otherExpenses: ReportLine$.outboundSchema.optional(),
            otherIncome: ReportLine$.outboundSchema.optional(),
            netOtherIncome: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
            netProfit: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber())),
        })
        .transform((v) => {
            return {
                ...(v.fromDate === undefined ? null : { fromDate: v.fromDate }),
                ...(v.toDate === undefined ? null : { toDate: v.toDate }),
                ...(v.income === undefined ? null : { income: v.income }),
                ...(v.costOfSales === undefined ? null : { costOfSales: v.costOfSales }),
                grossProfit: v.grossProfit,
                ...(v.expenses === undefined ? null : { expenses: v.expenses }),
                netOperatingProfit: v.netOperatingProfit,
                ...(v.otherExpenses === undefined ? null : { otherExpenses: v.otherExpenses }),
                ...(v.otherIncome === undefined ? null : { otherIncome: v.otherIncome }),
                netOtherIncome: v.netOtherIncome,
                netProfit: v.netProfit,
            };
        });
}
