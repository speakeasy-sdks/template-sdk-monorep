/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type ReportComponentMeasure = {
    /**
     * The measure's index.
     */
    index?: number | undefined;
    /**
     * The measure's display name.
     */
    measureDisplayName?: string | undefined;
    /**
     * The measure's value.
     */
    value?: Decimal$ | number | undefined;
};

/** @internal */
export namespace ReportComponentMeasure$ {
    export type Inbound = {
        index?: number | undefined;
        measureDisplayName?: string | undefined;
        value?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ReportComponentMeasure, z.ZodTypeDef, Inbound> = z
        .object({
            index: z.number().int().optional(),
            measureDisplayName: z.string().optional(),
            value: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.measureDisplayName === undefined
                    ? null
                    : { measureDisplayName: v.measureDisplayName }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        index?: number | undefined;
        measureDisplayName?: string | undefined;
        value?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportComponentMeasure> = z
        .object({
            index: z.number().int().optional(),
            measureDisplayName: z.string().optional(),
            value: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.index === undefined ? null : { index: v.index }),
                ...(v.measureDisplayName === undefined
                    ? null
                    : { measureDisplayName: v.measureDisplayName }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
