/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import { ItemRef, ItemRef$ } from "./itemref";
import { LoanRef, LoanRef$ } from "./loanref";
import * as z from "zod";

/**
 * The type of loan transaction.
 */
export enum LoanTransactionType {
    Investment = "Investment",
    Repayment = "Repayment",
    Interest = "Interest",
    AccuredInterest = "AccuredInterest",
}

export type ReportItems = {
    loanRef?: LoanRef | undefined;
    itemRef?: ItemRef | undefined;
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     *
     * @remarks
     *
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     *
     *
     *
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     *
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     *
     * > Time zones
     * >
     * > Not all dates from Codat will contain information about time zones.
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    date?: string | undefined;
    /**
     * The loan transaction amount.
     */
    amount?: Decimal$ | number | undefined;
    /**
     * The type of loan transaction.
     */
    loanTransactionType?: LoanTransactionType | undefined;
    /**
     * The name of lender providing the loan.
     */
    lenderName?: string | undefined;
};

/** @internal */
export const LoanTransactionType$ = z.nativeEnum(LoanTransactionType);

/** @internal */
export namespace ReportItems$ {
    export type Inbound = {
        loanRef?: LoanRef$.Inbound | undefined;
        itemRef?: ItemRef$.Inbound | undefined;
        date?: string | undefined;
        amount?: number | undefined;
        loanTransactionType?: LoanTransactionType | undefined;
        lenderName?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReportItems, z.ZodTypeDef, Inbound> = z
        .object({
            loanRef: LoanRef$.inboundSchema.optional(),
            itemRef: ItemRef$.inboundSchema.optional(),
            date: z.string().optional(),
            amount: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            loanTransactionType: LoanTransactionType$.optional(),
            lenderName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.loanRef === undefined ? null : { loanRef: v.loanRef }),
                ...(v.itemRef === undefined ? null : { itemRef: v.itemRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.loanTransactionType === undefined
                    ? null
                    : { loanTransactionType: v.loanTransactionType }),
                ...(v.lenderName === undefined ? null : { lenderName: v.lenderName }),
            };
        });

    export type Outbound = {
        loanRef?: LoanRef$.Outbound | undefined;
        itemRef?: ItemRef$.Outbound | undefined;
        date?: string | undefined;
        amount?: number | undefined;
        loanTransactionType?: LoanTransactionType | undefined;
        lenderName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReportItems> = z
        .object({
            loanRef: LoanRef$.outboundSchema.optional(),
            itemRef: ItemRef$.outboundSchema.optional(),
            date: z.string().optional(),
            amount: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            loanTransactionType: LoanTransactionType$.optional(),
            lenderName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.loanRef === undefined ? null : { loanRef: v.loanRef }),
                ...(v.itemRef === undefined ? null : { itemRef: v.itemRef }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.loanTransactionType === undefined
                    ? null
                    : { loanTransactionType: v.loanTransactionType }),
                ...(v.lenderName === undefined ? null : { lenderName: v.lenderName }),
            };
        });
}
