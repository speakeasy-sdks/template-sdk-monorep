/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Decimal as Decimal$ } from "../../types";
import * as z from "zod";

export type TransactionCategory = {
    /**
     * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
     */
    confidence?: Decimal$ | number | undefined;
    /**
     * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
     */
    levels?: Array<string> | undefined;
};

/** @internal */
export namespace TransactionCategory$ {
    export type Inbound = {
        confidence?: number | undefined;
        levels?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionCategory, z.ZodTypeDef, Inbound> = z
        .object({
            confidence: z
                .number()
                .transform((v) => new Decimal$(v))
                .optional(),
            levels: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.confidence === undefined ? null : { confidence: v.confidence }),
                ...(v.levels === undefined ? null : { levels: v.levels }),
            };
        });

    export type Outbound = {
        confidence?: number | undefined;
        levels?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionCategory> = z
        .object({
            confidence: z
                .union([z.instanceof(Decimal$), z.number()])
                .transform((v) => (typeof v === "number" ? v : v.toNumber()))
                .optional(),
            levels: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.confidence === undefined ? null : { confidence: v.confidence }),
                ...(v.levels === undefined ? null : { levels: v.levels }),
            };
        });
}
