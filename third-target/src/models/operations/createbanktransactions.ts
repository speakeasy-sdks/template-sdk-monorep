/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateBankTransactionsRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for an account.
     */
    accountId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    accountingCreateBankTransactions?: components.AccountingCreateBankTransactions | undefined;
};

export type CreateBankTransactionsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingCreateBankTransactionsResponse?:
        | components.AccountingCreateBankTransactionsResponse
        | undefined;
};

/** @internal */
export namespace CreateBankTransactionsRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        accountId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete?: boolean | undefined;
        AccountingCreateBankTransactions?:
            | components.AccountingCreateBankTransactions$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBankTransactionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            accountId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
            allowSyncOnPushComplete: z.boolean().default(true),
            AccountingCreateBankTransactions:
                components.AccountingCreateBankTransactions$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                accountId: v.accountId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                ...(v.AccountingCreateBankTransactions === undefined
                    ? null
                    : { accountingCreateBankTransactions: v.AccountingCreateBankTransactions }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        accountId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete: boolean;
        AccountingCreateBankTransactions?:
            | components.AccountingCreateBankTransactions$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankTransactionsRequest> =
        z
            .object({
                companyId: z.string(),
                connectionId: z.string(),
                accountId: z.string(),
                timeoutInMinutes: z.number().int().optional(),
                allowSyncOnPushComplete: z.boolean().default(true),
                accountingCreateBankTransactions:
                    components.AccountingCreateBankTransactions$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                    accountId: v.accountId,
                    ...(v.timeoutInMinutes === undefined
                        ? null
                        : { timeoutInMinutes: v.timeoutInMinutes }),
                    allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                    ...(v.accountingCreateBankTransactions === undefined
                        ? null
                        : { AccountingCreateBankTransactions: v.accountingCreateBankTransactions }),
                };
            });
}

/** @internal */
export namespace CreateBankTransactionsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingCreateBankTransactionsResponse?:
            | components.AccountingCreateBankTransactionsResponse$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBankTransactionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingCreateBankTransactionsResponse:
                components.AccountingCreateBankTransactionsResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingCreateBankTransactionsResponse === undefined
                    ? null
                    : {
                          accountingCreateBankTransactionsResponse:
                              v.AccountingCreateBankTransactionsResponse,
                      }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingCreateBankTransactionsResponse?:
            | components.AccountingCreateBankTransactionsResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBankTransactionsResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                accountingCreateBankTransactionsResponse:
                    components.AccountingCreateBankTransactionsResponse$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.accountingCreateBankTransactionsResponse === undefined
                        ? null
                        : {
                              AccountingCreateBankTransactionsResponse:
                                  v.accountingCreateBankTransactionsResponse,
                          }),
                };
            });
}
