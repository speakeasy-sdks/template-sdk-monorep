/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateTransferRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    timeoutInMinutes?: number | undefined;
    /**
     * Allow a sync upon push completion.
     */
    allowSyncOnPushComplete?: boolean | undefined;
    accountingTransfer?: components.AccountingTransfer | null | undefined;
};

export type CreateTransferResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingCreateTransferResponse?: components.AccountingCreateTransferResponse | undefined;
};

/** @internal */
export namespace CreateTransferRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete?: boolean | undefined;
        AccountingTransfer?: components.AccountingTransfer$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTransferRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
            allowSyncOnPushComplete: z.boolean().default(true),
            AccountingTransfer: z.nullable(components.AccountingTransfer$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                ...(v.AccountingTransfer === undefined
                    ? null
                    : { accountingTransfer: v.AccountingTransfer }),
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        timeoutInMinutes?: number | undefined;
        allowSyncOnPushComplete: boolean;
        AccountingTransfer?: components.AccountingTransfer$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransferRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            timeoutInMinutes: z.number().int().optional(),
            allowSyncOnPushComplete: z.boolean().default(true),
            accountingTransfer: z
                .nullable(components.AccountingTransfer$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                ...(v.timeoutInMinutes === undefined
                    ? null
                    : { timeoutInMinutes: v.timeoutInMinutes }),
                allowSyncOnPushComplete: v.allowSyncOnPushComplete,
                ...(v.accountingTransfer === undefined
                    ? null
                    : { AccountingTransfer: v.accountingTransfer }),
            };
        });
}

/** @internal */
export namespace CreateTransferResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingCreateTransferResponse?:
            | components.AccountingCreateTransferResponse$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTransferResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingCreateTransferResponse:
                components.AccountingCreateTransferResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingCreateTransferResponse === undefined
                    ? null
                    : { accountingCreateTransferResponse: v.AccountingCreateTransferResponse }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingCreateTransferResponse?:
            | components.AccountingCreateTransferResponse$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransferResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingCreateTransferResponse:
                components.AccountingCreateTransferResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingCreateTransferResponse === undefined
                    ? null
                    : { AccountingCreateTransferResponse: v.accountingCreateTransferResponse }),
            };
        });
}
