/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAccountingAccountRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for an account.
     */
    accountId: string;
};

export type GetAccountingAccountResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingAccount?: components.AccountingAccount | null | undefined;
};

/** @internal */
export namespace GetAccountingAccountRequest$ {
    export type Inbound = {
        companyId: string;
        accountId: string;
    };

    export const inboundSchema: z.ZodType<GetAccountingAccountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                accountId: v.accountId,
            };
        });

    export type Outbound = {
        companyId: string;
        accountId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingAccountRequest> = z
        .object({
            companyId: z.string(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                accountId: v.accountId,
            };
        });
}

/** @internal */
export namespace GetAccountingAccountResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingAccount?: components.AccountingAccount$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetAccountingAccountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingAccount: z.nullable(components.AccountingAccount$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingAccount === undefined
                    ? null
                    : { accountingAccount: v.AccountingAccount }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingAccount?: components.AccountingAccount$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingAccountResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingAccount: z.nullable(components.AccountingAccount$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingAccount === undefined
                    ? null
                    : { AccountingAccount: v.accountingAccount }),
            };
        });
}
