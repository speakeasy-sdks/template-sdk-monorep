/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as components from "../components";
import * as z from "zod";

export type GetAccountingAgedCreditorsReportRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Date the report is generated up to.
     */
    reportDate?: RFCDate | undefined;
    /**
     * Number of periods to include in the report.
     */
    numberOfPeriods?: number | undefined;
    /**
     * The length of period in days.
     */
    periodLengthDays?: number | undefined;
};

export type GetAccountingAgedCreditorsReportResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    accountingAgedCreditorReport?: components.AccountingAgedCreditorReport | undefined;
};

/** @internal */
export namespace GetAccountingAgedCreditorsReportRequest$ {
    export type Inbound = {
        companyId: string;
        reportDate?: string | undefined;
        numberOfPeriods?: number | undefined;
        periodLengthDays?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccountingAgedCreditorsReportRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            companyId: z.string(),
            reportDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            numberOfPeriods: z.number().int().optional(),
            periodLengthDays: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.reportDate === undefined ? null : { reportDate: v.reportDate }),
                ...(v.numberOfPeriods === undefined
                    ? null
                    : { numberOfPeriods: v.numberOfPeriods }),
                ...(v.periodLengthDays === undefined
                    ? null
                    : { periodLengthDays: v.periodLengthDays }),
            };
        });

    export type Outbound = {
        companyId: string;
        reportDate?: string | undefined;
        numberOfPeriods?: number | undefined;
        periodLengthDays?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingAgedCreditorsReportRequest
    > = z
        .object({
            companyId: z.string(),
            reportDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            numberOfPeriods: z.number().int().optional(),
            periodLengthDays: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                ...(v.reportDate === undefined ? null : { reportDate: v.reportDate }),
                ...(v.numberOfPeriods === undefined
                    ? null
                    : { numberOfPeriods: v.numberOfPeriods }),
                ...(v.periodLengthDays === undefined
                    ? null
                    : { periodLengthDays: v.periodLengthDays }),
            };
        });
}

/** @internal */
export namespace GetAccountingAgedCreditorsReportResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingAgedCreditorReport?: components.AccountingAgedCreditorReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccountingAgedCreditorsReportResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingAgedCreditorReport:
                components.AccountingAgedCreditorReport$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingAgedCreditorReport === undefined
                    ? null
                    : { accountingAgedCreditorReport: v.AccountingAgedCreditorReport }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingAgedCreditorReport?:
            | components.AccountingAgedCreditorReport$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccountingAgedCreditorsReportResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingAgedCreditorReport:
                components.AccountingAgedCreditorReport$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingAgedCreditorReport === undefined
                    ? null
                    : { AccountingAgedCreditorReport: v.accountingAgedCreditorReport }),
            };
        });
}
