/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAccountingProfileRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
};

export type GetAccountingProfileResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    accountingCompanyInfo?: components.AccountingCompanyInfo | undefined;
};

/** @internal */
export namespace GetAccountingProfileRequest$ {
    export type Inbound = {
        companyId: string;
    };

    export const inboundSchema: z.ZodType<GetAccountingProfileRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });

    export type Outbound = {
        companyId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingProfileRequest> = z
        .object({
            companyId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
            };
        });
}

/** @internal */
export namespace GetAccountingProfileResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        AccountingCompanyInfo?: components.AccountingCompanyInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetAccountingProfileResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AccountingCompanyInfo: components.AccountingCompanyInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AccountingCompanyInfo === undefined
                    ? null
                    : { accountingCompanyInfo: v.AccountingCompanyInfo }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AccountingCompanyInfo?: components.AccountingCompanyInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccountingProfileResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            accountingCompanyInfo: components.AccountingCompanyInfo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.accountingCompanyInfo === undefined
                    ? null
                    : { AccountingCompanyInfo: v.accountingCompanyInfo }),
            };
        });
}
