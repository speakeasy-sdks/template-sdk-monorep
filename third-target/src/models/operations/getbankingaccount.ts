/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetBankingAccountRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for an account.
     */
    accountId: string;
};

export type GetBankingAccountResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    bankingAccount?: components.BankingAccount | null | undefined;
};

/** @internal */
export namespace GetBankingAccountRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        accountId: string;
    };

    export const inboundSchema: z.ZodType<GetBankingAccountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                accountId: v.accountId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        accountId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBankingAccountRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            accountId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                accountId: v.accountId,
            };
        });
}

/** @internal */
export namespace GetBankingAccountResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        BankingAccount?: components.BankingAccount$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetBankingAccountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            BankingAccount: z.nullable(components.BankingAccount$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.BankingAccount === undefined ? null : { bankingAccount: v.BankingAccount }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        BankingAccount?: components.BankingAccount$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBankingAccountResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            bankingAccount: z.nullable(components.BankingAccount$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.bankingAccount === undefined ? null : { BankingAccount: v.bankingAccount }),
            };
        });
}
