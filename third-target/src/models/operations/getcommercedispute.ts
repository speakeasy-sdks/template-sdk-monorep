/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceDisputeRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a dispute.
     */
    disputeId: string;
};

export type GetCommerceDisputeResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceDispute?: components.CommerceDispute | null | undefined;
};

/** @internal */
export namespace GetCommerceDisputeRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        disputeId: string;
    };

    export const inboundSchema: z.ZodType<GetCommerceDisputeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            disputeId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                disputeId: v.disputeId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        disputeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceDisputeRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            disputeId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                disputeId: v.disputeId,
            };
        });
}

/** @internal */
export namespace GetCommerceDisputeResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceDispute?: components.CommerceDispute$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceDisputeResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceDispute: z.nullable(components.CommerceDispute$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceDispute === undefined
                    ? null
                    : { commerceDispute: v.CommerceDispute }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceDispute?: components.CommerceDispute$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceDisputeResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            commerceDispute: z.nullable(components.CommerceDispute$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.commerceDispute === undefined
                    ? null
                    : { CommerceDispute: v.commerceDispute }),
            };
        });
}
