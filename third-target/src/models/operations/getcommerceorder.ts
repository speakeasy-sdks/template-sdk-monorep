/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceOrderRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for an order.
     */
    orderId: string;
};

export type GetCommerceOrderResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceOrder?: components.CommerceOrder | null | undefined;
};

/** @internal */
export namespace GetCommerceOrderRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        orderId: string;
    };

    export const inboundSchema: z.ZodType<GetCommerceOrderRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            orderId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                orderId: v.orderId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        orderId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceOrderRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            orderId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                orderId: v.orderId,
            };
        });
}

/** @internal */
export namespace GetCommerceOrderResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceOrder?: components.CommerceOrder$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceOrderResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceOrder: z.nullable(components.CommerceOrder$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceOrder === undefined ? null : { commerceOrder: v.CommerceOrder }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceOrder?: components.CommerceOrder$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceOrderResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            commerceOrder: z.nullable(components.CommerceOrder$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.commerceOrder === undefined ? null : { CommerceOrder: v.commerceOrder }),
            };
        });
}
