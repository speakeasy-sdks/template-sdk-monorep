/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceProductRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * Unique identifier for a product.
     */
    productId: string;
};

export type GetCommerceProductResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceProduct?: components.CommerceProduct | undefined;
};

/** @internal */
export namespace GetCommerceProductRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        productId: string;
    };

    export const inboundSchema: z.ZodType<GetCommerceProductRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            productId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                productId: v.productId,
            };
        });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        productId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceProductRequest> = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            productId: z.string(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                productId: v.productId,
            };
        });
}

/** @internal */
export namespace GetCommerceProductResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceProduct?: components.CommerceProduct$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceProductResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceProduct: components.CommerceProduct$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceProduct === undefined
                    ? null
                    : { commerceProduct: v.CommerceProduct }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceProduct?: components.CommerceProduct$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCommerceProductResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            commerceProduct: components.CommerceProduct$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.commerceProduct === undefined
                    ? null
                    : { CommerceProduct: v.commerceProduct }),
            };
        });
}
