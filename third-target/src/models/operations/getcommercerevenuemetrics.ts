/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCommerceRevenueMetricsRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Unique identifier for a connection.
     */
    connectionId: string;
    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    reportDate: string;
    /**
     * The number of months per period. E.g. 2 = 2 months per period.
     */
    periodLength: number;
    /**
     * The number of periods to return. There will be no pagination as a query parameter.
     */
    numberOfPeriods: number;
    /**
     * The period unit of time returned.
     */
    periodUnit: components.PeriodUnit;
    /**
     * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
     */
    includeDisplayNames?: boolean | undefined;
};

export type GetCommerceRevenueMetricsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    commerceReport?: components.CommerceReport | undefined;
};

/** @internal */
export namespace GetCommerceRevenueMetricsRequest$ {
    export type Inbound = {
        companyId: string;
        connectionId: string;
        reportDate: string;
        periodLength: number;
        numberOfPeriods: number;
        periodUnit: components.PeriodUnit;
        includeDisplayNames?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetCommerceRevenueMetricsRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                companyId: z.string(),
                connectionId: z.string(),
                reportDate: z.string(),
                periodLength: z.number().int(),
                numberOfPeriods: z.number().int(),
                periodUnit: components.PeriodUnit$,
                includeDisplayNames: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    connectionId: v.connectionId,
                    reportDate: v.reportDate,
                    periodLength: v.periodLength,
                    numberOfPeriods: v.numberOfPeriods,
                    periodUnit: v.periodUnit,
                    ...(v.includeDisplayNames === undefined
                        ? null
                        : { includeDisplayNames: v.includeDisplayNames }),
                };
            });

    export type Outbound = {
        companyId: string;
        connectionId: string;
        reportDate: string;
        periodLength: number;
        numberOfPeriods: number;
        periodUnit: components.PeriodUnit;
        includeDisplayNames?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCommerceRevenueMetricsRequest
    > = z
        .object({
            companyId: z.string(),
            connectionId: z.string(),
            reportDate: z.string(),
            periodLength: z.number().int(),
            numberOfPeriods: z.number().int(),
            periodUnit: components.PeriodUnit$,
            includeDisplayNames: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                connectionId: v.connectionId,
                reportDate: v.reportDate,
                periodLength: v.periodLength,
                numberOfPeriods: v.numberOfPeriods,
                periodUnit: v.periodUnit,
                ...(v.includeDisplayNames === undefined
                    ? null
                    : { includeDisplayNames: v.includeDisplayNames }),
            };
        });
}

/** @internal */
export namespace GetCommerceRevenueMetricsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CommerceReport?: components.CommerceReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetCommerceRevenueMetricsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CommerceReport: components.CommerceReport$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CommerceReport === undefined ? null : { commerceReport: v.CommerceReport }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CommerceReport?: components.CommerceReport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCommerceRevenueMetricsResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            commerceReport: components.CommerceReport$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.commerceReport === undefined ? null : { CommerceReport: v.commerceReport }),
            };
        });
}
