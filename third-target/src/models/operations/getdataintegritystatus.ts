/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDataIntegrityStatusRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * A key for a Codat data type.
     */
    dataType: components.DataIntegrityDataType;
};

export type GetDataIntegrityStatusResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    dataIntegrityStatuses?: components.DataIntegrityStatuses | undefined;
};

/** @internal */
export namespace GetDataIntegrityStatusRequest$ {
    export type Inbound = {
        companyId: string;
        dataType: components.DataIntegrityDataType;
    };

    export const inboundSchema: z.ZodType<GetDataIntegrityStatusRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            dataType: components.DataIntegrityDataType$,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                dataType: v.dataType,
            };
        });

    export type Outbound = {
        companyId: string;
        dataType: components.DataIntegrityDataType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDataIntegrityStatusRequest> =
        z
            .object({
                companyId: z.string(),
                dataType: components.DataIntegrityDataType$,
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    dataType: v.dataType,
                };
            });
}

/** @internal */
export namespace GetDataIntegrityStatusResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        DataIntegrityStatuses?: components.DataIntegrityStatuses$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetDataIntegrityStatusResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            DataIntegrityStatuses: components.DataIntegrityStatuses$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.DataIntegrityStatuses === undefined
                    ? null
                    : { dataIntegrityStatuses: v.DataIntegrityStatuses }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        DataIntegrityStatuses?: components.DataIntegrityStatuses$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDataIntegrityStatusResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                dataIntegrityStatuses: components.DataIntegrityStatuses$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.dataIntegrityStatuses === undefined
                        ? null
                        : { DataIntegrityStatuses: v.dataIntegrityStatuses }),
                };
            });
}
