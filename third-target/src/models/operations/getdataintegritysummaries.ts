/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDataIntegritySummariesRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * A key for a Codat data type.
     */
    dataType: components.DataIntegrityDataType;
    /**
     * Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
     */
    query?: string | undefined;
};

export type GetDataIntegritySummariesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    dataIntegritySummaries?: components.DataIntegritySummaries | undefined;
};

/** @internal */
export namespace GetDataIntegritySummariesRequest$ {
    export type Inbound = {
        companyId: string;
        dataType: components.DataIntegrityDataType;
        query?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetDataIntegritySummariesRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                companyId: z.string(),
                dataType: components.DataIntegrityDataType$,
                query: z.string().optional(),
            })
            .transform((v) => {
                return {
                    companyId: v.companyId,
                    dataType: v.dataType,
                    ...(v.query === undefined ? null : { query: v.query }),
                };
            });

    export type Outbound = {
        companyId: string;
        dataType: components.DataIntegrityDataType;
        query?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDataIntegritySummariesRequest
    > = z
        .object({
            companyId: z.string(),
            dataType: components.DataIntegrityDataType$,
            query: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                dataType: v.dataType,
                ...(v.query === undefined ? null : { query: v.query }),
            };
        });
}

/** @internal */
export namespace GetDataIntegritySummariesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        DataIntegritySummaries?: components.DataIntegritySummaries$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetDataIntegritySummariesResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            DataIntegritySummaries: components.DataIntegritySummaries$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.DataIntegritySummaries === undefined
                    ? null
                    : { dataIntegritySummaries: v.DataIntegritySummaries }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        DataIntegritySummaries?: components.DataIntegritySummaries$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDataIntegritySummariesResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            dataIntegritySummaries: components.DataIntegritySummaries$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.dataIntegritySummaries === undefined
                    ? null
                    : { DataIntegritySummaries: v.dataIntegritySummaries }),
            };
        });
}
