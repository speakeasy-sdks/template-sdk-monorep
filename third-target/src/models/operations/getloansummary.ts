/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Data source type.
 */
export enum GetLoanSummaryQueryParamSourceType {
    Banking = "banking",
    Commerce = "commerce",
    Accounting = "accounting",
}

export type GetLoanSummaryRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * Data source type.
     */
    sourceType: GetLoanSummaryQueryParamSourceType;
};

export type GetLoanSummaryResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    loanSummary?: components.LoanSummary | undefined;
};

/** @internal */
export const GetLoanSummaryQueryParamSourceType$ = z.nativeEnum(GetLoanSummaryQueryParamSourceType);

/** @internal */
export namespace GetLoanSummaryRequest$ {
    export type Inbound = {
        companyId: string;
        sourceType: GetLoanSummaryQueryParamSourceType;
    };

    export const inboundSchema: z.ZodType<GetLoanSummaryRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            sourceType: GetLoanSummaryQueryParamSourceType$,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                sourceType: v.sourceType,
            };
        });

    export type Outbound = {
        companyId: string;
        sourceType: GetLoanSummaryQueryParamSourceType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLoanSummaryRequest> = z
        .object({
            companyId: z.string(),
            sourceType: GetLoanSummaryQueryParamSourceType$,
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                sourceType: v.sourceType,
            };
        });
}

/** @internal */
export namespace GetLoanSummaryResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        LoanSummary?: components.LoanSummary$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetLoanSummaryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            LoanSummary: components.LoanSummary$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.LoanSummary === undefined ? null : { loanSummary: v.LoanSummary }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        LoanSummary?: components.LoanSummary$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLoanSummaryResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            loanSummary: components.LoanSummary$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.loanSummary === undefined ? null : { LoanSummary: v.loanSummary }),
            };
        });
}
