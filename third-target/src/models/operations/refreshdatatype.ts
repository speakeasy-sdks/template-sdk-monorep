/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RefreshDataTypeRequest = {
    /**
     * Unique identifier for a company.
     */
    companyId: string;
    /**
     * A key for a Codat data type.
     */
    dataType: components.DataType;
    /**
     * Optionally, provide a data connection id to only queue pull operations on that connection.
     */
    connectionId?: string | undefined;
};

export type RefreshDataTypeResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * OK
     */
    pullOperation?: components.PullOperation | undefined;
};

/** @internal */
export namespace RefreshDataTypeRequest$ {
    export type Inbound = {
        companyId: string;
        dataType: components.DataType;
        connectionId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RefreshDataTypeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            companyId: z.string(),
            dataType: components.DataType$,
            connectionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                dataType: v.dataType,
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
            };
        });

    export type Outbound = {
        companyId: string;
        dataType: components.DataType;
        connectionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshDataTypeRequest> = z
        .object({
            companyId: z.string(),
            dataType: components.DataType$,
            connectionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                companyId: v.companyId,
                dataType: v.dataType,
                ...(v.connectionId === undefined ? null : { connectionId: v.connectionId }),
            };
        });
}

/** @internal */
export namespace RefreshDataTypeResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        PullOperation?: components.PullOperation$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RefreshDataTypeResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            PullOperation: components.PullOperation$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.PullOperation === undefined ? null : { pullOperation: v.PullOperation }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        PullOperation?: components.PullOperation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RefreshDataTypeResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            pullOperation: components.PullOperation$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.pullOperation === undefined ? null : { PullOperation: v.pullOperation }),
            };
        });
}
