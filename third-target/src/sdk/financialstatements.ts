/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { Accounts } from "./accounts";
import { BalanceSheet } from "./balancesheet";
import { CashFlow } from "./cashflow";
import { ProfitAndLoss } from "./profitandloss";

export class FinancialStatements extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _profitAndLoss?: ProfitAndLoss;
    get profitAndLoss() {
        return (this._profitAndLoss ??= new ProfitAndLoss(this.options$));
    }

    private _balanceSheet?: BalanceSheet;
    get balanceSheet() {
        return (this._balanceSheet ??= new BalanceSheet(this.options$));
    }

    private _accounts?: Accounts;
    get accounts() {
        return (this._accounts ??= new Accounts(this.options$));
    }

    private _cashFlow?: CashFlow;
    get cashFlow() {
        return (this._cashFlow ??= new CashFlow(this.options$));
    }
}
