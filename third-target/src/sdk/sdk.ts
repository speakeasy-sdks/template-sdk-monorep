/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AccountingBankData } from "./accountingbankdata";
import { AccountsPayable } from "./accountspayable";
import { AccountsReceivable } from "./accountsreceivable";
import { Banking } from "./banking";
import { BankStatements } from "./bankstatements";
import { Companies } from "./companies";
import { CompanyInfo } from "./companyinfo";
import { Connections } from "./connections";
import { DataIntegrity } from "./dataintegrity";
import { ExcelReports } from "./excelreports";
import { FileUpload } from "./fileupload";
import { FinancialStatements } from "./financialstatements";
import { Liabilities } from "./liabilities";
import { LoanWriteback } from "./loanwriteback";
import { ManageData } from "./managedata";
import { Sales } from "./sales";
import { Transactions } from "./transactions";

export class SDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _companies?: Companies;
    get companies() {
        return (this._companies ??= new Companies(this.options$));
    }

    private _connections?: Connections;
    get connections() {
        return (this._connections ??= new Connections(this.options$));
    }

    private _manageData?: ManageData;
    get manageData() {
        return (this._manageData ??= new ManageData(this.options$));
    }

    private _dataIntegrity?: DataIntegrity;
    get dataIntegrity() {
        return (this._dataIntegrity ??= new DataIntegrity(this.options$));
    }

    private _financialStatements?: FinancialStatements;
    get financialStatements() {
        return (this._financialStatements ??= new FinancialStatements(this.options$));
    }

    private _banking?: Banking;
    get banking() {
        return (this._banking ??= new Banking(this.options$));
    }

    private _accountsReceivable?: AccountsReceivable;
    get accountsReceivable() {
        return (this._accountsReceivable ??= new AccountsReceivable(this.options$));
    }

    private _liabilities?: Liabilities;
    get liabilities() {
        return (this._liabilities ??= new Liabilities(this.options$));
    }

    private _sales?: Sales;
    get sales() {
        return (this._sales ??= new Sales(this.options$));
    }

    private _excelReports?: ExcelReports;
    get excelReports() {
        return (this._excelReports ??= new ExcelReports(this.options$));
    }

    private _transactions?: Transactions;
    get transactions() {
        return (this._transactions ??= new Transactions(this.options$));
    }

    private _accountsPayable?: AccountsPayable;
    get accountsPayable() {
        return (this._accountsPayable ??= new AccountsPayable(this.options$));
    }

    private _companyInfo?: CompanyInfo;
    get companyInfo() {
        return (this._companyInfo ??= new CompanyInfo(this.options$));
    }

    private _accountingBankData?: AccountingBankData;
    get accountingBankData() {
        return (this._accountingBankData ??= new AccountingBankData(this.options$));
    }

    private _fileUpload?: FileUpload;
    get fileUpload() {
        return (this._fileUpload ??= new FileUpload(this.options$));
    }

    private _loanWriteback?: LoanWriteback;
    get loanWriteback() {
        return (this._loanWriteback ??= new LoanWriteback(this.options$));
    }

    private _bankStatements?: BankStatements;
    get bankStatements() {
        return (this._bankStatements ??= new BankStatements(this.options$));
    }
}
